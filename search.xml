<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Build a Node.js and React app with npm on jenkins]]></title>
    <url>%2Fnodejs-react-on-jenkins%2F</url>
    <content type="text"><![CDATA[https://jenkins.io/doc/tutorials/build-a-node-js-and-react-app-with-npm/ 이 예제를 따라 가면서 기록 남기는 용도이다. Github forkhttps://github.com/jenkins-docs/simple-node-js-react-npm-app 이 곳에 가서 우 상단 fork 버튼을 클릭한다. github가 가입되어있고, 내 레파지토리로 상위가 포크 된다는 전제이다. Jenkins File을 레파지토리에 직접 넣어 줘야 해서 필요하다. 아니면 예제에 나온것처럼 로컬 작업을 해야 하는데 그게 더 힘들 것 같다. 파이프라인만들기젠킨스 대쉬보드 &gt; 새로운아이템 &gt; 파이프라인 선택 &gt; 저장(이름 넣고) 파이프라인 : Pipeline script from SCM 선택 SCM : git Repository url : fork한 내 GitHub url Credential : github credentails이 있으면 선택하고 없으면 비게 놔둬도 된다. (단, 프라이빗 레포가 아니라는 전제이다.) Script Path : Jenkinsfile Jenkins file 만들기github에 가서 내 레파지토리로 fork가 된 simple-node-js-react-npm-app 레포에 진입한다 Create new file : 버튼 클릭 파일명 : Jenkinsfile (Script Path의 이름과 같아야 한다. 대소문자 주의) pipeline &#123; agent &#123; docker &#123; image 'node:6-alpine' args '-p 3001:3000' &#125; &#125; stages &#123; stage('Build') &#123; steps &#123; sh 'npm install' &#125; &#125; &#125; jenkins가 동작하는 서버에 docker와 nodejs&amp;npm이 깔려 있다는 전제가 있다. Agent docker파이프라인이 독커에서 실행 되는데, 해당 이미지는 node:6-alpine이다. args는 docker 실행시 들어가는 파라메터 값으로 -p 3001:3000 host 머신(젠킨스 돌아가는 서버) 3001 포트로 대외 서비스 하고, 3000번 포트는 독커 포트이다. 이 둘을 연결하는 파라메터 이다. stage파이프라인의 순서이자 이름이다. 여기서는 Build만 았고 npm프로젝트를 install 한다. Build젠킨스대쉬보드 &gt; 파이프라인 &gt; &#39;위에서 만든 프로젝트&#39;파이프라인 선택 &gt; Build Now 만약에 빌드 중 다음과 같은 오류가 나온다면 npm ERR! Error: EACCES: permission denied, mkdir &#39;/.npm&#39; 파이프라인 코드를 다음과 같이 변경 해보자 &gt; pipeline &#123;&gt; agent &#123;&gt; docker &#123;&gt; image 'node:6-alpine' &gt; args '-p 3001:3000' &gt; &#125;&gt; &#125;&gt; environment &#123;&gt; HOME = '.'&gt; &#125;&gt; stages &#123;&gt; stage('Build') &#123; &gt; steps &#123;&gt; sh 'npm install' &gt; &#125;&gt; &#125;&gt; &#125;&gt; &#125;&gt; &gt; https://stackoverflow.com/questions/42743201/npm-install-fails-in-jenkins-pipeline-in-docker/42957034?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa 여기 보고 고치긴 했는데 자세한 이유는 잘 모르겠다. 다음 기회에... /var/lib/jenkins/workspace/nodejs 디렉토리를 가보면 nodejs가 인스톨 되어 있는 것을 볼 수 있다. nvm 사용 (agnet를 사용하지 말고)agent를 사용하지 않고 로컬 서버 환경에 있는 node&amp;npm을 사용하면 node 혹은 npm 둘다 command not found가 발생할 수 있다. bin path가 사용자 환경과 다르기 때문이다. jenkins plugin installhttps://wiki.jenkins.io/display/JENKINS/Nvm+Wrapper+Plugin 이 플러그인을 젠킨스에 설치 한다. 대쉬보드 &gt; 젠킨스관리 &gt; 플러그인 매니저 파이프라인프리스타일화면 또는 스크립트를 통해서 nvm을 적용 가능하다. 스크립트는 다음과 같이 처리 하면 된다. node &#123; checkout scm stage('build') &#123; sh "echo $PATH" nvm(nvmInstallURL: 'https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh', nvmIoJsOrgMirror: 'https://iojs.org/dist', nvmNodeJsOrgMirror: 'https://nodejs.org/dist', version: '10.16.0') &#123; sh "npm install" echo "Build main site distribution" sh "npm run build" &#125; &#125;&#125; 신경 써야 할 것은 2개이다. nvmInstallURL : nvm 설치 url -&gt; 버전이 바뀌면 url도 바뀌게 된다. version : node version 이다. nvm 환경내에서 작동할 shell script를 이후에 적용해 주면 된다. Deployagent를 사용한 경우는 상관이 없겠지만, master agent를 사용한 경우는 직접 디플로이 처리 까지 해줘야 한다. 아래 코드는 build가 완료된 파일을 httpd(아파치) 디렉토리로 copy하는 내용이다. node &#123; checkout scm stage('build') &#123; nvm(nvmInstallURL: 'https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh', nvmIoJsOrgMirror: 'https://iojs.org/dist', nvmNodeJsOrgMirror: 'https://nodejs.org/dist', version: '10.16.0') &#123; sh "npm install" echo "Build main site distribution" sh "npm run build" &#125; &#125; stage('Deploy') &#123; sh "cp -r dist/* /data/test1/" &#125; &#125; 상위 stage Deploy가 해당 영역인데, 상위 처럼 적용한 경우 permission denied가 날 가능 성이 높다. jenkins는 jenkins라고 하는 user 또는 group권한을 바탕으로 마스터 서버에서 작동 하기 때문이다. 그래서 target이 되는 /data/test1/에 대한 그룹 권한을 다음과 같이 변경한다. sudo chown -R root:jenkins test1/ sudo chmod 775 test1]]></content>
      <tags>
        <tag>nodejs</tag>
        <tag>react</tag>
        <tag>npm</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue basic with webstorm]]></title>
    <url>%2Fvuejs-starter%2F</url>
    <content type="text"><![CDATA[전제 nodejs 설치 완료 npm 설치 완료 Npm module Vue-lib : sudo npm install -g @vue/cli Nvm installvue를 써야하는데 nodejs 버전 때문에 문제가 된다면 아래 nvm을 사용 하는게 좋다(?). https://github.com/nvm-sh/nvm 아래는 mac을 기준으로 처리한 내용인데, 주의 할 것은 .bash_profile이 존재하는 곳에서 아래 행위를 해야한다. 시작하기전에 cd ~ 로 홈으로 오자. 만약에 .bash_profile이 없다면 touch .bash_profile로 만들어 주기만 해도 된다. stevenucBookPro:~ steven$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 13226 100 13226 0 0 37442 0 --:--:-- --:--:-- --:--:-- 37361=&gt; nvm is already installed in /Users/steven/.nvm, trying to update using git=&gt; =&gt; Compressing and cleaning up git repository=&gt; nvm source string already in /Users/steven/.bash_profile=&gt; bash_completion source string already in /Users/steven/.bash_profile=&gt; Close and reopen your terminal to start using nvm or run the following to use it now:export NVM_DIR=&quot;$HOME/.nvm&quot;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot; # This loads nvm bash_completionstevenucBookPro:~ steven$ nvm-bash: nvm: command not found nvm 사용법stevenucBookPro:~ steven$ nvm install 6.14.4Downloading and installing node v6.14.4...Downloading https://nodejs.org/dist/v6.14.4/node-v6.14.4-darwin-x64.tar.gz...######################################################################## 100.0%Computing checksum with shasum -a 256Checksums matched!Now using node v6.14.4 (npm v3.10.10)Creating default alias: default -&gt; 6.14.4 (-&gt; v6.14.4)stevenucBookPro:~ steven$ node -vv6.14.4stevenucBookPro:~ steven$ nvm install 10.10.0Downloading and installing node v10.10.0...Downloading https://nodejs.org/dist/v10.10.0/node-v10.10.0-darwin-x64.tar.gz...######################################################################## 100.0%Computing checksum with shasum -a 256Checksums matched!Now using node v10.10.0 (npm v6.4.1)stevenucBookPro:~ steven$ node -vv10.10.0stevenucBookPro:~ steven$ nvm use 6Now using node v6.14.4 (npm v3.10.10)stevenucBookPro:~ steven$ nvm which 10/Users/steven/.nvm/versions/node/v10.10.0/bin/node webstormCreate project webstorm 실행 왼쪽 vue.js 프로젝트 선택 오른쪽 프로젝트 위치, nodejs 버전, vue cli 선택 : 이중에 하나라도 안나오면 node나 vue가 잘못 인스톨 되어있는 거니까 node 다 삭제하고 처음부터 다시 하는게 편할 수 있습니다. wepack project 선택 preset default 선택 babel : ecma6script를 ecma5script로 변형 시키는 목적 eslint : code quality 프로젝트 init webstrom project open 됨 npm install npm run serve stevenui-MacBookPro:vuetutorial steven$ nvm use 10Now using node v10.10.0 (npm v6.4.1)stevenui-MacBookPro:vuetutorial steven$ node --versionv10.10.0stevenui-MacBookPro:vuetutorial steven$ npm run serve&gt; vuetutorial@0.1.0 serve /Users/steven/WebstormProjects/vuetutorial&gt; vue-cli-service serve INFO Starting development server... 98% after emitting CopyPlugin DONE Compiled successfully in 3051ms 9:18:16 PM App running at: - Local: http://localhost:8080/ - Network: http://192.168.0.114:8080/ Note that the development build is not optimized. To create a production build, run npm run build. 브라우저에서 http://localhost:8080/ 입력 시 정상적으로 뷰 화면이 표시 되면 기본 셋팅은 완료 된것임 Vue 구조vue에 대해서 잘나온 문서는 많으니까, 그냥 내부 보면서 이런저런 내용을 남기는 걸 목적으로 한다. (이글을 쓸때는 잘나온 문서를 아직 보기 전이다. 공식 문서와 다르면 이해 부탁...) vue는 typescript로 작성 되어 있다. vueVue 기본 구조export interface Vue &#123; readonly $el: Element; readonly $options: ComponentOptions&lt;Vue&gt;; readonly $parent: Vue; readonly $root: Vue; readonly $children: Vue[]; readonly $refs: &#123; [key: string]: Vue | Element | Vue[] | Element[] &#125;; readonly $slots: &#123; [key: string]: VNode[] | undefined &#125;; readonly $scopedSlots: &#123; [key: string]: NormalizedScopedSlot | undefined &#125;; readonly $isServer: boolean; readonly $data: Record&lt;string, any&gt;; readonly $props: Record&lt;string, any&gt;; readonly $ssrContext: any; readonly $vnode: VNode; readonly $attrs: Record&lt;string, string&gt;; readonly $listeners: Record&lt;string, Function | Function[]&gt;; $mount(elementOrSelector?: Element | string, hydrating?: boolean): this; $forceUpdate(): void; $destroy(): void; $set: typeof Vue.set; $delete: typeof Vue.delete; $watch( expOrFn: string, callback: (this: this, n: any, o: any) =&gt; void, options?: WatchOptions ): (() =&gt; void); $watch&lt;T&gt;( expOrFn: (this: this) =&gt; T, callback: (this: this, n: T, o: T) =&gt; void, options?: WatchOptions ): (() =&gt; void); $on(event: string | string[], callback: Function): this; $once(event: string | string[], callback: Function): this; $off(event?: string | string[], callback?: Function): this; $emit(event: string, ...args: any[]): this; $nextTick(callback: (this: this) =&gt; void): void; $nextTick(): Promise&lt;void&gt;; $createElement: CreateElement;&#125; optionspluginNode]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>webpack</tag>
        <tag>vuejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[virtual host on centos]]></title>
    <url>%2Fvirtualhost-on-centos%2F</url>
    <content type="text"><![CDATA[centos 7.0 상에서 아파치(httpd)를 설치하고 포트 맵핑 하는 내용을 정리 합니다. install아파치 설치[root@localhost conf]# yum install httpd[root@localhost conf]# httpd -vServer version: Apache/2.4.6 (CentOS)Server built: Apr 24 2019 13:45:48 방화벽 오픈[root@localhost conf]# firewall-cmd --permanent --add-service=http [root@localhost conf]# firewall-cmd --permanent --add-service=https [root@localhost conf]# firewall-cmd --reload 상시 서비스 등록[root@localhost conf]# systemctl enable httpd[root@localhost conf]# systemctl start httpd 서비스 restartsystemctl restart httpd servier 정상 확인브라우저 http://&lt;&gt; path 구조[root@localhost httpd]# ls -al합계 16drwxr-xr-x. 5 root root 92 7월 8 23:03 .drwxr-xr-x. 151 root root 12288 7월 9 09:26 ..drwxr-xr-x. 2 root root 55 7월 9 17:18 confdrwxr-xr-x. 2 root root 100 7월 9 11:16 conf.ddrwxr-xr-x. 2 root root 146 7월 9 10:21 conf.modules.dlrwxrwxrwx. 1 root root 19 7월 8 23:03 logs -&gt; ../../var/log/httpdlrwxrwxrwx. 1 root root 29 7월 8 23:03 modules -&gt; ../../usr/lib64/httpd/moduleslrwxrwxrwx. 1 root root 10 7월 8 23:03 run -&gt; /run/httpd conf : 기본 설정파일 conf.d : conf에 추가 설정 정보 (Include로 추가 설정을 이곳에서 처리한다) conf.modules.d : module에 대한 로드 정보가 이곳에 있다 logs : 아파치 로그를 확인 가능하다 https.conf 구조급하게 필요 한것만 보고 처리 해서 사실 잘 알지는 못한다 일단 이해 된것 같은것만 대략적으로 쓴다. httpd 관련 설정 정보 및 로그가 있는 루트 디렉토리 ServerRoot &quot;/etc/httpd&quot; 80포트를 상시 모니터링 하겠음 (8080 포트 모니터링 하겠음은 Listen 8080) Listen 80 conf.moules.d 이하의 설정 파일을 읽어서 모듈을 로드해라(모듈을 로드해라는 해당 .conf에 있음) Include conf.modules.d/*.conf 본 아파치 서버가 작동하는 디렉토리에 대한 접근 권한을 설정한다 &lt;Directory /&gt; AllowOverride none Require all granted&lt;/Directory&gt; 예를 들자면 로컬 서버의 디렉토리 중 /var/www 디렉토리는 httpd가 접근 가능하게 모든 권한을 준다. &lt;Directory &quot;/var/www&quot;&gt; AllowOverride None # Allow open access: Require all granted&lt;/Directory&gt; 모듈 로드를 확인한다. 만약에 dir_module이 있으면 디렉토리상 인덱스는 index.html 이다. &lt;IfModule dir_module&gt; DirectoryIndex index.html&lt;/IfModule&gt; 2개의 url에 서로 다른 index.html 나타나게 하기http.conf 수정####파일 마지막에 넣음######&lt;Directory "/data/"&gt; AllowOverride None Require all granted&lt;/Directory&gt;Include /etc/httpd/conf/vhost.conf /data/ 디렉토리 이하를 접근 하겠음 vhost.conf 컨피그를 포함 하겠음 ( 해당 파일 만들지 않고 파일내에 있는 내용을 이곳에 직접 타이핑 해도 동일 작동함 ) vhost.conf 생성 및 수정[root@localhost conf]# vi vhost.conf [root@localhost conf]# pwd/root/httpd/conf NameVirtualHost *:80&lt;VirtualHost *:80&gt; DocumentRoot "/data/test1" ServerName test.com ServerAlias www.test.com&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt; DocumentRoot "/data/test2" ServerName sub.test.com&lt;/VirtualHost&gt; NameVirtualHost *:80 : 80 포트 대상으로 이름 별 분리를 처리할 것임 &lt;VirtualHost *:80&gt; : 80으로 들어오는 내용을 본다 ServerName test.com : 요청들어온 url이 test.com이거나 www.test.com 이면, DocumentRoot &quot;/data/test1&quot; : 의 index.html을 보여라 상위는 test.com이라는 DNS를 사용자가 취득 했고 DNS를 통해서 해당 서버에 접근 가능하다는 것이 전제 사항이다. 해당 관련 내용은 DNS Server관련 영역임으로 다루지 않으려고 한다. 해당 내용과 상관없이 hosts를 수정해서 테스트를 많이 하던데… 저는 pass [root@localhost conf]# cd /[root@localhost /]# mkdir data[root@localhost data]# mkdir test1 test2[root@localhost data]# lstest1 test2 test1과 test2디렉토리로 들어가서 다음과 같은 index.html을 만들어 준다. [root@localhost test1]#vi index.html test1[root@localhost test2]#vi index.html test2 permission denied[core:error] [pid 24938] (13)Permission denied: [client 222.222.222.222:53283] AH00035: access to /index.html denied (filesystem path '/data/test1/index.html') because search permissions are missing on a component of the path 상위와 같은 오류가 난다면 다음과 같은 명령어를 사용해서 data디렉토리 이하에 아파치에서 접근이 가능하도록 해줘야 한다. SELinus의 접근 권한 처리 때문에 생기는 문제이다. chcon -R -t httpd_sys_content_t data/ [root@localhost /]# ls -alZ | grep datadrwxr-xr-x. root root unconfined_u:object_r:httpd_sys_content_t:s0 data 상위와 같이 권한이 처리 되면 된다. subdomain을 활용한 타 web서비스 실행sub.test.com으로 들어오면 내부적으로 test.com:8888번 서비스로 자동 포워딩 되는 내용이다. NameVirtualHost *:80&lt;VirtualHost *:80&gt; DocumentRoot "/data/test1" ServerName test.com ServerAlias www.test.com&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt; ProxyPreserveHost On ServerName sub.test.com proxyPass / http://test.com:8888/ proxyPassReverse / http://test.com:8888/&lt;/VirtualHost&gt; 일반적으로 상위처럼 수정후 sub.test.com을 실행하면 8888포트의 서비스가 브라우저에 표시 되게 된다. 그러나 SELinus로 인해 다음과 같은 오류가 날 수 있다. [proxy:error] [pid 17800] (13)Permission denied: AH00957: HTTP: attempt to connect to 222.222.222.222:8888 (test.com) failed 아파치는 http_port_t에 등록된 포트만 프록시 패스가 가능하다. 해서 해당 포트를 등록 해줘야 한다 [root@localhost logs]# semanage port -l | grep http_port_thttp_port_t tcp 80, 81, 443, 488, 8008, 8009, 8443, 9000 semanage port -a -p tcp -t http_port_t 8888 명령어를 실행 후 다시 확인 해보자. [root@localhost logs]# semanage port -l | grep http_port_thttp_port_t tcp 8888, 80, 81, 443, 488, 8008, 8009, 8443, 9000 상위와 같이 나오면 된다. 오류를 잡다보면 퍼미션 관련 로그가 나오는 경우가 많은데, 아파치 오류만으로는 분석 하기 어려운 경우가 많다 이 경우는 다음 파일을 확인 하면 된다. /var/log/audit 만약에 8888 포트가 다른 서비스에 이미 맵핑 되어 있다면 다음과 같이 명령어를 사용하면 된다. semanage port -m -p tcp -t http_port_t 8888]]></content>
      <tags>
        <tag>centos</tag>
        <tag>virtual host</tag>
        <tag>apache</tag>
        <tag>httpd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker]]></title>
    <url>%2Fdocker%2F</url>
    <content type="text"><![CDATA[docker container 설정 수정하기docker run 이후 policy의 수정을 위해서는 다음 2가지 방법이 있음 docker update docker update --restart=always &lt;container&gt; /var/lib/docker/containers/CONTAINER_ID/hostconfig.json 파일 edit &#123;"Binds":["/nexus-data:/nexus-data"],"ContainerIDFile":"","LogConfig":&#123;"Type":"journald","Config":&#123;&#125;&#125;,"NetworkMode":"default","PortBindings":&#123;"8081/tcp":[&#123;"HostIp":"","HostPort":"8081"&#125;]&#125;,"RestartPolicy":&#123;"Name":"always","MaximumRetryCount":0&#125;,"AutoRemove":false,"VolumeDriver":"","VolumesFrom":null,"CapAdd":null,"CapDrop":null,"Dns":[],"DnsOptions":[],"DnsSearch":[],"ExtraHosts":null,"GroupAdd":null,"IpcMode":"","Cgroup":"","Links":[],"OomScoreAdj":0,"PidMode":"","Privileged":true,"PublishAllPorts":false,"ReadonlyRootfs":false,"SecurityOpt":["label=disable"],"UTSMode":"","UsernsMode":"","ShmSize":67108864,"Runtime":"docker-runc","ConsoleSize":[0,0],"Isolation":"","CpuShares":0,"Memory":0,"NanoCpus":0,"CgroupParent":"","BlkioWeight":0,"BlkioWeightDevice":null,"BlkioDeviceReadBps":null,"BlkioDeviceWriteBps":null,"BlkioDeviceReadIOps":null,"BlkioDeviceWriteIOps":null,"CpuPeriod":0,"CpuQuota":0,"CpuRealtimePeriod":0,"CpuRealtimeRuntime":0,"CpusetCpus":"","CpusetMems":"","Devices":[],"DiskQuota":0,"KernelMemory":0,"MemoryReservation":0,"MemorySwap":0,"MemorySwappiness":-1,"OomKillDisable":false,"PidsLimit":0,"Ulimits":null,"CpuCount":0,"CpuPercent":0,"IOMaximumIOps":0,"IOMaximumBandwidth":0&#125; docker log 보기 docker logs -f &lt;&gt; : 실행중인 로그 확인 할 경우 docker events&amp; : event 발생 로그 확인 (터미널을 2개 여는게 좋음) docker start -a &lt;&gt; : 실행시 일어나는 오류 확인 가능 docker inspectcontainer의 상세 정보를 확인하는 명령어 이다. docker inspect &lt;&lt;containerid&gt;&gt; 해당 명령어를 실행 하면 아래와 같이 모든 container low level 정보를 return 한다. [devops@localhost ~]$ docker inspect nexus[ &#123; "Id": "67826ba9e0179b6009c9c7a177fe1815fd320cdac65ea91d479413f7c4e5e81a", "Created": "2019-06-26T03:19:12.069213873Z", "Path": "sh", "Args": [ "-c", "$&#123;SONATYPE_DIR&#125;/start-nexus-repository-manager.sh" ], "State": &#123; "Status": "running", "Running": true, "Paused": false, "Restarting": false, "OOMKilled": false, "Dead": false, "Pid": 19383, "ExitCode": 0, "Error": "", "StartedAt": "2019-07-02T07:49:00.930407162Z", "FinishedAt": "2019-07-02T07:48:08.216626691Z" &#125;, "Image": "sha256:36b0df681a47e5948f2088a446652766132141175dece2d6d47ef6e749385c05", "ResolvConfPath": "/var/lib/docker/containers/67826ba9e0179b6009c9c7a177fe1815fd320cdac65ea91d479413f7c4e5e81a/resolv.conf", "HostnamePath": "/var/lib/docker/containers/67826ba9e0179b6009c9c7a177fe1815fd320cdac65ea91d479413f7c4e5e81a/hostname", "HostsPath": "/var/lib/docker/containers/67826ba9e0179b6009c9c7a177fe1815fd320cdac65ea91d479413f7c4e5e81a/hosts", "LogPath": "", "Name": "/nexus", "RestartCount": 0, "Driver": "overlay2", "MountLabel": "", "ProcessLabel": "", "AppArmorProfile": "", "ExecIDs": null, "HostConfig": &#123; "Binds": [ "/nexus-data:/nexus-data" ], "ContainerIDFile": "", "LogConfig": &#123; "Type": "journald", "Config": &#123;&#125; &#125;, "NetworkMode": "default", "PortBindings": &#123; "8081/tcp": [ &#123; "HostIp": "", "HostPort": "8081" &#125; ] &#125;, "RestartPolicy": &#123; "Name": "always", "MaximumRetryCount": 0 &#125;, "AutoRemove": false, "VolumeDriver": "", "VolumesFrom": null, "CapAdd": null, "CapDrop": null, "Dns": [], "DnsOptions": [], "DnsSearch": [], "ExtraHosts": null, "GroupAdd": null, "IpcMode": "", "Cgroup": "", "Links": null, "OomScoreAdj": 0, "PidMode": "", "Privileged": true, "PublishAllPorts": false, "ReadonlyRootfs": false, "SecurityOpt": [ "label=disable" ], "UTSMode": "", "UsernsMode": "", "ShmSize": 67108864, "Runtime": "docker-runc", "ConsoleSize": [ 0, 0 ], "Isolation": "", "CpuShares": 0, "Memory": 0, "NanoCpus": 0, "CgroupParent": "", "BlkioWeight": 0, "BlkioWeightDevice": null, "BlkioDeviceReadBps": null, "BlkioDeviceWriteBps": null, "BlkioDeviceReadIOps": null, "BlkioDeviceWriteIOps": null, "CpuPeriod": 0, "CpuQuota": 0, "CpuRealtimePeriod": 0, "CpuRealtimeRuntime": 0, "CpusetCpus": "", "CpusetMems": "", "Devices": [], "DiskQuota": 0, "KernelMemory": 0, "MemoryReservation": 0, "MemorySwap": 0, "MemorySwappiness": -1, "OomKillDisable": false, "PidsLimit": 0, "Ulimits": null, "CpuCount": 0, "CpuPercent": 0, "IOMaximumIOps": 0, "IOMaximumBandwidth": 0 &#125;, "GraphDriver": &#123; "Name": "overlay2", "Data": &#123; "LowerDir": "/var/lib/docker/overlay2/bdeae8fe832211ba5059562162cb4eb7098de60657f622a31f0115653c324301-init/diff:/var/lib/docker/overlay2/e3c7b24292cf5ea41f2d3ab9c3b91a3c3b22f09a1cb26cf6048b36802c30b036/diff:/var/lib/docker/overlay2/3f075ffc65dfb1a311d63c70842d0ba2c467ca9bf1289c5a2a45a21e77a8314c/diff:/var/lib/docker/overlay2/32e8540578f9058f575a9051bc28df2f0308da53a20469a3a91c1a6b60f9cb0e/diff", "MergedDir": "/var/lib/docker/overlay2/bdeae8fe832211ba5059562162cb4eb7098de60657f622a31f0115653c324301/merged", "UpperDir": "/var/lib/docker/overlay2/bdeae8fe832211ba5059562162cb4eb7098de60657f622a31f0115653c324301/diff", "WorkDir": "/var/lib/docker/overlay2/bdeae8fe832211ba5059562162cb4eb7098de60657f622a31f0115653c324301/work" &#125; &#125;, "Mounts": [ &#123; "Type": "bind", "Source": "/nexus-data", "Destination": "/nexus-data", "Mode": "", "RW": true, "Propagation": "rprivate" &#125; ], "Config": &#123; "Hostname": "67826ba9e017", "Domainname": "", "User": "nexus", "AttachStdin": false, "AttachStdout": false, "AttachStderr": false, "ExposedPorts": &#123; "8081/tcp": &#123;&#125; &#125;, "Tty": false, "OpenStdin": false, "StdinOnce": false, "Env": [ "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "SONATYPE_DIR=/opt/sonatype", "NEXUS_HOME=/opt/sonatype/nexus", "NEXUS_DATA=/nexus-data", "NEXUS_CONTEXT=", "SONATYPE_WORK=/opt/sonatype/sonatype-work", "DOCKER_TYPE=docker", "INSTALL4J_ADD_VM_PARAMS=-Xms1200m -Xmx1200m -XX:MaxDirectMemorySize=2g -Djava.util.prefs.userRoot=/nexus-data/javaprefs" ], "Cmd": [ "sh", "-c", "$&#123;SONATYPE_DIR&#125;/start-nexus-repository-manager.sh" ], "ArgsEscaped": true, "Image": "sonatype/nexus3", "Volumes": &#123; "/nexus-data": &#123;&#125; &#125;, "WorkingDir": "", "Entrypoint": null, "OnBuild": null, "Labels": &#123; "com.sonatype.license": "Apache License, Version 2.0", "com.sonatype.name": "Nexus Repository Manager base image", "org.label-schema.build-date": "20190305", "org.label-schema.license": "GPLv2", "org.label-schema.name": "CentOS Base Image", "org.label-schema.schema-version": "1.0", "org.label-schema.vendor": "CentOS", "vendor": "Sonatype" &#125; &#125;, "NetworkSettings": &#123; "Bridge": "", "SandboxID": "50b3a078a453332680ca6dd09d2cd10fc641fddc49c5b3b34db178c516f8475d", "HairpinMode": false, "LinkLocalIPv6Address": "", "LinkLocalIPv6PrefixLen": 0, "Ports": &#123; "8081/tcp": [ &#123; "HostIp": "0.0.0.0", "HostPort": "8081" &#125; ] &#125;, "SandboxKey": "/var/run/docker/netns/50b3a078a453", "SecondaryIPAddresses": null, "SecondaryIPv6Addresses": null, "EndpointID": "b030c131340f1b86c3ce868dae109fee9814310503076f685ff274b42e76eeac", "Gateway": "172.17.0.1", "GlobalIPv6Address": "", "GlobalIPv6PrefixLen": 0, "IPAddress": "172.17.0.2", "IPPrefixLen": 16, "IPv6Gateway": "", "MacAddress": "02:42:ac:11:00:02", "Networks": &#123; "bridge": &#123; "IPAMConfig": null, "Links": null, "Aliases": null, "NetworkID": "e7bccaaf25cb4ba061b98aab2ef6470301c688b7d99db0f40e7e7bd7b6665379", "EndpointID": "b030c131340f1b86c3ce868dae109fee9814310503076f685ff274b42e76eeac", "Gateway": "172.17.0.1", "IPAddress": "172.17.0.2", "IPPrefixLen": 16, "IPv6Gateway": "", "GlobalIPv6Address": "", "GlobalIPv6PrefixLen": 0, "MacAddress": "02:42:ac:11:00:02" &#125; &#125; &#125; &#125;] 여기서 특정 영역에 대한 정보만을 얻고 싶다면 다음과 같이 format 설정을 해주면 된다. docker inspect --format 또는 docker inspect -f 를 사용하면 된다. 사용 법은 다음과 같다. [devops@localhost ~]$ docker inspect --format='&#123;&#123;.NetworkSettings.Networks&#125;&#125;' nexusmap[bridge:0xc420130300] inspect 해서 나온 모든 정보 중에서 필요로 하는 정보의 Name을 .Name.Name 식으로 표현 하면 특정 값을 얻어 낼 수가 있다. 가령 IPAddress를 얻어 오고자 하면 다음과 같이 하면 된다. [devops@localhost ~]$ docker inspect --format='&#123;&#123;.NetworkSettings.Networks.bridge.IPAddress&#125;&#125;' nexus172.17.0.2 만약 해당 결과 값을 json 형태의 템플릿으로 받고자 하면 다음과 같이 하면 된다. [devops@localhost ~]$ docker inspect --format='&#123;&#123;json .NetworkSettings.Networks.bridge.IPAddress&#125;&#125;' nexus "172.17.0.2" &quot;&quot; 앞뒤로 이와 같은게 붙은거 빼고는 차이가 없어 보이지만, [devops@localhost ~]$ docker inspect --format='&#123;&#123;json .NetworkSettings.Networks&#125;&#125;' nexus&#123;"bridge":&#123;"IPAMConfig":null,"Links":null,"Aliases":null,"NetworkID":"e7bccaaf25cb4ba061b98aab2ef6470301c688b7d99db0f40e7e7bd7b6665379","EndpointID":"b030c131340f1b86c3ce868dae109fee9814310503076f685ff274b42e76eeac","Gateway":"172.17.0.1","IPAddress":"172.17.0.2","IPPrefixLen":16,"IPv6Gateway":"","GlobalIPv6Address":"","GlobalIPv6PrefixLen":0,"MacAddress":"02:42:ac:11:00:02"&#125;&#125; Networks만을 출력하면 다른걸 확인 할 수있다. 앞서 json없이 출력은 메모리 번지를 출력 했다면, json과 함께 출력 하면 이하 모든 값이 string으로 출력 되는걸 확인 할 수 있다. 이외에 index, range,$variableParm 정의, :=Assignment 등이 추가로 잇는듯 한데 어떻게 사용하는지는 잘 모르겠다. docker shell 로 바로 진입하기docker run -it --rm &lt;&lt;이미지id&gt;&gt; /bin/sh or docker run -it --rm &lt;&lt;이미지id&gt;&gt; /bin/bash]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mattermost install with docker-composer on Centos7]]></title>
    <url>%2Fmattermost-docker-composer-onCentos7%2F</url>
    <content type="text"><![CDATA[Docker와 Docker-Compose가 Centos에 이미 설치 되어있다는 전제임 Location관련 자료 docker-compose github 위치 https://github.com/mattermost/mattermost-docker docker-compose를 이용한 deployment 설명 https://docs.mattermost.com/install/prod-docker.html 로컬 Download 및 환경 설정git clone https://github.com/mattermost/mattermost-docker.gitcd mattermost-dockerdocker-compose buildmkdir -pv ./volumes/app/mattermost/&#123;data,logs,config,plugins,client-plugins&#125;chown -R 2000:2000 ./volumes/app/mattermost/docker-compose up -d 상위와 같은 순서데로 하면 대부분 잘 작동 하는 것으로 보임 그러나 나 같은 경우는 상위 처럼 해서 정상 작동을 하지 않아 다음과 같이 수정하였음 Permission Error를 피하기 위한 수정 사항[root@localhost mattermost-docker]# lsLICENSE MAINTENANCE.md README.md app contrib db docker-compose.yml volumes web [root@localhost app]# ll합계 0drwxr-xr-x. 7 2000 2000 81 6월 28 19:43 mattermost[root@localhost app]# pwd/root/mattermost/mattermost-docker/volumes/app[root@localhost app]# 상위와 같은 내용은 로컬 Download 및 환경 설정이 되었다면 동일 할 것이다. 그러나 Postgres와 app이 directory prmission denied 나게 된다면 다음과 같이 수정 해줄 필요가 있다. [root@localhost mattermost-docker]# lsLICENSE MAINTENANCE.md README.md app contrib db docker-compose.yml volumes web[root@localhost mattermost-docker]# vi docker-compose.yml[root@localhost mattermost-docker]# pwd/root/mattermost/mattermost-docker[root@localhost mattermost-docker]# 여기에서 docker-compose.yml을 아래와 같이 수정 필요하다. version: "2"services: db: build: db read_only: true restart: unless-stopped volumes:- - ./volumes/db/var/lib/postgresql/data:/var/lib/postgresql/data+ - ./volumes/db/var/lib/postgresql/data:/var/lib/postgresql/data:z - /etc/localtime:/etc/localtime:ro environment: - POSTGRES_USER=mmuser - POSTGRES_PASSWORD=mmuser_password - POSTGRES_DB=mattermost # uncomment the following to enable backup # - AWS_ACCESS_KEY_ID=XXXX # - AWS_SECRET_ACCESS_KEY=XXXX # - WALE_S3_PREFIX=s3://BUCKET_NAME/PATH # - AWS_REGION=us-east-1 app: build: context: app # uncomment following lines for team edition or change UID/GID args:- # - edition=team- # - PUID=2000- # - PGID=2000+ - edition=team+ - PUID=2000+ - PGID=2000 restart: unless-stopped volumes:- - ./volumes/app/mattermost/config:/mattermost/config:rw- - ./volumes/app/mattermost/data:/mattermost/data:rw- - ./volumes/app/mattermost/logs:/mattermost/logs:rw- - ./volumes/app/mattermost/plugins:/mattermost/plugins:rw- - ./volumes/app/mattermost/client-plugins:/mattermost/client/plugins:rw+ - ./volumes/app/mattermost/config:/mattermost/config:z+ - ./volumes/app/mattermost/data:/mattermost/data:z+ - ./volumes/app/mattermost/logs:/mattermost/logs:z+ - ./volumes/app/mattermost/plugins:/mattermost/plugins:z+ - ./volumes/app/mattermost/client-plugins:/mattermost/client/plugins:z - /etc/localtime:/etc/localtime:ro environment: # set same as db credentials and dbname - MM_USERNAME=mmuser - MM_PASSWORD=mmuser_password - MM_DBNAME=mattermost # in case your config is not in default location #- MM_CONFIG=/mattermost/config/config.json web: build: web ports: - "80:80" - "443:443" read_only: true restart: unless-stopped volumes: # This directory must have cert files if you want to enable SSL - ./volumes/web/cert:/cert:ro - /etc/localtime:/etc/localtime:ro 수정을 하는 사유솔직히 정확히는 모르겠다. 그냥 짐작을 하자면 다음과 같다. SELinux 동작 모드centos 공식 사이트에서 다운로드 받은 DVD iso 파일을 default로 install 하면 SELinux가 작동 하게 된다. SELinux는 Security Enhanced Linux의 의미로 Linux의 보안을 강화 하기 위한 모드이다. zero day 공격 및 buffer overflow 등 어플리케이션 취약점 방어를 위한 kernel 이라고 한다. sestatus 명령어를 사용해서 SELinux 모드가 작동 중인지 확인 할 수있다. [root@localhost mattermost-docker]# sestatusSELinux status: enabledSELinuxfs mount: /sys/fs/selinuxSELinux root directory: /etc/selinuxLoaded policy name: targetedCurrent mode: enforcingMode from config file: enforcingPolicy MLS status: enabledPolicy deny_unknown status: allowedMax kernel policy version: 31 Docker와 selinuxhttps://docs.docker.com/v17.09/engine/admin/volumes/bind-mounts/#configure-the-selinux-label Docker에서는 share를 위한 파일 label을 제공 하는데 그것은 SELinux에서 관리 하는 영역이다. [root@localhost mattermost-docker]# ls -Z-rw-r--r--. root root unconfined_u:object_r:admin_home_t:s0 LICENSE-rw-r--r--. root root unconfined_u:object_r:admin_home_t:s0 MAINTENANCE.md-rw-r--r--. root root unconfined_u:object_r:admin_home_t:s0 README.mddrwxr-xr-x. root root unconfined_u:object_r:admin_home_t:s0 appdrwxr-xr-x. root root unconfined_u:object_r:admin_home_t:s0 contribdrwxr-xr-x. root root unconfined_u:object_r:admin_home_t:s0 db-rw-r--r--. root root unconfined_u:object_r:admin_home_t:s0 docker-compose.ymldrwxr-xr-x. root root unconfined_u:object_r:admin_home_t:s0 volumesdrwxr-xr-x. root root unconfined_u:object_r:admin_home_t:s0 web unconfined_u : user object_r : role admin_home_t : type s0 : level 상위와 같이 파일별 라벨링을 통해서 DAC 컨트롤을 처리 한다. https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/selinux_users_and_administrators_guide/sect-security-enhanced_linux-working_with_selinux-selinux_contexts_labeling_files 라지만 역시 아직도 이해는 안간다... 아무튼 상위와 같은 사유로 z 옵션을 통해서 컨테이너가 mount한 파일 시스템의 영역을 share 할 수있는지 여부를 설정해준다. z : 여러 컨테이너가 마운트한 contents를 share 할 수있다. Z : share 하지 않고 컨텐츠를 마운트한다. 여기서 Z의 의미가 하나의 컨테이너로 마은트 하면 된다는 의미인지는 잘 모르겠다. 일단 mattermost는 z로 처리 하면 정상 작동한다.]]></content>
      <tags>
        <tag>docker</tag>
        <tag>mattermost</tag>
        <tag>slack</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins Basic]]></title>
    <url>%2Fjenkins-basic%2F</url>
    <content type="text"><![CDATA[Jenkins User hand book 및 기타 사이트 참고해서 간단하게 필요한 내용만 서머리함 (https://jenkins.io/user-handbook.pdf) Pipeline개발, 통합 운영 배포 등이 가능한 플러그인 들을 하나의 Suit로 만드는 것을 파이프 라인이라고 한다. 자동 화된 파이프라인 설정 기능이 있으나, 보다 복잡한 사용이 필요 할 경우 두가지 DSL(Domain Specific Language)를 제공한다. Declarative Script : Groovy groovy syntax는 다음에서 확인 가능하다. http://groovy-lang.org/syntax.html Pipeline FlowDevelopment -&gt; Stage1 -&gt; Stage2 -&gt; Production 의 flow를 말함 DSL definejenkins에서 활용 가능한 global variable은 다음에서 확인 가능하다 http://jenkins.mina.blue/pipeline-syntax/globals docker, pipeline, env, params,currentBuild, scm 을 볼 수 있다. agent : 파이프라인의 workspace, executor 할당요청을 Jenkins에게 한다 stage : stage &quot;Build&quot; &quot;Test&quot; &quot;Deploy&quot; 등과 같이 step group steps : stage 안에서 일어날 task Jenkins에서는 http://jenkinsurl/pipeline-syntax/ 를 통해서 step define 가능함 sh : shell command starter junit : plugin:junit 에서 제공하는 기능 (리포트 등을 통합) node : 파이프라인에서 일어나는 행위(steps)는 대상이 되는 node에서 일어남 (여러 노드를 설정할 수있음) stage('Test') &#123; node('linux') &#123; checkout scm try &#123; unstash 'app' sh 'make check' &#125; finally &#123; junit '**/target/*.xml' &#125; &#125; node('windows') &#123; checkout scm try &#123; unstash 'app' bat 'make check' &#125; finally &#123; junit '**/target/*.xml' &#125; &#125;&#125; echo : string 값 출력 (echo &quot;hello&quot;) env : script 파이프 라인에서 접근 가능한 환경 값 (env.PATH, env,BUILD_ID) params : 파이프라인 내에서 정의된 parameters (MAP) (params.MY_PARAM_NAME) currentBuild : 현재 파이프라인의 정보를 확인 가능 (currentBuild.result, currentBuild.displayName) http://jenkinsurl/pipeline-syntax/globals#currentBuild checkout : source control (사이트?)에서 부터 코드를 다운로드 받는다. 주로 scm을 사용한다. (checkout scm) archiveArtifacts : 앞서 빌드된 파일들을 저장해 놓는 역할을 한다. (archiveArtifacts artifacts: &#39;*/arget/tar&#39;, fingerprint: true) withEnv : global 또는 특정 영역에 variable을 define하는 행동을 한다. 아래 처럼 사용 가능하다. properties : 해당 파이프라인에서 사용 사능한 일시적 properties를 설정한다. 해당 내용은 jenkins 파이프 라인 &quot;설정&quot; 화면에서 &quot;General&quot; 탭의 &quot;이 빌드는 매개 변수가 있습니다. (Build with Parameters)&quot;를 사용하면 되는데, 해당 설정을 하고 나면 파이프라인 실행 이름이 기존 &quot;Build&quot;에서 &quot;Build with Parameters&quot;로 변경되고 해당 value 값을 사용자가 빌드 요청시마다 수정 할 수 있게 된다. properties([parameters([string(defaultValue: 'Hello', description: 'How should I greetthe world?', name: 'Greeting3'),string(defaultValue: 'Hello2', description: 'How should I greetthe world22?', name: 'Greeting2')])])node &#123; def singlyQuoted = 'Hello' withEnv(["global='value"])&#123; stage('Build')&#123; withEnv(["test='one"])&#123; echo "Heloo $&#123;global&#125;, $&#123;test&#125;, $&#123;singlyQuoted&#125;, $&#123;env.BUILD_ID&#125; on $&#123;env.JENKINS_URL&#125;" &#125; withEnv(["test='one","test2='two"])&#123; echo "Heloo $&#123;global&#125;, $&#123;test&#125;, $&#123;test2&#125;, $&#123;singlyQuoted&#125;, $&#123;env.BUILD_ID&#125; on $&#123;env.JENKINS_URL&#125;" &#125; &#125; &#125; stage('Props')&#123; echo "$&#123;params.Greeting2&#125; World" &#125;&#125; parallel : 일반적인 pipeline은 순차적인 순서로 진행이 된다. 그러나 동시 처리를 원한다면 다음과 같이 parallel 명령을 사용 할 수 있다. stage('Test') &#123; parallel linux: &#123; node('linux') &#123; checkout scm try &#123; unstash 'app' sh 'make check' &#125; finally &#123; junit '**/target/*.xml' &#125; &#125; &#125;, windows: &#123; node('windows') &#123; /* .. snip .. */ &#125; &#125;&#125; 기타 참고 plugin definition : https://jenkins.io/doc/pipeline/steps/ pipeline examples : https://jenkins.io/doc/pipeline/examples/ Test or ReportTEST는 빌드가 완료 된 이후 junit등과 같이 테스트 후 리포트를 내놓는 부분을 말한다 테스트 된 결과를 Visualization 하게 보여 주거나 test에 대한 reportingm redording 하는 많은 플러그인을 제공 하고 있다. https://plugins.jenkins.io/?labels=report sh &#39;make check || true&#39;0 exit code가 항상 나오게 하는 코드로써, 특별한 행위를 하지는 않는다. 전체 적으로 환경에 대한 clear를 하는 역할로 보인다.(linux kernel 개발할때 중간 중간 넣어 주는 용도로 넣는 다는 이야기가 있다.) junit &#39;*/target/.xml&#39;target 이하 떨어진 xml 파일들을 캡쳐 하는 역할이다. Deploy// Script //node &#123; /* .. snip .. */ stage('Deploy') &#123; if (currentBuild.result == null || currentBuild.result == 'SUCCESS') &#123; ① sh 'make publish' &#125; &#125; /* .. snip .. */&#125; currentBuild.result가 null 이란 의미는 앞서 아무런 이상 결과 값이 없다는 뜻이다. Multibranch Pipelinescm(여기서는 git)에서 여러개의 파이프라인을 처리하는 방법이다. New Item &gt; Multibranch Pipeline &gt; Branch Source &gt; Project Repository &gt; Url 입력 해당 git url 에서 Jenkins 파일이 있는 branch 대상으로 자동으로 파이프라인이 생성된다. Scan Multibranch Pipeline TriggersPeriodically if not otherwise run : 일정 기간별로 scan 처리 한다. global variable 이 추가 된다. BRANCH_NAME : 특정 branch name 등 CHANGE_ID : full request number 등 수정 id Dockerjenkins 파이프라인 2.5 이상은 docker를 사용 가능하다. 상위에서 소개한 ebook은 최신화 되어 있지 않다. 다음 url을 참고 하는게 좋을거 같다. https://jenkins.io/doc/book/pipeline/docker/ Docker testnode &#123; /* Requires the Docker Pipeline plugin to be installed */ docker.image('node:7-alpine').inside &#123; stage('Test') &#123; sh 'node --version' &#125; &#125;&#125; jenkins user 설정을 root로 안하는 이상 permission denied 가 날 확률이 높다. docker user group을 만들고 해당 docker group에 사용자를 add 하여 처리 하는 것이 좋다 sudo groupadd docker sudo usermod -aG docker $USER sudo usermod -aG docker jenkins sudo systemctl restart jenkins 처리 후 log out, log in을 하면 처리 완료 된다고 하지만, 나는 서버 재기동 시키고 나서야 적용 되었다. Started by user devopsRunning in Durability level: MAX_SURVIVABILITY[Pipeline] Start of Pipeline (hide)[Pipeline] nodeRunning on Jenkins in /var/lib/jenkins/workspace/example[Pipeline] &#123;[Pipeline] sh+ docker inspect -f . node:7-alpineError: No such object: node:7-alpine[Pipeline] sh+ docker pull node:7-alpineTrying to pull repository docker.io/library/node ... 7-alpine: Pulling from docker.io/library/node90f4dba627d6: Pulling fs layer1e674d353187: Pulling fs layerd3a64c0f885a: Pulling fs layerd3a64c0f885a: Verifying Checksumd3a64c0f885a: Download complete90f4dba627d6: Verifying Checksum90f4dba627d6: Download complete90f4dba627d6: Pull complete1e674d353187: Verifying Checksum1e674d353187: Download complete1e674d353187: Pull completed3a64c0f885a: Pull completeDigest: sha256:4954ce53247180e207772f936223b11d52a7e4ee712dfe73fe2a75e39f785067Status: Downloaded newer image for docker.io/node:7-alpine[Pipeline] withDockerContainerJenkins does not seem to be running inside a container$ docker run -t -d -u 986:979 -w /var/lib/jenkins/workspace/example -v /var/lib/jenkins/workspace/example:/var/lib/jenkins/workspace/example:rw,z -v /var/lib/jenkins/workspace/example@tmp:/var/lib/jenkins/workspace/example@tmp:rw,z -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** node:7-alpine cat$ docker top 7b70bc2548dc543669df3f71b73ed71e21de2c3090a98b0c5ec5ae89560ad071 -eo pid,comm[Pipeline] &#123;[Pipeline] stage[Pipeline] &#123; (Test)[Pipeline] sh+ node --versionv7.10.1[Pipeline] &#125;[Pipeline] // stage[Pipeline] &#125;$ docker stop --time=1 7b70bc2548dc543669df3f71b73ed71e21de2c3090a98b0c5ec5ae89560ad071$ docker rm -f 7b70bc2548dc543669df3f71b73ed71e21de2c3090a98b0c5ec5ae89560ad071[Pipeline] // withDockerContainer[Pipeline] &#125;[Pipeline] // node[Pipeline] End of PipelineFinished: SUCCESS 전체 flow는 다음과 같다. docker pull node:7-alpine : 이미지 다운 docker run -t -d -u node:7-alpine : 이미지 컨테이너 실행 docker top f9be76653c26 -eo pid,comm : docker 정보 를 바탕으로 다음 명령어 실행 :docker exec -it f9be76653c26 sh node --version : container 내부 sh를 이용해 버전 정보 얻어오기 docker stop &amp; docker rm : 실행한 컨테이너 삭제 command로 변경 하자면 다음과 같다 (stop &amp; rm은 넣지 않음) [devops@localhost ~]$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEdocker.io/node 7-alpine 4b72b56791f9 24 months ago 58.3 MB[devops@localhost ~]$ docker run -t -d 4b72b56791f9f9be76653c2641679c56071749082372c3b07f54bbd0a122d105fc4b0948635a[devops@localhost ~]$ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESf9be76653c26 4b72b56791f9 "node" 6 seconds ago Up 5 seconds nervous_shaw[devops@localhost ~]$ docker top f9be76653c26UID PID PPID C STIME TTY TIME CMDroot 33882 33862 0 17:49 pts/3 00:00:00 node[devops@localhost ~]$ docker top f9be76653c26 -eo pid,commPID COMMAND33882 node[devops@localhost ~]$ docker exec -it f9be76653c26 sh/ # node --versionv7.10.1/ # volume mount앞서 다운로드한 라이브러리등 캐쉬를 재 활용 하기 위해서 다음과 같이 volume을 mount 할 수 있다. // Script //node &#123; /* Requires the Docker Pipeline plugin to be installed */ docker.image('maven:3-alpine').inside('-v $HOME/.m2:/root/.m2') &#123; stage('Build') &#123; sh 'mvn -B' &#125; &#125;&#125; 다중 container 처리node &#123; /* Requires the Docker Pipeline plugin to be installed */ stage('Back-end') &#123; docker.image('maven:3-alpine').inside &#123; sh 'mvn --version' &#125; &#125; stage('Front-end') &#123; docker.image('node:7-alpine').inside &#123; sh 'node --version' &#125; &#125;&#125; sidecar 처리특정 서비스 환경을 테스트 하기 위하여 주변 환경을 우선 만들고, 해당 서비스를 테스트 하기 위한 행위를 sidecar 패턴이라고 한다. docker에서는 다음과 같이 side car를 docker에 반영 할 수 있다. mysql run node &#123; /* * In order to communicate with the MySQL server, this Pipeline explicitly * maps the port (`3306`) to a known port on the host machine. */ docker.image('mysql:5').withRun('-e "MYSQL_ROOT_PASSWORD=my-secret-pw" -p 3306:3306') &#123; c -&gt; docker.image('mysql:5').inside("--link $&#123;c.id&#125;:db") &#123; /* Wait until mysql service is up */ sh 'while ! mysqladmin ping -hdb --silent; do sleep 1; done' sh 'ehco $USER' &#125; &#125;&#125; 결과 Started by user devopsRunning in Durability level: MAX_SURVIVABILITY[Pipeline] Start of Pipeline[Pipeline] nodeRunning on Jenkins in /var/lib/jenkins/workspace/example[Pipeline] &#123;[Pipeline] sh+ docker run -d -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 3306:3306 mysql:5[Pipeline] dockerFingerprintRun[Pipeline] sh+ docker inspect -f . mysql:5.[Pipeline] withDockerContainerJenkins does not seem to be running inside a container$ docker run -t -d -u 986:979 --link 541d07bced678662242c3242be0fa406a0c10def3774af6e6b86221a2c6d982f:db -w /var/lib/jenkins/workspace/example -v /var/lib/jenkins/workspace/example:/var/lib/jenkins/workspace/example:rw,z -v /var/lib/jenkins/workspace/example@tmp:/var/lib/jenkins/workspace/example@tmp:rw,z -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** -e ******** mysql:5 cat$ docker top cfbe21f96c9a7f16de807e976824c11d9ecd3ace17dd99798936d111ae507739 -eo pid,comm[Pipeline] &#123;[Pipeline] sh+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent+ sleep 1+ mysqladmin ping -hdb --silent[Pipeline] sh+ echo[Pipeline] &#125;$ docker stop --time=1 cfbe21f96c9a7f16de807e976824c11d9ecd3ace17dd99798936d111ae507739$ docker rm -f cfbe21f96c9a7f16de807e976824c11d9ecd3ace17dd99798936d111ae507739[Pipeline] // withDockerContainer[Pipeline] sh+ docker stop 541d07bced678662242c3242be0fa406a0c10def3774af6e6b86221a2c6d982f541d07bced678662242c3242be0fa406a0c10def3774af6e6b86221a2c6d982f+ docker rm -f 541d07bced678662242c3242be0fa406a0c10def3774af6e6b86221a2c6d982f541d07bced678662242c3242be0fa406a0c10def3774af6e6b86221a2c6d982f[Pipeline] &#125;[Pipeline] // node[Pipeline] End of Pipeline 상위 프로세스가 진행 하는 동안은 아래와 같이 mysql container가 2개 동시에 실행 되는 것을 확인 할 수있다. 하나는 사용할 mysql 서버 이고, 다른 하나는 mysqladmin이 정상적으로 작동 하는지 확인 하는 용도의 컨테이터라고 생각하면 된다. [devops@localhost ~]$ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMEScfbe21f96c9a mysql:5 "docker-entrypoint..." 23 seconds ago Up 21 seconds 3306/tcp, 33060/tcp hopeful_goldwasser541d07bced67 mysql:5 "docker-entrypoint..." 29 seconds ago 만약에 jenkins가 동작하고 있는 서버에 mysqladmin이 사용 가능하다면 상위처럼 mysqladmin 테스트용 도커를 따로 만들 필요는 없다. 상위 script를 보다보면 설명이 없는 부분이 있는데, c -&gt; 이 부분에 대한 설명이 없다. groovy의 closure를 사용한 부분으로 http://groovy-lang.org/closures.html 이 url 내용을 확인 하면 된다. 결론적으로는 https://github.com/jenkinsci/docker-workflow-plugin/blob/master/src/main/resources/org/jenkinsci/plugins/docker/workflow/Docker.groovy 이 파일의 Container 객체를 인스턴스한 객체를 뜻하는 것으로, 테스트 해본 바로는 c.id를 제외하고는 다른 정보를 얻어 올 수 없는 것으로 보인다. &gt; public &lt;V&gt; V withRun(String args = '', String command = "", Closure&lt;V&gt; body) &#123;&gt; docker.node &#123;&gt; Container c = run(args, command)&gt; try &#123;&gt; body.call(c)&gt; &#125; finally &#123;&gt; c.stop()&gt; &#125;&gt; &#125;&gt; &#125;&gt; &gt; withRun의 결과 값은 Container이다. 그외 inside의 코드는 다음과 같다. &gt; public &lt;V&gt; V inside(String args = '', Closure&lt;V&gt; body) &#123;&gt; docker.node &#123;&gt; def toRun = imageName()&gt; if (toRun != id &amp;&amp; docker.script.sh(script: "docker inspect -f . $&#123;id&#125;", returnStatus: true) == 0) &#123;&gt; // Can run it without registry prefix, because it was locally built.&gt; toRun = id&gt; &#125; else &#123;&gt; if (docker.script.sh(script: "docker inspect -f . $&#123;toRun&#125;", returnStatus: true) != 0) &#123;&gt; // Not yet present locally.&gt; // withDockerContainer requires the image to be available locally, since its start phase is not a durable task.&gt; pull()&gt; &#125;&gt; &#125;&gt; docker.script.withDockerContainer(image: toRun, args: args, toolName: docker.script.env.DOCKER_TOOL_NAME) &#123;&gt; body()&gt; &#125;&gt; &#125;&gt; &#125;&gt; &gt; 내용을 보자면 args는 &quot;--link ${c.id}:db&quot; 과 대응 되며 body 이후는 { /* Wait until mysql service is up */ sh &#39;while ! mysqladmin ping -hdb --silent; do sleep 1; done&#39; sh &#39;ehco $USER&#39; } 이 영역으로 치환 되게 된다. 즉 body, 또는 클로저라고 불리는 영역은 해당 container 내부에서 실행 되는 영역으로 생각 하면 된다. Dockerfile을 이용한 빌드github에서 dockerfile을 pull 한 이후 해당 파일을 바탕으로 image를 만들고 실행을 시켜 보는 코드이다. node &#123; git credentialsId: &apos;theyoung&apos;, url: &apos;https://github.com/theyoung/nginx.git&apos; def customImage = docker.build(&quot;nodejs&quot;) /* * In order to communicate with the MySQL server, this Pipeline explicitly * maps the port (`3306`) to a known port on the host machine. */ customImage.withRun() &#123; c -&gt; stage(&apos;containerTest&apos;)&#123; sh &quot;echo $&#123;c.id&#125;&quot; &#125; &#125;&#125; 결과는 다음과 같다. Started by user devopsRunning in Durability level: MAX_SURVIVABILITY[Pipeline] Start of Pipeline[Pipeline] nodeRunning on Jenkins in /var/lib/jenkins/workspace/example[Pipeline] &#123;[Pipeline] gitusing credential theyoung &gt; git rev-parse --is-inside-work-tree # timeout=10Fetching changes from the remote Git repository &gt; git config remote.origin.url https://github.com/theyoung/nginx.git # timeout=10Fetching upstream changes from https://github.com/theyoung/nginx.git &gt; git --version # timeout=10using GIT_ASKPASS to set credentials github &gt; git fetch --tags --progress https://github.com/theyoung/nginx.git +refs/heads/*:refs/remotes/origin/* &gt; git rev-parse refs/remotes/origin/master^&#123;commit&#125; # timeout=10 &gt; git rev-parse refs/remotes/origin/origin/master^&#123;commit&#125; # timeout=10Checking out Revision d3d0ab61b78fcf93a63fd3fe37ec07eef2b1df5d (refs/remotes/origin/master) &gt; git config core.sparsecheckout # timeout=10 &gt; git checkout -f d3d0ab61b78fcf93a63fd3fe37ec07eef2b1df5d &gt; git branch -a -v --no-abbrev # timeout=10 &gt; git branch -D master # timeout=10 &gt; git checkout -b master d3d0ab61b78fcf93a63fd3fe37ec07eef2b1df5dCommit message: "Update Dockerfile" &gt; git rev-list --no-walk 0faa7924ddcc35bc2e83ca15d454e2240824d33b # timeout=10[Pipeline] sh+ docker build -t nodejs .Sending build context to Docker daemon 192.5 kBStep 1/9 : FROM node:6.2.2Trying to pull repository docker.io/library/node ... 6.2.2: Pulling from docker.io/library/node5c90d4a2d1a8: Pulling fs layerab30c63719b1: Pulling fs layerc6072700a242: Pulling fs layerabb742d515b4: Pulling fs layer22efa86cdb65: Pulling fs layera379ffacc05f: Pulling fs layerabb742d515b4: Waiting22efa86cdb65: Waitinga379ffacc05f: Waitingc6072700a242: Verifying Checksumc6072700a242: Download completeab30c63719b1: Download complete22efa86cdb65: Download completea379ffacc05f: Verifying Checksuma379ffacc05f: Download complete5c90d4a2d1a8: Verifying Checksum5c90d4a2d1a8: Download completeabb742d515b4: Verifying Checksumabb742d515b4: Download complete5c90d4a2d1a8: Pull completeab30c63719b1: Pull completec6072700a242: Pull completeabb742d515b4: Pull complete22efa86cdb65: Pull completea379ffacc05f: Pull completeDigest: sha256:67123dcbed68c55296aa04bdbe85440a27c74481e2668aafd66e2a11934bb15dStatus: Downloaded newer image for docker.io/node:6.2.2 ---&gt; 9121f2a78909Step 2/9 : MAINTAINER Jaeha Ahn &lt;eu81273@gmail.com&gt; ---&gt; Running in 0ecf8f4050a4 ---&gt; d6a693621aecRemoving intermediate container 0ecf8f4050a4Step 3/9 : RUN mkdir -p /app ---&gt; Running in dd257c30d12a[91m[0m ---&gt; b812157a06e8Removing intermediate container dd257c30d12aStep 4/9 : WORKDIR /app ---&gt; ec1c4a7a3f98Removing intermediate container 5ff496892285Step 5/9 : ADD . /app ---&gt; 727a7dd31fe8Removing intermediate container e96e6be5e5e3Step 6/9 : RUN npm install ---&gt; Running in 810192e8ef7c[91m[0m[91mnpm[0m[91m [0m[91minfo [0m[91mit worked if it ends with[0m[91m ok[0m[91mnpm[0m[91m [0m[91minfo using[0m[91m npm@3.9.5[0m[91mnpm[0m[91m info[0m[91m [0m[91musing[0m[91m node@v6.2.2[0m[91mnpm info lifecycle[0m[91m undefined~preinstall: undefined[0m[91mnpm info[0m[91m linkStuff[0m[91m !invalid#1[0m[91mnpm info lifecycle[0m[91m undefined~install: undefined[0m[91mnpm info [0m[91mlifecycle undefined~postinstall: undefined[0m[91mnpm info [0m[91mlifecycle[0m[91m undefined~prepublish: undefined[0m[91mnpm [0m[91mWARN enoent ENOENT: no such file or directory, open '/app/package.json'[0m[91mnpm WARN app No descriptionnpm WARN app No repository field.[0m[91mnpm WARN app No README data[0m[91mnpm WARN[0m[91m app No license field.[0m[91mnpm [0m[91minfo ok[0m[91m [0m ---&gt; 0b0f52f79418Removing intermediate container 810192e8ef7cStep 7/9 : ENV NODE_ENV development ---&gt; Running in f0e5d7e23c62 ---&gt; 60c03bd48ed4Removing intermediate container f0e5d7e23c62Step 8/9 : EXPOSE 3000 80 ---&gt; Running in 1cdf07531235 ---&gt; 21a51bb1f571Removing intermediate container 1cdf07531235Step 9/9 : CMD npm start ---&gt; Running in a562aa95e2fc ---&gt; a52d30b585abRemoving intermediate container a562aa95e2fcSuccessfully built a52d30b585ab[Pipeline] dockerFingerprintFrom[Pipeline] sh+ docker run -d nodejs[Pipeline] dockerFingerprintRun[Pipeline] stage[Pipeline] &#123; (containerTest)[Pipeline] sh+ echo fc6a252de706267691f3f822116fb5048df8110abfc70e587ad5e19b19dd970ffc6a252de706267691f3f822116fb5048df8110abfc70e587ad5e19b19dd970f[Pipeline] &#125;[Pipeline] // stage[Pipeline] sh+ docker stop fc6a252de706267691f3f822116fb5048df8110abfc70e587ad5e19b19dd970ffc6a252de706267691f3f822116fb5048df8110abfc70e587ad5e19b19dd970f+ docker rm -f fc6a252de706267691f3f822116fb5048df8110abfc70e587ad5e19b19dd970ffc6a252de706267691f3f822116fb5048df8110abfc70e587ad5e19b19dd970f[Pipeline] &#125;[Pipeline] // node[Pipeline] End of PipelineFinished: SUCCESS Docker server 사용 기본 서버 : /var/run/docker.sock 별도 서버 사용 하고자 할경우 (Docker Swarm 같은거) node &#123; checkout scm docker.withServer('tcp://swarm.example.com:2376', 'swarm-certs') &#123; docker.image('mysql:5').withRun('-p 3306:3306') &#123; /* do things */ &#125; &#125;&#125; Docker RegistryDocker hub를 기본으로 Registry 서버가 설정 되어있으나, 다음과 같이 변경 가능하다. node &#123; checkout scm docker.withRegistry('https://registry.example.com') &#123; docker.image('my-custom-image').inside &#123; sh 'make test' &#125; &#125;&#125; node &#123; checkout scm docker.withRegistry('https://registry.example.com', 'credentials-id') &#123; def customImage = docker.build("my-image:$&#123;env.BUILD_ID&#125;") /* Push the container to the custom Registry */ customImage.push() &#125;&#125; Docker Agent 사용하기Docker를 상위 처럼 사용 하지 않고 Agent로 사용이 가능하다. https://github.com/jenkins-docs/simple-node-js-react-npm-app 이 프로젝트의 파이프 라인을 보면 다음과 같다. pipeline &#123; agent &#123; docker &#123; image 'node:6-alpine' args '-p 3000:3000' &#125; &#125; environment &#123; CI = 'true' &#125; stages &#123; stage('Build') &#123; steps &#123; sh 'npm install' &#125; &#125; stage('Test') &#123; steps &#123; sh './jenkins/scripts/test.sh' &#125; &#125; stage('Deliver') &#123; steps &#123; sh './jenkins/scripts/deliver.sh' input message: 'Finished using the web site? (Click "Proceed" to continue)' sh './jenkins/scripts/kill.sh' &#125; &#125; &#125;&#125; Agent를 docker의 이미지로 선택 함으로써, 파이프라인 하단에 보이는 stages는 모두 docker 이미지 내에서 동작 하게 된다. ReplayJenkins &gt; 파이프라인 프로젝트 선택 &gt; Replay 선택 MainScript 수정 Run 매번 Config를 수정하기 어렵기 때문에 Replay를 사용해서 script를 Test 하는데 사용된다. Pipeline Syntax앞서서 DSL define에서 다루었던 내용과 비슷한 부분이 많다. if else node &#123; stage('Example') &#123; if (env.BRANCH_NAME == 'master') &#123; echo 'I only execute on the master branch' &#125; else &#123; echo 'I execute elsewhere' &#125; &#125;&#125; try catch node &#123; stage('Example') &#123; try &#123; sh 'exit 1' &#125; catch (exc) &#123; echo 'Something failed, I should sound the klaxons!' throw &#125; &#125;&#125; Gitlab 연동plugingenkins 관리 &gt; 플러그인관리 &gt; 설치가능 gitlab or gitlab plugin install https://wiki.jenkins.io/display/JENKINS/GitLab+Plugin 인증정보gitlab Personal Token 발행우상단 profile &gt; settings &gt; Access Token&gt; Personal Access Token 발행 gitlab token jenkins 등록Dashboard &gt; Credentials &gt; System &gt; Global Credentials &gt; Add Credentials kind : gitlab api token (안보이면 플러그인을 재설치) Token : gitlab access token 그외 : 아무거나 Dashboard &gt; jenkins 관리 &gt; 시스템 설정 &gt; gitlab tab (없으면 플러그인 확인) Connection name : 아무거나 Gitlab host url : http:// 부터 .com &lt;-여기까지 (예, http://gitlab.test.com) Credential : 상위 만든 gitlab token 선택 Test Connection 시 Success 나면 됨. Jenkins 등록Dashboard &gt; Credentials &gt; System &gt; Global Credentials &gt; Add Credentials gitlab 접근용도 (아래 두개중 사용 가능한것 하나) kind : Username with password id&amp;pw 입력 그외 : 아무거나 ssh-keygen을 사용해야 하는 부분인데 테스트를 안해봐서 일단 pass kind : SSH Username with private key jenkins 프로젝트 프리스타일 선택 General : Gitlab Connection 선택 (token이 정상적으로 등록 된경우 선택 가능) 소스코드관리 : Git 선택 &gt; Credential &gt; username 등록한 credential 선택 빌드유발 : Build when a change is pushed to GitLab. GitLab webhook URL: http://jenkins.test.com/project/projectname Secret token : Build when a change is pushed to GitLab. 이 설정에 속한 우하단 고급을 선택 하면, 숨겨있는 옵션을 선택 할 수있는데, 그 중에서 Secret token 을 생성하고 저장해 놓는다. (gitlab webhook에 사용된다.) 그외 : 아무거나 (gitlab web hook 만 작동 하는지 테스트 할 예정임으로 build 처리만 되면 된다.) Gitlab 설정gitlab &gt; webhook 처리할 프로젝트로 이동 &gt; setting &gt; intergration &gt; Url : 상위 빌드 유발 url 입력 (http://jenkins.test.com/project/projectname) Secret Token : jenkins에서 얻어온 Secret Token 을 넣어준다. Enable SSL verification : 위에서 사용을 안했음으로 uncheck add webhook : click 해당 페이지의 중간 쯤에 Webhooks (1) 라는 내용이 생기고, test 버튼을 확인 할 수있다. 이 버튼을 click 하면 jenkins가 실행 되어야 한다. jenkins와 gitlab이 동일 서버(localhost) 라고 하면서 오류가 나면, 다음과 같이 설정을 수정해 줘야한다. gitlab &gt; admin area &gt; settings &gt; Network &gt; Outbound request &gt; Allow requests to the local network from hooks and services : check]]></content>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tomcat install on centos]]></title>
    <url>%2Ftomcat-install-with-user-on-centos-for-jenkins%2F</url>
    <content type="text"><![CDATA[tomca install 처리 하는 내용이지만 별 내용이 없어서... pass [root@localhost webapp]# yum list tomcat*Loaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: centos.mirror.moack.net * extras: centos.mirror.moack.net * updates: centos.mirror.moack.netInstalled Packagestomcat.noarch 7.0.76-9.el7_6 @updatestomcat-admin-webapps.noarch 7.0.76-9.el7_6 @updatestomcat-el-2.2-api.noarch 7.0.76-9.el7_6 @updatestomcat-jsp-2.2-api.noarch 7.0.76-9.el7_6 @updatestomcat-lib.noarch 7.0.76-9.el7_6 @updatestomcat-servlet-3.0-api.noarch 7.0.76-9.el7_6 @updatestomcat-webapps.noarch 7.0.76-9.el7_6 @updatesAvailable Packagestomcat-docs-webapp.noarch 7.0.76-9.el7_6 updatestomcat-javadoc.noarch 7.0.76-9.el7_6 updatestomcat-jsvc.noarch 7.0.76-9.el7_6 updatestomcatjss.noarch 7.2.1-8.el7_6 updates[root@localhost webapp]# yum install tomcat tomcat-webapp tomcat-admin-webapps [root@localhost webapp]# systemctl enable tomcat[root@localhost webapp]# systemctl stop tomcat[root@localhost webapp]# systemctl start tomcat[root@localhost webapp]# whereis tomcattomcat: /usr/sbin/tomcat /etc/tomcat /usr/libexec/tomcat /usr/share/tomcat [root@localhost webapp]# cd /usr/share/tomcat/[root@localhost tomcat]# ll합계 0drwxr-xr-x. 2 root root 76 6월 27 22:03 binlrwxrwxrwx. 1 root tomcat 11 6월 27 22:03 conf -&gt; /etc/tomcatlrwxrwxrwx. 1 root tomcat 22 6월 27 22:03 lib -&gt; /usr/share/java/tomcatlrwxrwxrwx. 1 root tomcat 15 6월 27 22:03 logs -&gt; /var/log/tomcatlrwxrwxrwx. 1 root tomcat 22 6월 27 22:03 temp -&gt; /var/cache/tomcat/templrwxrwxrwx. 1 root tomcat 23 6월 27 22:03 webapps -&gt; /var/lib/tomcat/webappslrwxrwxrwx. 1 root tomcat 22 6월 27 22:03 work -&gt; /var/cache/tomcat/work[root@localhost tomcat]# [root@localhost webapps]# ll합계 5drwxr-xr-x. 3 tomcat tomcat 4096 6월 27 22:54 ROOTdrwxr-xr-x. 8 tomcat tomcat 127 6월 27 22:54 examplesdrwxr-xr-x. 5 root tomcat 87 6월 27 22:45 host-managerdrwxr-xr-x. 5 root tomcat 103 6월 27 22:45 managerdrwxr-xr-x. 5 tomcat tomcat 86 6월 27 22:54 sample]]></content>
      <tags>
        <tag>centos</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nexus install on Centos7 with docker]]></title>
    <url>%2FNexus-install-on-centos7-with-docker%2F</url>
    <content type="text"><![CDATA[Nexus 설치큰 어려움이 없어서 log만 남김 [devops@localhost docker]$ docker search sonatype/nexus3Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.26/images/search?limit=25&amp;term=sonatype%2Fnexus3: dial unix /var/run/docker.sock: connect: permission denied[devops@localhost docker]$ su암호:[root@localhost docker]# docker search sonatype/nexus3INDEX NAME DESCRIPTION STARS OFFICIAL AUTOMATED[root@localhost docker]# docker search nexus3INDEX NAME DESCRIPTION STARS OFFICIAL AUTOMATEDdocker.io docker.io/sonatype/nexus3 Sonatype Nexus Repository Manager 3 620docker.io docker.io/shifudao/nexus3 clone from nexus3 image but based from ope... 4 [OK]docker.io docker.io/cloudsc/nexus3-blobstore-s3 nexus3 with nexus-blobstore-s3 integrated 2docker.io docker.io/home1oss/nexus3 An auto configured nexus3 2 [OK]docker.io docker.io/madmuffin/nexus3 Sonatype Nexus3 Milestone7 docker image 2 [OK]docker.io docker.io/alvindaiyan/nexus3-azure-appservice 1docker.io docker.io/cirepo/nexus3 An auto configured nexus3 1 [OK]docker.io docker.io/flavioaiello/nexus3 Production ready lightweight Nexus3 with A... 1 [OK]docker.io docker.io/fxinnovation/nexus3 Sonatype Nexus 3 in a container 1 [OK]docker.io docker.io/azaa1/nexus3 Sonyatype Nexus Repository Manager 3 0docker.io docker.io/bigseasre/nexus3 mirror of the original nexus3 dockerfile 0docker.io docker.io/binsix/nexus3 docker images of nexus3 base on openjdk 0 [OK]docker.io docker.io/clivesaha/nexus3 nexus3 0docker.io docker.io/darthhater/nexus3 A series of example Dockerfiles and images... 0 [OK]docker.io docker.io/desiato/nexus3-ssl Sonatype Nexus 3 with SSL/TLS support. 0 [OK]docker.io docker.io/devopsmakers/nexus3 A Nexus3 container with the apt plugin 0docker.io docker.io/dwolla/nexus3-crowd Nexus3 with nexus3-crowd-plugin installed 0 [OK]docker.io docker.io/enieuw/nexus3-oss nexus3-oss 0 [OK]docker.io docker.io/freckleiot/nexus3-oss A Sonatype Nexus3 OSS image which makes it... 0 [OK]docker.io docker.io/joshdvir/nexus3 nexus3 0 [OK]docker.io docker.io/lokkju/nexus3-github-auth Sonatype Nexus 3 with Github authenticatio... 0 [OK]docker.io docker.io/mritd/nexus3 nexus3 0 [OK]docker.io docker.io/salte/nexus3 Extends the Sonatype nexus3 Docker image b... 0 [OK]docker.io docker.io/sdase/nexus3-base-image An opinionated nexus3 docker image, based ... 0 [OK]docker.io docker.io/stocksoftware/nexus3 A nexus3 docker instance 0 [OK][root@localhost docker]# docker pull docker.io/sonatype/nexus3Using default tag: latestTrying to pull repository docker.io/sonatype/nexus3 ...latest: Pulling from docker.io/sonatype/nexus38ba884070f61: Pull complete9d732789dc29: Pull completeb56d6d0d4fc5: Pull completeDigest: sha256:970b09779992bf88d041d074428c54dc153f7b9c8cafe4ff364dd26d69200f7aStatus: Downloaded newer image for docker.io/sonatype/nexus3:latest[root@localhost docker]# ls[root@localhost docker]# mkdir nexus-data[root@localhost docker]# lsnexus-data[root@localhost docker]# ll합계 0drwxr-xr-x. 2 root root 6 6월 26 11:21 nexus-data[root@localhost docker]# chown -R 200 nexus-data/[root@localhost docker]# ll합계 0drwxr-xr-x. 2 200 root 6 6월 26 11:21 nexus-data [root@localhost docker]# firewall-cmd --permanent --zone=public --add-port=8081/tcpsuccess[root@localhost docker]# firewall-cmd --reloadsuccess[root@localhost docker]# [root@localhost docker]# docker run -d -p 8081:8081 --privileged --name nexus -v /nexus-data:/nexus-data sonatype/nexus367826ba9e0179b6009c9c7a177fe1815fd320cdac65ea91d479413f7c4e5e81a[root@localhost docker]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES67826ba9e017 sonatype/nexus3 "sh -c $&#123;SONATYPE_..." 3 seconds ago Up 3 seconds 0.0.0.0:8081-&gt;8081/tcp nexus[root@localhost docker]# docker logs -f]]></content>
      <tags>
        <tag>nexus</tag>
        <tag>centos</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins with tomcat]]></title>
    <url>%2Fjenkins-with-tomcat%2F</url>
    <content type="text"><![CDATA[목적git에서 web소스를 수신 후, tomcat 하단 webapp으로 디플로이 자동화 참고tomcat installation Jenkins 설정mavenjenkins관리 &gt; global tool configuration&gt;maven &gt; name : m3 install automatically : check version : 3.6 새로운 아이템Freestyle project 소스코드관리 : git repository url https://github.com/ValaxyTech/hello-world 를 개인 GitHub repository에 fork해서 사용하는 것을 추천 함 Build Maven version : M3 Goals : clean install package 빌드 후 조치 WAR/EAR files : http://218.145.218.31:8080/webapp/]]></content>
      <tags>
        <tag>Jenkins</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins on centos7]]></title>
    <url>%2Fjenkins-on-centos7%2F</url>
    <content type="text"><![CDATA[jenkins installinstall을 위해서 jenkins repository를 추가한다. sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo rpm에 키 등록 후 jekins 인스톨 sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key sudo yum install jenkins [root@localhost devops]# sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo--2019-06-24 16:07:47-- http://pkg.jenkins-ci.org/redhat/jenkins.repoResolving pkg.jenkins-ci.org (pkg.jenkins-ci.org)... 52.202.51.185Connecting to pkg.jenkins-ci.org (pkg.jenkins-ci.org)|52.202.51.185|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 71Saving to: ‘/etc/yum.repos.d/jenkins.repo’100%[=====================================================================================================================================================================================================================================&gt;] 71 --.-K/s in 0s2019-06-24 16:07:48 (9.43 MB/s) - ‘/etc/yum.repos.d/jenkins.repo’ saved [71/71][root@localhost devops]# sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key[root@localhost devops]# sudo yum install jenkinsLoaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: centos.mirror.moack.net * extras: centos.mirror.moack.net * updates: centos.mirror.moack.netjenkins | 2.9 kB 00:00:00jenkins/primary_db | 129 kB 00:00:01Resolving Dependencies--&gt; Running transaction check---&gt; Package jenkins.noarch 0:2.182-1.1 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved=============================================================================================================================================================================================================================================================================== Package Arch Version Repository Size===============================================================================================================================================================================================================================================================================Installing: jenkins noarch 2.182-1.1 jenkins 74 MTransaction Summary===============================================================================================================================================================================================================================================================================Install 1 PackageTotal download size: 74 MInstalled size: 74 MIs this ok [y/d/N]: yDownloading packages:jenkins-2.182-1.1.noarch.rpm | 74 MB 00:05:37Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : jenkins-2.182-1.1.noarch 1/1 Verifying : jenkins-2.182-1.1.noarch 1/1Installed: jenkins.noarch 0:2.182-1.1Complete! web port &amp; firewalljenkins의 서비스 port를 설정 하고 열어준다. [root@localhost devops]# cd /etc/sysconfig/[root@localhost sysconfig]# vi jenkins ## Type: integer(0:65535)## Default: 8080## ServiceRestart: jenkins## Port Jenkins is listening on.# Set to -1 to disable#JENKINS_PORT="9090" [root@localhost sysconfig]# sudo firewall-cmd --permanent --zone=public --add-port=9090/tcpsuccess[root@localhost sysconfig]# sudo firewall-cmd --reloadsuccess[root@localhost sysconfig]# service jenkins start service jenkins start 명령어로 jenkins를 실행한다. http://url:port 를 브라우저에 넣으면 jenkins 화면이 뜨면 정상적으로 서비스가 실행 된 것이다. Check Jenkins init keyjenkins 최초 실행키는 /var/lib/jenkins/secrets/에 위치 한다. [root@localhost sysconfig]# cd /var/lib/jenkins/secrets/[root@localhost secrets]# lsfilepath-filters.d initialAdminPassword jenkins.model.Jenkins.crumbSalt master.key org.jenkinsci.main.modules.instance_identity.InstanceIdentity.KEY slave-to-master-security-kill-switch whitelisted-callables.d[root@localhost secrets]# vi initialAdminPassword jenkins 실행 중 이상이 발생 한다면 다음 로그를 확인 해서 대응 해 줘야 한다. /var/log/jenkins/ [root@localhost devops]# cd /var/log/jenkins/[root@localhost jenkins]# lsjenkins.log jdk 설치[root@localhost secrets]# yum list java*jdk-develLoaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: centos.mirror.moack.net * extras: centos.mirror.moack.net * updates: centos.mirror.moack.netAvailable Packagesjava-1.6.0-openjdk-devel.x86_64 1:1.6.0.41-1.13.13.1.el7_3 basejava-1.7.0-openjdk-devel.x86_64 1:1.7.0.221-2.6.18.0.el7_6 updatesjava-1.8.0-openjdk-devel.i686 1:1.8.0.212.b04-0.el7_6 updatesjava-1.8.0-openjdk-devel.x86_64 1:1.8.0.212.b04-0.el7_6 updatesjava-11-openjdk-devel.i686 1:11.0.3.7-0.el7_6 updatesjava-11-openjdk-devel.x86_64 1:11.0.3.7-0.el7_6 updates[root@localhost secrets]# yum install java-1.8.0-openjdk-devel.x86_64Loaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: centos.mirror.moack.net * extras: centos.mirror.moack.net * updates: centos.mirror.moack.netResolving Dependencies--&gt; Running transaction check---&gt; Package java-1.8.0-openjdk-devel.x86_64 1:1.8.0.212.b04-0.el7_6 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved=============================================================================================================================================================================================================================================================================== Package Arch Version Repository Size===============================================================================================================================================================================================================================================================================Installing: java-1.8.0-openjdk-devel x86_64 1:1.8.0.212.b04-0.el7_6 updates 9.8 MTransaction Summary===============================================================================================================================================================================================================================================================================Install 1 PackageTotal download size: 9.8 MInstalled size: 40 MIs this ok [y/d/N]: yDownloading packages:java-1.8.0-openjdk-devel-1.8.0.212.b04-0.el7_6.x86_64.rpm | 9.8 MB 00:00:01Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : 1:java-1.8.0-openjdk-devel-1.8.0.212.b04-0.el7_6.x86_64 1/1 Verifying : 1:java-1.8.0-openjdk-devel-1.8.0.212.b04-0.el7_6.x86_64 1/1Installed: java-1.8.0-openjdk-devel.x86_64 1:1.8.0.212.b04-0.el7_6Complete![root@localhost secrets]# javac -versionjavac 1.8.0_212 git install[root@localhost secrets]# gitbash: git: 명령을 찾을 수 없습니다...[root@localhost secrets]# yum install gitLoaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: centos.mirror.moack.net * extras: centos.mirror.moack.net * updates: centos.mirror.moack.netResolving Dependencies--&gt; Running transaction check---&gt; Package git.x86_64 0:1.8.3.1-20.el7 will be installed--&gt; Processing Dependency: perl-Git = 1.8.3.1-20.el7 for package: git-1.8.3.1-20.el7.x86_64--&gt; Processing Dependency: perl(Term::ReadKey) for package: git-1.8.3.1-20.el7.x86_64--&gt; Processing Dependency: perl(Git) for package: git-1.8.3.1-20.el7.x86_64--&gt; Processing Dependency: perl(Error) for package: git-1.8.3.1-20.el7.x86_64--&gt; Running transaction check---&gt; Package perl-Error.noarch 1:0.17020-2.el7 will be installed---&gt; Package perl-Git.noarch 0:1.8.3.1-20.el7 will be installed---&gt; Package perl-TermReadKey.x86_64 0:2.30-20.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved=============================================================================================================================================================================================================================================================================== Package Arch Version Repository Size===============================================================================================================================================================================================================================================================================Installing: git x86_64 1.8.3.1-20.el7 updates 4.4 MInstalling for dependencies: perl-Error noarch 1:0.17020-2.el7 base 32 k perl-Git noarch 1.8.3.1-20.el7 updates 55 k perl-TermReadKey x86_64 2.30-20.el7 base 31 kTransaction Summary===============================================================================================================================================================================================================================================================================Install 1 Package (+3 Dependent packages)Total download size: 4.5 MInstalled size: 22 MIs this ok [y/d/N]: yDownloading packages:(1/4): perl-Error-0.17020-2.el7.noarch.rpm | 32 kB 00:00:00(2/4): perl-Git-1.8.3.1-20.el7.noarch.rpm | 55 kB 00:00:00(3/4): perl-TermReadKey-2.30-20.el7.x86_64.rpm | 31 kB 00:00:00(4/4): git-1.8.3.1-20.el7.x86_64.rpm | 4.4 MB 00:00:00-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Total 7.7 MB/s | 4.5 MB 00:00:00Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : 1:perl-Error-0.17020-2.el7.noarch 1/4 Installing : perl-TermReadKey-2.30-20.el7.x86_64 2/4 Installing : git-1.8.3.1-20.el7.x86_64 3/4 Installing : perl-Git-1.8.3.1-20.el7.noarch 4/4 Verifying : perl-Git-1.8.3.1-20.el7.noarch 1/4 Verifying : 1:perl-Error-0.17020-2.el7.noarch 2/4 Verifying : git-1.8.3.1-20.el7.x86_64 3/4 Verifying : perl-TermReadKey-2.30-20.el7.x86_64 4/4Installed: git.x86_64 0:1.8.3.1-20.el7Dependency Installed: perl-Error.noarch 1:0.17020-2.el7 perl-Git.noarch 0:1.8.3.1-20.el7 perl-TermReadKey.x86_64 0:2.30-20.el7Complete! 최초 파이프라인 테스트새로운 아이템 &gt; Enter an item name &quot;아무거나&quot;&gt; pipeline 선택 &gt; ok &quot;아무거나&quot; 파이프라인 설정 페이지 &gt; pipeline tab 클릭 definition : pipeline script &gt; github + maven &gt; 저장 처음화면으로 이동 아무거나 파이프라인 &gt; name &gt; 아래화살표 &gt; build now 파이프라인 스크립트 기초node &#123; def mvnHome stage('Preparation') &#123; // for display purposes // Get some code from a GitHub repository git 'https://github.com/jglick/simple-maven-project-with-tests.git' // Get the Maven tool. // ** NOTE: This 'M3' Maven tool must be configured // ** in the global configuration. mvnHome = tool 'M3' &#125; stage('Build') &#123; // Run the maven build withEnv(["MVN_HOME=$mvnHome"]) &#123; if (isUnix()) &#123; sh '"$MVN_HOME/bin/mvn" -Dmaven.test.failure.ignore clean package' &#125; else &#123; bat(/"%MVN_HOME%\bin\mvn" -Dmaven.test.failure.ignore clean package/) &#125; &#125; &#125; stage('Results') &#123; junit '**/target/surefire-reports/TEST-*.xml' archiveArtifacts 'target/*.jar' &#125;&#125; 서술적 파이프 라인Node 블록 + 스테이지 블록 + 디렉티브 스탭 = 서술적 파이프라인 node 블록 (필수)node (&lt;parameter&gt;){&lt;constituents&gt;} 노드 블록(젠킨스 에이전트) = 스테이지 블록 + 디렉티브 + 스탭 node &#123; 스테이지 블록 (필수)stage (&lt;parameter&gt;){&lt;constituents&gt;} 스테이지 블록 = 스텝 + 디렉티브 stage('Preparation') &#123; // for display purposes&#125;stage('Build') &#123; // Run the maven build&#125;stage('Results') &#123;&#125; 디렉티브 (옵션)def mvnHomemvnHome = tool 'M3' 환경변수, 옵션, 파라미터, 트리거 등을 표현 github 연결하기Credentials 설정Jenkins 대쉬보드(최상위 화면) Credentials &gt; System &gt; Global credentials &gt; Add Credentials Kind : Username with password Scope : Global Username : github id, name 또는 email password : github password ID : id Description : 아무거나 Credentials 연결Jenkins 대쉬보드(최상위 화면) Jenkins관리 &gt; 시스템설정 GitHub 영역으로 이동 Name : 아무거나 API URL : https://api.github.com Manage hooks : 선택 2번째 고급 클릭 Additional actions : Convert login and password to token 선택 From credentionas &gt; Credentilas &gt; 상위 만든 Credentials 선택 Create token credentials 클릭 정상적으로 토큰이 생성 되었다면 &quot;저장&quot; 후 종료 github 사이트 &gt; 우상단 내 아이콘 클릭 &gt; Setting 클릭 Developer setting 클릭 Personal access tokens 선택 github 사이트에 기 등록된 token이 양쪽다 등록 되었다면 정상 처리 완료 된 것임 내 github repository 연동 연동할 내 github repository 로 이동 Create new file 생성 &gt; Jenkinsfile (대소문자 완전히 같아야 함) node ('master')&#123; checkout scm stage('Build')&#123; withMaven(maven: 'M3')&#123; if(isUnix())&#123; sh 'mvn -Dmaven.test.failure.ignore clean package' &#125; else &#123; bat 'mvn -Dmaven.test.failure.ignore clean package' &#125; &#125; &#125; stage('Results')&#123; junit '**/target/surefire-reports/TEST-*.xml' archive 'target/*.jar' &#125;&#125; 상위 reposibory는 &quot;https://github.com/jglick/simple-maven-project-with-tests&quot;를 Clone한 것임 master branch에 상위와 같이 Jenkinsfile 생성 Multi Branch대쉬보드 &gt; 새로운 Item &gt; Multibranch Pipeline &gt; Branch Sources Credentials : 상위 Credentials 선택 Owner : id or name 작성 (이걸 해야 Repository 리스트 나옮) Repository 선택 저장 webhook 연결webhook을 연결해야 github에서 수정사항이 있을 때 push를 수신 할 수 있다. Jenkins관리 &gt; 시스템설정 &gt; Github &gt; 2번째 고급 클릭 &gt; Re-register hooks for all jobs 클릭 github 등록 확인 상위 등록한 github repository 이동(브라우저) &gt; Settings 선택 &gt; Webhooks 클릭 우측에 내 jenkins와 연결된 내용이 보이면 됨 주의 해야할 점은 jenkins가 public ip 여야만 한다. private의 경우 github가 jenkins를 접근 할 수 없게된다. new Branch 생성github에서 master branch 화면에서 좌상단 Branch:master 버튼을 클릭하고, 아무 Branch 명이나 적게 되면 Create Branch가 가능하게 된다. 이때 Create Branch를 하게 되면 master와 똑같은 내용을 갖는 신규 Branch Repo가 만들어지는데 Webhook을 통해서 jenkins에 변화가 있음을 통지 해주게 된다. Jenkins &gt; multiBranch item화면 진입 하게 되면 앞서 만들었던 신규 브랜치가 빌드된 모습을 확인 할 수 있다. Docker Remote api openjenkins node를 docker 이용해서 처리 하기 위해서는 docker의 remote api가 open 되어 있어야 한다. docker의 인스톨을 여기서 다루지 않는다. systemctl status docker 를 입력했을 때 아래와 같이 나오면, 정상적으로 docker가 인스톨 되어 있다는 뜻이다. [root@localhost system]# systemctl status docker● docker.service - Docker Application Container Engine Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled) Active: active (running) since 월 2019-06-24 13:17:30 KST; 2 days ago Docs: http://docs.docker.com Main PID: 25542 (dockerd-current) Tasks: 52 Memory: 16.1M CGroup: /system.slice/docker.service ├─19662 /usr/libexec/docker/docker-proxy-current -proto tcp -host-ip 0.0.0.0 -host-port 8081 -container-ip 172.17.0.2 -container-port 8081 ├─19670 /usr/bin/docker-containerd-shim-current 67826ba9e0179b6009c9c7a177fe1815fd320cdac65ea91d479413f7c4e5e81a /var/run/docker/libcontainerd/67826ba9e0179b6009c9c7a177fe1815fd320cdac65ea91d479413f7c4e5e81a /usr/libexec/docker/docker-runc-current ├─25542 /usr/bin/dockerd-current --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current --default-runtime=docker-runc --exec-opt native.cgroupdriver=systemd --userland-proxy-path=/usr/libexec/docker/docker-proxy-current --init-path=/usr/libexec/d... └─25550 /usr/bin/docker-containerd-current -l unix:///var/run/docker/libcontainerd/docker-containerd.sock --metrics-interval=0 --start-timeout 2m --state-dir /var/run/docker/libcontainerd/containerd --shim docker-containerd-shim --runtime docker-runc --runt... 6월 26 15:45:58 localhost.localdomain dockerd-current[25542]: https://hub.docker.com/ 6월 26 15:45:58 localhost.localdomain dockerd-current[25542]: 6월 26 15:45:58 localhost.localdomain dockerd-current[25542]: For more examples and ideas, visit: 6월 26 15:45:58 localhost.localdomain dockerd-current[25542]: https://docs.docker.com/get-started/ 6월 26 15:45:58 localhost.localdomain dockerd-current[25542]: 6월 26 15:45:58 localhost.localdomain dockerd-current[25542]: time=&quot;2019-06-26T15:45:58.670141563+09:00&quot; level=warning msg=&quot;f4cca30a56eb3a20bbb7a9943103db28a15c3bd60ddc524adae438ea459c6b2c cleanup: failed to unmount secrets: invalid argument&quot; 6월 26 15:50:00 localhost.localdomain dockerd-current[25542]: 2019-06-26 06:50:00,005+0000 INFO [quartz-3-thread-20] *SYSTEM org.sonatype.nexus.quartz.internal.task.QuartzTaskInfo - Task &apos;Storage facet cleanup&apos; [repository.storage-facet-cleanup] s...WAITING -&gt; RUNNING 6월 26 15:50:00 localhost.localdomain dockerd-current[25542]: 2019-06-26 06:50:00,010+0000 INFO [quartz-3-thread-20] *SYSTEM org.sonatype.nexus.quartz.internal.task.QuartzTaskInfo - Task &apos;Storage facet cleanup&apos; [repository.storage-facet-cleanup] s...NG -&gt; WAITING (OK) 6월 26 16:00:00 localhost.localdomain dockerd-current[25542]: 2019-06-26 07:00:00,005+0000 INFO [quartz-3-thread-20] *SYSTEM org.sonatype.nexus.quartz.internal.task.QuartzTaskInfo - Task &apos;Storage facet cleanup&apos; [repository.storage-facet-cleanup] s...WAITING -&gt; RUNNING 6월 26 16:00:00 localhost.localdomain dockerd-current[25542]: 2019-06-26 07:00:00,010+0000 INFO [quartz-3-thread-20] *SYSTEM org.sonatype.nexus.quartz.internal.task.QuartzTaskInfo - Task &apos;Storage facet cleanup&apos; [repository.storage-facet-cleanup] s...NG -&gt; WAITING (OK)Hint: Some lines were ellipsized, use -l to show in full. 이유는 알 수없지만 docker상에서 remote api를 open 하는 방법은 여러 가지가 있다. 실제로는 이중에 되는게 있으면 다행인데, 없다면... 다시 처음부터 docker를 install 해야한다. docker.conf 파일 수정vi /etc/.init/docker.conf DOCKER_OPS=&apos;-H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock&apos; 도커 서버를 유닉스 도커 엔진과 4243포트로 연결한다. 상위 내용 저는 실패 docker.service 파일 수정위치가 다른 경우가 많은 것으로 보인다. 상위 status를 통해서 얻어오 데이타인 Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled) 로 위치를 추측 하였다. vi /lib/systemd/system/docker.service 인터넷이 말하는 path vi /usr/lib/systemd/system/docker.service 내 path ExecStart=/usr/bin/docker daemon -H fd:// -H tcp://0.0.0.0:4243 그러나 실제로 상위 파일을 수정 하려고 보면, 기존 내용을 지워야 할지 아니면 ExecStart를 하나더 추가 하라는 건지 모르겠다. docker.service [Unit]Description=Docker Application Container EngineDocumentation=http://docs.docker.comAfter=network.targetWants=docker-storage-setup.serviceRequires=docker-cleanup.timer[Service]Type=notifyNotifyAccess=mainEnvironmentFile=-/run/containers/registries.confEnvironmentFile=-/etc/sysconfig/dockerEnvironmentFile=-/etc/sysconfig/docker-storageEnvironmentFile=-/etc/sysconfig/docker-networkEnvironment=GOTRACEBACK=crashEnvironment=DOCKER_HTTP_HOST_COMPAT=1Environment=PATH=/usr/libexec/docker:/usr/bin:/usr/sbinExecStart=/usr/bin/dockerd-current \ --add-runtime docker-runc=/usr/libexec/docker/docker-runc-current \ --default-runtime=docker-runc \ --exec-opt native.cgroupdriver=systemd \ --userland-proxy-path=/usr/libexec/docker/docker-proxy-current \ --init-path=/usr/libexec/docker/docker-init-current \ --seccomp-profile=/etc/docker/seccomp.json \ $OPTIONS \ $DOCKER_STORAGE_OPTIONS \ $DOCKER_NETWORK_OPTIONS \ $ADD_REGISTRY \ $BLOCK_REGISTRY \ $INSECURE_REGISTRY \ $REGISTRIESExecReload=/bin/kill -s HUP $MAINPIDLimitNOFILE=1048576LimitNPROC=1048576LimitCORE=infinityTimeoutStartSec=0Restart=on-abnormalKillMode=process[Install]WantedBy=multi-user.target docker 파일 수정vi /etc/sysconfig/docker # /etc/sysconfig/docker# Modify these options if you want to change the way the docker daemon runsOPTIONS='--selinux-enabled --log-driver=journald --signature-verification=false'if [ -z "$&#123;DOCKER_CERT_PATH&#125;" ]; then DOCKER_CERT_PATH=/etc/dockerfi# Do not add registries in this file anymore. Use /etc/containers/registries.conf# instead. For more information reference the registries.conf(5) man page.# Location used for temporary files, such as those created by# docker load and build operations. Default is /var/lib/docker/tmp# Can be overriden by setting the following environment variable.# DOCKER_TMPDIR=/var/tmp# Controls the /etc/cron.daily/docker-logrotate cron job status.# To disable, uncomment the line below.# LOGROTATE=false# docker-latest daemon can be used by starting the docker-latest unitfile.# To use docker-latest client, uncomment below lines#DOCKERBINARY=/usr/bin/docker-latest#DOCKERDBINARY=/usr/bin/dockerd-latest#DOCKER_CONTAINERD_BINARY=/usr/bin/docker-containerd-latest#DOCKER_CONTAINERD_SHIM_BINARY=/usr/bin/docker-containerd-shim-latestOPTIONS='--selinux-enabled --log-driver=journald --signature-verification=false -H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock' 상위 파일의 마지막 OPTIONS를 기존 파일에 추가 하였다. 저는 상위 파일 수정으로 성공 하였습니다. 주의 해야하는 것은 tcp 이후 0.0.0.0 이 아니 127.0.0.1로 쓰게 되면 local 접근만 되고 대외 접근은 불가 합니다. 서비스 재 실행 및 TEST demon 재실행 : systemctl daemon-reload 서비스 재실행 : service docker restart Test : curl -X GET http://localhost:4243/images/json [root@localhost system]# systemctl daemon-reload[root@localhost system]# service docker restartRedirecting to /bin/systemctl restart docker.service[root@localhost system]# curl -X GET http://localhost:4243/images/json[&#123;"Containers":-1,"Created":1561408399,"Id":"sha256:36b0df681a47e5948f2088a446652766132141175dece2d6d47ef6e749385c05","Labels":&#123;"com.sonatype.license":"Apache License, Version 2.0","com.sonatype.name":"Nexus Repository Manager base image","org.label-schema.build-date":"20190305","org.label-schema.license":"GPLv2","org.label-schema.name":"CentOS Base Image","org.label-schema.schema-version":"1.0","org.label-schema.vendor":"CentOS","vendor":"Sonatype"&#125;,"ParentId":"","RepoDigests":["docker.io/sonatype/nexus3@sha256:970b09779992bf88d041d074428c54dc153f7b9c8cafe4ff364dd26d69200f7a"],"RepoTags":["docker.io/sonatype/nexus3:latest"],"SharedSize":-1,"Size":581556647,"VirtualSize":581556647&#125;,&#123;"Containers":-1,"Created":1546306167,"Id":"sha256:fce289e99eb9bca977dae136fbe2a82b6b7d4c372474c9235adc1741675f587e","Labels":null,"ParentId":"","RepoDigests":["docker.io/hello-world@sha256:41a65640635299bab090f783209c1e3a3f11934cf7756b09cb2f1e02147c6ed8"],"RepoTags":["docker.io/hello-world:latest"],"SharedSize":-1,"Size":1840,"VirtualSize":1840&#125;] 포트 open[root@localhost system]# firewall-cmd --permanent --zone=public --add-port=4243/tcpsuccess[root@localhost system]# firewall-cmd --reload]]></content>
      <tags>
        <tag>centos</tag>
        <tag>Jenkins</tag>
        <tag>CI</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Virtual Box And Vagrant Install on Centos]]></title>
    <url>%2Fvirtualbox-on-centos7%2F</url>
    <content type="text"><![CDATA[yum installDependency Installvirtual box에 관련된 라이브러리를 우선 install 한다. yum -y install gcc dkms make qt libgomp patch yum -y install kernel-headers kernel-devel binutils glibc-headers glibc-devel font-forge [devops@localhost ~]$ su암호:[root@localhost devops]# yum -y install gcc dkms make qt libgomp patchLoaded plugins: fastestmirror, langpacksbase | 3.6 kB 00:00:00docker-ce-stable | 3.5 kB 00:00:00epel | 5.3 kB 00:00:00extras | 3.4 kB 00:00:00maradb | 2.9 kB 00:00:00updates | 3.4 kB 00:00:00webtatic | 3.6 kB 00:00:00(1/2): epel/x86_64/primary_db | 6.1 MB 00:00:05(2/2): epel/x86_64/updateinfo | 782 kB 00:00:11Loading mirror speeds from cached hostfile * base: centos.mirror.moack.net * extras: data.aonenetworks.kr * updates: mirror.kakao.com * webtatic: us-east.repo.webtatic.comResolving Dependencies--&gt; Running transaction check---&gt; Package dkms.noarch 0:2.4.0-1.20170926git959bd74.el6 will be installed--&gt; Processing Dependency: elfutils-libelf-devel for package: dkms-2.4.0-1.20170926git959bd74.el6.noarch--&gt; Processing Dependency: kernel-devel-uname-r for package: dkms-2.4.0-1.20170926git959bd74.el6.noarch---&gt; Package gcc.x86_64 0:4.8.5-11.el7 will be updated--&gt; Processing Dependency: gcc = 4.8.5-11.el7 for package: gcc-c++-4.8.5-11.el7.x86_64---&gt; Package gcc.x86_64 0:4.8.5-36.el7_6.2 will be an update--&gt; Processing Dependency: cpp = 4.8.5-36.el7_6.2 for package: gcc-4.8.5-36.el7_6.2.x86_64--&gt; Processing Dependency: libgcc &gt;= 4.8.5-36.el7_6.2 for package: gcc-4.8.5-36.el7_6.2.x86_64---&gt; Package libgomp.x86_64 0:4.8.5-11.el7 will be updated---&gt; Package libgomp.x86_64 0:4.8.5-36.el7_6.2 will be an update---&gt; Package make.x86_64 1:3.82-21.el7 will be updated---&gt; Package make.x86_64 1:3.82-23.el7 will be an update---&gt; Package patch.x86_64 0:2.7.1-10.el7_5 will be installed---&gt; Package qt.x86_64 1:4.8.7-2.el7 will be installed--&gt; Processing Dependency: qt-settings for package: 1:qt-4.8.7-2.el7.x86_64--&gt; Processing Dependency: libcrypto.so.10(OPENSSL_1.0.2)(64bit) for package: 1:qt-4.8.7-2.el7.x86_64--&gt; Running transaction check---&gt; Package cpp.x86_64 0:4.8.5-11.el7 will be updated---&gt; Package cpp.x86_64 0:4.8.5-36.el7_6.2 will be an update---&gt; Package elfutils-libelf-devel.x86_64 0:0.172-2.el7 will be installed--&gt; Processing Dependency: elfutils-libelf(x86-64) = 0.172-2.el7 for package: elfutils-libelf-devel-0.172-2.el7.x86_64---&gt; Package gcc-c++.x86_64 0:4.8.5-11.el7 will be updated---&gt; Package gcc-c++.x86_64 0:4.8.5-36.el7_6.2 will be an update--&gt; Processing Dependency: libstdc++-devel = 4.8.5-36.el7_6.2 for package: gcc-c++-4.8.5-36.el7_6.2.x86_64--&gt; Processing Dependency: libstdc++ = 4.8.5-36.el7_6.2 for package: gcc-c++-4.8.5-36.el7_6.2.x86_64---&gt; Package kernel-debug-devel.x86_64 0:3.10.0-957.21.3.el7 will be installed---&gt; Package libgcc.x86_64 0:4.8.5-11.el7 will be updated---&gt; Package libgcc.x86_64 0:4.8.5-36.el7_6.2 will be an update---&gt; Package openssl-libs.x86_64 1:1.0.1e-60.el7_3.1 will be updated--&gt; Processing Dependency: openssl-libs(x86-64) = 1:1.0.1e-60.el7_3.1 for package: 1:openssl-1.0.1e-60.el7_3.1.x86_64--&gt; Processing Dependency: openssl-libs(x86-64) = 1:1.0.1e-60.el7_3.1 for package: 1:openssl-devel-1.0.1e-60.el7_3.1.x86_64---&gt; Package openssl-libs.x86_64 1:1.0.2k-16.el7_6.1 will be an update---&gt; Package qt-settings.noarch 0:19-23.8.el7.centos will be installed--&gt; Running transaction check---&gt; Package elfutils-libelf.x86_64 0:0.160-1.el7 will be updated--&gt; Processing Dependency: elfutils-libelf(x86-64) = 0.160-1.el7 for package: elfutils-libs-0.160-1.el7.x86_64--&gt; Processing Dependency: elfutils-libelf(x86-64) = 0.160-1.el7 for package: elfutils-0.160-1.el7.x86_64---&gt; Package elfutils-libelf.x86_64 0:0.172-2.el7 will be an update---&gt; Package libstdc++.x86_64 0:4.8.5-11.el7 will be updated---&gt; Package libstdc++.x86_64 0:4.8.5-36.el7_6.2 will be an update---&gt; Package libstdc++-devel.x86_64 0:4.8.5-11.el7 will be updated---&gt; Package libstdc++-devel.x86_64 0:4.8.5-36.el7_6.2 will be an update---&gt; Package openssl.x86_64 1:1.0.1e-60.el7_3.1 will be updated---&gt; Package openssl.x86_64 1:1.0.2k-16.el7_6.1 will be an update---&gt; Package openssl-devel.x86_64 1:1.0.1e-60.el7_3.1 will be updated---&gt; Package openssl-devel.x86_64 1:1.0.2k-16.el7_6.1 will be an update--&gt; Running transaction check---&gt; Package elfutils.x86_64 0:0.160-1.el7 will be updated---&gt; Package elfutils.x86_64 0:0.172-2.el7 will be an update---&gt; Package elfutils-libs.x86_64 0:0.160-1.el7 will be updated---&gt; Package elfutils-libs.x86_64 0:0.172-2.el7 will be an update--&gt; Processing Dependency: default-yama-scope for package: elfutils-libs-0.172-2.el7.x86_64--&gt; Running transaction check---&gt; Package elfutils-default-yama-scope.noarch 0:0.172-2.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved=============================================================================================================================================================================================================================================================================== Package Arch Version Repository Size===============================================================================================================================================================================================================================================================================Installing: dkms noarch 2.4.0-1.20170926git959bd74.el6 epel 78 k patch x86_64 2.7.1-10.el7_5 base 110 k qt x86_64 1:4.8.7-2.el7 base 4.6 MUpdating: gcc x86_64 4.8.5-36.el7_6.2 updates 16 M libgomp x86_64 4.8.5-36.el7_6.2 updates 158 k make x86_64 1:3.82-23.el7 base 420 kInstalling for dependencies: elfutils-default-yama-scope noarch 0.172-2.el7 base 32 k elfutils-libelf-devel x86_64 0.172-2.el7 base 39 k kernel-debug-devel x86_64 3.10.0-957.21.3.el7 updates 17 M qt-settings noarch 19-23.8.el7.centos base 17 kUpdating for dependencies: cpp x86_64 4.8.5-36.el7_6.2 updates 5.9 M elfutils x86_64 0.172-2.el7 base 299 k elfutils-libelf x86_64 0.172-2.el7 base 194 k elfutils-libs x86_64 0.172-2.el7 base 285 k gcc-c++ x86_64 4.8.5-36.el7_6.2 updates 7.2 M libgcc x86_64 4.8.5-36.el7_6.2 updates 102 k libstdc++ x86_64 4.8.5-36.el7_6.2 updates 305 k libstdc++-devel x86_64 4.8.5-36.el7_6.2 updates 1.5 M openssl x86_64 1:1.0.2k-16.el7_6.1 updates 493 k openssl-devel x86_64 1:1.0.2k-16.el7_6.1 updates 1.5 M openssl-libs x86_64 1:1.0.2k-16.el7_6.1 updates 1.2 MTransaction Summary===============================================================================================================================================================================================================================================================================Install 3 Packages (+ 4 Dependent packages)Upgrade 3 Packages (+11 Dependent packages)Total size: 57 MTotal download size: 57 MDownloading packages:No Presto metadata available for base(1/20): elfutils-default-yama-scope-0.172-2.el7.noarch.rpm | 32 kB 00:00:00(2/20): elfutils-libelf-0.172-2.el7.x86_64.rpm | 194 kB 00:00:00(3/20): elfutils-0.172-2.el7.x86_64.rpm | 299 kB 00:00:00(4/20): elfutils-libelf-devel-0.172-2.el7.x86_64.rpm | 39 kB 00:00:00(5/20): elfutils-libs-0.172-2.el7.x86_64.rpm | 285 kB 00:00:00(6/20): cpp-4.8.5-36.el7_6.2.x86_64.rpm | 5.9 MB 00:00:00warning: /var/cache/yum/x86_64/7/epel/packages/dkms-2.4.0-1.20170926git959bd74.el6.noarch.rpm: Header V3 RSA/SHA256 Signature, key ID 0608b895: NOKEY ] 4.7 MB/s | 11 MB 00:00:09 ETAPublic key for dkms-2.4.0-1.20170926git959bd74.el6.noarch.rpm is not installed(7/20): dkms-2.4.0-1.20170926git959bd74.el6.noarch.rpm | 78 kB 00:00:01(8/20): gcc-c++-4.8.5-36.el7_6.2.x86_64.rpm | 7.2 MB 00:00:00(9/20): kernel-debug-devel-3.10.0-957.21.3.el7.x86_64.rpm | 17 MB 00:00:02(10/20): libgomp-4.8.5-36.el7_6.2.x86_64.rpm | 158 kB 00:00:00(11/20): libstdc++-4.8.5-36.el7_6.2.x86_64.rpm | 305 kB 00:00:00(12/20): gcc-4.8.5-36.el7_6.2.x86_64.rpm | 16 MB 00:00:04(13/20): libstdc++-devel-4.8.5-36.el7_6.2.x86_64.rpm | 1.5 MB 00:00:00(14/20): make-3.82-23.el7.x86_64.rpm | 420 kB 00:00:00(15/20): openssl-1.0.2k-16.el7_6.1.x86_64.rpm | 493 kB 00:00:00(16/20): openssl-devel-1.0.2k-16.el7_6.1.x86_64.rpm | 1.5 MB 00:00:00(17/20): patch-2.7.1-10.el7_5.x86_64.rpm | 110 kB 00:00:00(18/20): openssl-libs-1.0.2k-16.el7_6.1.x86_64.rpm | 1.2 MB 00:00:00(19/20): qt-settings-19-23.8.el7.centos.noarch.rpm | 17 kB 00:00:00(20/20): qt-4.8.7-2.el7.x86_64.rpm | 4.6 MB 00:00:00-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Total 11 MB/s | 57 MB 00:00:05Retrieving key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6Importing GPG key 0x0608B895: Userid : "EPEL (6) &lt;epel@fedoraproject.org&gt;" Fingerprint: 8c3b e96a f230 9184 da5c 0dae 3b49 df2a 0608 b895 Package : epel-release-6-8.noarch (installed) From : /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6Running transaction checkRunning transaction testTransaction test succeededRunning transaction Updating : libgcc-4.8.5-36.el7_6.2.x86_64 1/35 Updating : libstdc++-4.8.5-36.el7_6.2.x86_64 2/35 Updating : 1:openssl-libs-1.0.2k-16.el7_6.1.x86_64 3/35 Updating : elfutils-libelf-0.172-2.el7.x86_64 4/35 Installing : elfutils-libelf-devel-0.172-2.el7.x86_64 5/35 Updating : libstdc++-devel-4.8.5-36.el7_6.2.x86_64 6/35 Updating : cpp-4.8.5-36.el7_6.2.x86_64 7/35 Updating : 1:make-3.82-23.el7.x86_64 8/35 Installing : elfutils-default-yama-scope-0.172-2.el7.noarch 9/35 Updating : elfutils-libs-0.172-2.el7.x86_64 10/35 Updating : libgomp-4.8.5-36.el7_6.2.x86_64 11/35 Updating : gcc-4.8.5-36.el7_6.2.x86_64 12/35 Installing : qt-settings-19-23.8.el7.centos.noarch 13/35 Installing : kernel-debug-devel-3.10.0-957.21.3.el7.x86_64 14/35 Installing : dkms-2.4.0-1.20170926git959bd74.el6.noarch 15/35 Installing : 1:qt-4.8.7-2.el7.x86_64 16/35 Updating : gcc-c++-4.8.5-36.el7_6.2.x86_64 17/35 Updating : elfutils-0.172-2.el7.x86_64 18/35 Updating : 1:openssl-1.0.2k-16.el7_6.1.x86_64 19/35 Updating : 1:openssl-devel-1.0.2k-16.el7_6.1.x86_64 20/35 Installing : patch-2.7.1-10.el7_5.x86_64 21/35 Cleanup : 1:openssl-devel-1.0.1e-60.el7_3.1.x86_64 22/35 Cleanup : elfutils-0.160-1.el7.x86_64 23/35 Cleanup : gcc-c++-4.8.5-11.el7.x86_64 24/35 Cleanup : gcc-4.8.5-11.el7.x86_64 25/35 Cleanup : 1:openssl-1.0.1e-60.el7_3.1.x86_64 26/35 Cleanup : elfutils-libs-0.160-1.el7.x86_64 27/35 Cleanup : libstdc++-devel-4.8.5-11.el7.x86_64 28/35 Cleanup : libstdc++-4.8.5-11.el7.x86_64 29/35 Cleanup : libgcc-4.8.5-11.el7.x86_64 30/35 Cleanup : elfutils-libelf-0.160-1.el7.x86_64 31/35 Cleanup : 1:openssl-libs-1.0.1e-60.el7_3.1.x86_64 32/35 Cleanup : 1:make-3.82-21.el7.x86_64 33/35 Cleanup : cpp-4.8.5-11.el7.x86_64 34/35 Cleanup : libgomp-4.8.5-11.el7.x86_64 35/35 Verifying : elfutils-libelf-devel-0.172-2.el7.x86_64 1/35 Verifying : kernel-debug-devel-3.10.0-957.21.3.el7.x86_64 2/35 Verifying : 1:qt-4.8.7-2.el7.x86_64 3/35 Verifying : qt-settings-19-23.8.el7.centos.noarch 4/35 Verifying : patch-2.7.1-10.el7_5.x86_64 5/35 Verifying : gcc-4.8.5-36.el7_6.2.x86_64 6/35 Verifying : libstdc++-4.8.5-36.el7_6.2.x86_64 7/35 Verifying : 1:openssl-devel-1.0.2k-16.el7_6.1.x86_64 8/35 Verifying : libgcc-4.8.5-36.el7_6.2.x86_64 9/35 Verifying : libgomp-4.8.5-36.el7_6.2.x86_64 10/35 Verifying : dkms-2.4.0-1.20170926git959bd74.el6.noarch 11/35 Verifying : libstdc++-devel-4.8.5-36.el7_6.2.x86_64 12/35 Verifying : 1:openssl-1.0.2k-16.el7_6.1.x86_64 13/35 Verifying : elfutils-libelf-0.172-2.el7.x86_64 14/35 Verifying : elfutils-default-yama-scope-0.172-2.el7.noarch 15/35 Verifying : gcc-c++-4.8.5-36.el7_6.2.x86_64 16/35 Verifying : 1:make-3.82-23.el7.x86_64 17/35 Verifying : elfutils-libs-0.172-2.el7.x86_64 18/35 Verifying : cpp-4.8.5-36.el7_6.2.x86_64 19/35 Verifying : 1:openssl-libs-1.0.2k-16.el7_6.1.x86_64 20/35 Verifying : elfutils-0.172-2.el7.x86_64 21/35 Verifying : 1:openssl-1.0.1e-60.el7_3.1.x86_64 22/35 Verifying : gcc-c++-4.8.5-11.el7.x86_64 23/35 Verifying : elfutils-libs-0.160-1.el7.x86_64 24/35 Verifying : cpp-4.8.5-11.el7.x86_64 25/35 Verifying : 1:openssl-libs-1.0.1e-60.el7_3.1.x86_64 26/35 Verifying : elfutils-libelf-0.160-1.el7.x86_64 27/35 Verifying : 1:openssl-devel-1.0.1e-60.el7_3.1.x86_64 28/35 Verifying : libgcc-4.8.5-11.el7.x86_64 29/35 Verifying : libstdc++-4.8.5-11.el7.x86_64 30/35 Verifying : 1:make-3.82-21.el7.x86_64 31/35 Verifying : elfutils-0.160-1.el7.x86_64 32/35 Verifying : libgomp-4.8.5-11.el7.x86_64 33/35 Verifying : gcc-4.8.5-11.el7.x86_64 34/35 Verifying : libstdc++-devel-4.8.5-11.el7.x86_64 35/35Installed: dkms.noarch 0:2.4.0-1.20170926git959bd74.el6 patch.x86_64 0:2.7.1-10.el7_5 qt.x86_64 1:4.8.7-2.el7Dependency Installed: elfutils-default-yama-scope.noarch 0:0.172-2.el7 elfutils-libelf-devel.x86_64 0:0.172-2.el7 kernel-debug-devel.x86_64 0:3.10.0-957.21.3.el7 qt-settings.noarch 0:19-23.8.el7.centosUpdated: gcc.x86_64 0:4.8.5-36.el7_6.2 libgomp.x86_64 0:4.8.5-36.el7_6.2 make.x86_64 1:3.82-23.el7Dependency Updated: cpp.x86_64 0:4.8.5-36.el7_6.2 elfutils.x86_64 0:0.172-2.el7 elfutils-libelf.x86_64 0:0.172-2.el7 elfutils-libs.x86_64 0:0.172-2.el7 gcc-c++.x86_64 0:4.8.5-36.el7_6.2 libgcc.x86_64 0:4.8.5-36.el7_6.2 libstdc++.x86_64 0:4.8.5-36.el7_6.2 libstdc++-devel.x86_64 0:4.8.5-36.el7_6.2 openssl.x86_64 1:1.0.2k-16.el7_6.1 openssl-devel.x86_64 1:1.0.2k-16.el7_6.1 openssl-libs.x86_64 1:1.0.2k-16.el7_6.1Complete! [root@localhost devops]# yum -y install kernel-headers kernel-devel binutils glibc-headers glibc-devel font-forgeLoaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: centos.mirror.moack.net * extras: data.aonenetworks.kr * updates: mirror.kakao.com * webtatic: us-east.repo.webtatic.comNo package font-forge available.Resolving Dependencies--&gt; Running transaction check---&gt; Package binutils.x86_64 0:2.23.52.0.1-30.el7 will be updated---&gt; Package binutils.x86_64 0:2.27-34.base.el7 will be an update---&gt; Package glibc-devel.x86_64 0:2.17-157.el7_3.1 will be updated---&gt; Package glibc-devel.x86_64 0:2.17-260.el7_6.5 will be an update--&gt; Processing Dependency: glibc = 2.17-260.el7_6.5 for package: glibc-devel-2.17-260.el7_6.5.x86_64---&gt; Package glibc-headers.x86_64 0:2.17-157.el7_3.1 will be updated---&gt; Package glibc-headers.x86_64 0:2.17-260.el7_6.5 will be an update---&gt; Package kernel-devel.x86_64 0:3.10.0-957.21.3.el7 will be installed---&gt; Package kernel-headers.x86_64 0:3.10.0-514.10.2.el7 will be updated---&gt; Package kernel-headers.x86_64 0:3.10.0-957.21.3.el7 will be an update--&gt; Running transaction check---&gt; Package glibc.x86_64 0:2.17-157.el7_3.1 will be updated--&gt; Processing Dependency: glibc = 2.17-157.el7_3.1 for package: glibc-common-2.17-157.el7_3.1.x86_64---&gt; Package glibc.x86_64 0:2.17-260.el7_6.5 will be an update--&gt; Running transaction check---&gt; Package glibc-common.x86_64 0:2.17-157.el7_3.1 will be updated---&gt; Package glibc-common.x86_64 0:2.17-260.el7_6.5 will be an update--&gt; Finished Dependency ResolutionDependencies Resolved=============================================================================================================================================================================================================================================================================== Package Arch Version Repository Size===============================================================================================================================================================================================================================================================================Installing: kernel-devel x86_64 3.10.0-957.21.3.el7 updates 17 MUpdating: binutils x86_64 2.27-34.base.el7 base 5.9 M glibc-devel x86_64 2.17-260.el7_6.5 updates 1.1 M glibc-headers x86_64 2.17-260.el7_6.5 updates 683 k kernel-headers x86_64 3.10.0-957.21.3.el7 updates 8.0 MUpdating for dependencies: glibc x86_64 2.17-260.el7_6.5 updates 3.7 M glibc-common x86_64 2.17-260.el7_6.5 updates 12 MTransaction Summary===============================================================================================================================================================================================================================================================================Install 1 PackageUpgrade 4 Packages (+2 Dependent packages)Total download size: 48 MDownloading packages:No Presto metadata available for base(1/7): glibc-2.17-260.el7_6.5.x86_64.rpm | 3.7 MB 00:00:00(2/7): glibc-devel-2.17-260.el7_6.5.x86_64.rpm | 1.1 MB 00:00:00(3/7): binutils-2.27-34.base.el7.x86_64.rpm | 5.9 MB 00:00:01(4/7): glibc-headers-2.17-260.el7_6.5.x86_64.rpm | 683 kB 00:00:00(5/7): glibc-common-2.17-260.el7_6.5.x86_64.rpm | 12 MB 00:00:02(6/7): kernel-headers-3.10.0-957.21.3.el7.x86_64.rpm | 8.0 MB 00:00:01(7/7): kernel-devel-3.10.0-957.21.3.el7.x86_64.rpm | 17 MB 00:00:02-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------Total 11 MB/s | 48 MB 00:00:04Running transaction checkRunning transaction testTransaction test succeededRunning transaction Updating : glibc-common-2.17-260.el7_6.5.x86_64 1/13 Updating : glibc-2.17-260.el7_6.5.x86_64 2/13warning: /etc/nsswitch.conf created as /etc/nsswitch.conf.rpmnew Updating : kernel-headers-3.10.0-957.21.3.el7.x86_64 3/13 Updating : glibc-headers-2.17-260.el7_6.5.x86_64 4/13 Updating : glibc-devel-2.17-260.el7_6.5.x86_64 5/13 Updating : binutils-2.27-34.base.el7.x86_64 6/13 Installing : kernel-devel-3.10.0-957.21.3.el7.x86_64 7/13 Cleanup : glibc-devel-2.17-157.el7_3.1.x86_64 8/13 Cleanup : glibc-headers-2.17-157.el7_3.1.x86_64 9/13 Cleanup : binutils-2.23.52.0.1-30.el7.x86_64 10/13 Cleanup : kernel-headers-3.10.0-514.10.2.el7.x86_64 11/13 Cleanup : glibc-common-2.17-157.el7_3.1.x86_64 12/13 Cleanup : glibc-2.17-157.el7_3.1.x86_64 13/13 Verifying : kernel-devel-3.10.0-957.21.3.el7.x86_64 1/13 Verifying : binutils-2.27-34.base.el7.x86_64 2/13 Verifying : glibc-headers-2.17-260.el7_6.5.x86_64 3/13 Verifying : glibc-2.17-260.el7_6.5.x86_64 4/13 Verifying : glibc-common-2.17-260.el7_6.5.x86_64 5/13 Verifying : glibc-devel-2.17-260.el7_6.5.x86_64 6/13 Verifying : kernel-headers-3.10.0-957.21.3.el7.x86_64 7/13 Verifying : glibc-headers-2.17-157.el7_3.1.x86_64 8/13 Verifying : glibc-common-2.17-157.el7_3.1.x86_64 9/13 Verifying : glibc-2.17-157.el7_3.1.x86_64 10/13 Verifying : kernel-headers-3.10.0-514.10.2.el7.x86_64 11/13 Verifying : binutils-2.23.52.0.1-30.el7.x86_64 12/13 Verifying : glibc-devel-2.17-157.el7_3.1.x86_64 13/13Installed: kernel-devel.x86_64 0:3.10.0-957.21.3.el7Updated: binutils.x86_64 0:2.27-34.base.el7 glibc-devel.x86_64 0:2.17-260.el7_6.5 glibc-headers.x86_64 0:2.17-260.el7_6.5 kernel-headers.x86_64 0:3.10.0-957.21.3.el7Dependency Updated: glibc.x86_64 0:2.17-260.el7_6.5 glibc-common.x86_64 0:2.17-260.el7_6.5Complete! Add Repositoryvirtual box를 인스톨하기 위한 yum repository를 등록 한다. wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo [root@localhost devops]# cd /etc/yum.repos.d/[root@localhost yum.repos.d]# lsCentOS-Base.repo CentOS-CR.repo CentOS-Debuginfo.repo CentOS-Sources.repo CentOS-Vault.repo CentOS-fasttrack.repo docker-ce.repo epel-testing.repo epel.repo mariadb.repo webtatic-archive.repo webtatic-testing.repo webtatic.repo[root@localhost yum.repos.d]# ll합계 52-rw-r--r--. 1 root root 1664 4월 1 2015 CentOS-Base.repo-rw-r--r--. 1 root root 1309 4월 1 2015 CentOS-CR.repo-rw-r--r--. 1 root root 649 4월 1 2015 CentOS-Debuginfo.repo-rw-r--r--. 1 root root 1331 4월 1 2015 CentOS-Sources.repo-rw-r--r--. 1 root root 1002 4월 1 2015 CentOS-Vault.repo-rw-r--r--. 1 root root 290 4월 1 2015 CentOS-fasttrack.repo-rw-r--r--. 1 root root 2424 10월 25 2018 docker-ce.repo-rw-r--r--. 1 root root 1056 11월 5 2012 epel-testing.repo-rw-r--r--. 1 root root 960 6월 20 12:28 epel.repo-rw-r--r--. 1 root root 139 2월 24 2017 mariadb.repo-rw-r--r--. 1 root root 963 11월 13 2016 webtatic-archive.repo-rw-r--r--. 1 root root 963 11월 13 2016 webtatic-testing.repo-rw-r--r--. 1 root root 865 11월 13 2016 webtatic.repo[root@localhost yum.repos.d]# wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo--2019-06-21 11:04:18-- http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repoResolving download.virtualbox.org (download.virtualbox.org)... 23.35.220.157Connecting to download.virtualbox.org (download.virtualbox.org)|23.35.220.157|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 259 [text/plain]Saving to: ‘virtualbox.repo’100%[=====================================================================================================================================================================================================================================&gt;] 259 --.-K/s in 0s2019-06-21 11:04:19 (40.2 MB/s) - ‘virtualbox.repo’ saved [259/259] install virtualboxvirtual box를 install 한다. 6.0이 현재 기준 최신이다. yum install -y VirtualBox-6.0 [root@localhost yum.repos.d]# yum install -y VirtualBox-6.0Loaded plugins: fastestmirror, langpacksvirtualbox/7/x86_64/signature | 181 B 00:00:00Retrieving key from https://www.virtualbox.org/download/oracle_vbox.ascImporting GPG key 0x98AB5139: Userid : "Oracle Corporation (VirtualBox archive signing key) &lt;info@virtualbox.org&gt;" Fingerprint: 7b0f ab3a 13b9 0743 5925 d9c9 5442 2a4b 98ab 5139 From : https://www.virtualbox.org/download/oracle_vbox.ascvirtualbox/7/x86_64/signature | 2.9 kB 00:00:01 !!!virtualbox/7/x86_64/primary_db | 130 kB 00:00:00Loading mirror speeds from cached hostfile * base: centos.mirror.moack.net * extras: data.aonenetworks.kr * updates: mirror.kakao.com * webtatic: us-east.repo.webtatic.comResolving Dependencies--&gt; Running transaction check---&gt; Package VirtualBox-6.0.x86_64 0:6.0.8_130520_el7-1 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved=============================================================================================================================================================================================================================================================================== Package Arch Version Repository Size===============================================================================================================================================================================================================================================================================Installing: VirtualBox-6.0 x86_64 6.0.8_130520_el7-1 virtualbox 116 MTransaction Summary===============================================================================================================================================================================================================================================================================Install 1 PackageTotal download size: 116 MInstalled size: 238 MDownloading packages:경고: /var/cache/yum/x86_64/7/virtualbox/packages/VirtualBox-6.0-6.0.8_130520_el7-1.x86_64.rpm: Header V4 DSA/SHA1 Signature, key ID 98ab5139: NOKEY========================================================================================-] 8.1 MB/s | 116 MB 00:00:00 ETAPublic key for VirtualBox-6.0-6.0.8_130520_el7-1.x86_64.rpm is not installedVirtualBox-6.0-6.0.8_130520_el7-1.x86_64.rpm | 116 MB 00:00:14Retrieving key from https://www.virtualbox.org/download/oracle_vbox.ascImporting GPG key 0x98AB5139: Userid : "Oracle Corporation (VirtualBox archive signing key) &lt;info@virtualbox.org&gt;" Fingerprint: 7b0f ab3a 13b9 0743 5925 d9c9 5442 2a4b 98ab 5139 From : https://www.virtualbox.org/download/oracle_vbox.ascRunning transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : VirtualBox-6.0-6.0.8_130520_el7-1.x86_64 1/1Creating group 'vboxusers'. VM users must be member of that group!This system is currently not set up to build kernel modules.Please install the Linux kernel "header" files matching the current kernelfor adding new hardware support to the system.The distribution packages containing the headers are probably: kernel-devel kernel-devel-3.10.0-229.el7.x86_64This system is currently not set up to build kernel modules.Please install the Linux kernel "header" files matching the current kernelfor adding new hardware support to the system.The distribution packages containing the headers are probably: kernel-devel kernel-devel-3.10.0-229.el7.x86_64There were problems setting up VirtualBox. To re-start the set-up process, run /sbin/vboxconfigas root. If your system is using EFI Secure Boot you may need to sign thekernel modules (vboxdrv, vboxnetflt, vboxnetadp, vboxpci) before you can loadthem. Please see your Linux system's documentation for more information. Verifying : VirtualBox-6.0-6.0.8_130520_el7-1.x86_64 1/1Installed: VirtualBox-6.0.x86_64 0:6.0.8_130520_el7-1Complete! [root@localhost yum.repos.d]# rcvboxdrv setupvboxdrv.sh: Stopping VirtualBox services.vboxdrv.sh: Starting VirtualBox services.vboxdrv.sh: Building VirtualBox kernel modules.This system is currently not set up to build kernel modules.Please install the Linux kernel "header" files matching the current kernelfor adding new hardware support to the system.The distribution packages containing the headers are probably: kernel-devel kernel-devel-3.10.0-957.el7.x86_64 상위와 같이 virtual box를 셋업 했을 경우 Please install the Linux kernel &quot;header&quot; files matching the current kernel 와 같은 글이 나오면 정상적인 셋업이 되지 않았다는 의미이다. virtual box에서 요청하는 커널 header는 sudo yum install &quot;kernel-devel-uname-r == $(uname -r)&quot; 를 사용해서 install이 가능한데, 어떤 경우는 devel header kernel이 없는 경우가 있다. (직접 빌드 했다던지...) [root@localhost yum.repos.d]# sudo yum install &quot;kernel-devel-uname-r == $(uname -r)&quot;Loaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: centos.mirror.moack.net * extras: centos.mirror.moack.net * updates: centos.mirror.moack.netResolving Dependencies--&gt; Running transaction check---&gt; Package kernel-devel.x86_64 0:3.10.0-957.el7 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================================================================================================================================================== Package Arch Version Repository Size==================================================================================================================================================================================================================Installing: kernel-devel x86_64 3.10.0-957.el7 base 17 MTransaction Summary==================================================================================================================================================================================================================Install 1 PackageTotal download size: 17 MInstalled size: 37 MIs this ok [y/d/N]: yDownloading packages:No Presto metadata available for basekernel-devel-3.10.0-957.el7.x86_64.rpm | 17 MB 00:00:01Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : kernel-devel-3.10.0-957.el7.x86_64 1/1 Verifying : kernel-devel-3.10.0-957.el7.x86_64 1/1Installed: kernel-devel.x86_64 0:3.10.0-957.el7Complete! [root@localhost yum.repos.d]# rcvboxdrv setupvboxdrv.sh: Stopping VirtualBox services.vboxdrv.sh: Starting VirtualBox services.vboxdrv.sh: Building VirtualBox kernel modules. 상위와 같이 작동 안되면 cent0S 새로 까는게 정신 건강에 좋다. Vagrant installvirtual box가 정상적으로 인스톨 완료 되었다면, vagrant를 install한다. yum -y install https://releases.hashicorp.com/vagrant/1.9.6/vagrant_1.9.6_x86_64.rpm 1.9.6버전은 virtual box 5.1버전까지만 호환 가능하고 6.0부터는 2.0 이상의 vagrant를 install 해야 한다. 하기는 1.x vagrant를 까는 것을 보여준다. (앞서 virtual box 6.x를 깔았음으로 실패 한다.) [root@localhost ~]# yum -y install https://releases.hashicorp.com/vagrant/1.9.6/vagrant_1.9.6_x86_64.rpmLoaded plugins: fastestmirror, langpacksvagrant_1.9.6_x86_64.rpm | 75 MB 00:00:11Examining /var/tmp/yum-root-4ytLB4/vagrant_1.9.6_x86_64.rpm: 1:vagrant-1.9.6-1.x86_64Marking /var/tmp/yum-root-4ytLB4/vagrant_1.9.6_x86_64.rpm to be installedResolving Dependencies--&gt; Running transaction check---&gt; Package vagrant.x86_64 1:1.9.6-1 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved=============================================================================================================================================================================================================================================================================== Package Arch Version Repository Size===============================================================================================================================================================================================================================================================================Installing: vagrant x86_64 1:1.9.6-1 /vagrant_1.9.6_x86_64 190 MTransaction Summary===============================================================================================================================================================================================================================================================================Install 1 PackageTotal size: 190 MInstalled size: 190 MDownloading packages:Running transaction checkRunning transaction testTransaction test succeededRunning transaction Installing : 1:vagrant-1.9.6-1.x86_64 1/1 Verifying : 1:vagrant-1.9.6-1.x86_64 1/1Installed: vagrant.x86_64 1:1.9.6-1Complete! Vagrant Startvagrant init vagrant up 으로 최초 vagrant가 잘 install 되었는지 확인 가능하지만 Provider를 설정해달라는 요청이 나오게 되는데 vagrant up --provider=virtualbox 와 같이 provider를 설정 해주면 된다. [root@localhost yum.repos.d]# cd ~[root@localhost ~]# lsanaconda-ks.cfg[root@localhost ~]# mkdir vagrant[root@localhost ~]# cd vagrant/[root@localhost vagrant]# ls[root@localhost vagrant]# vagrant initA `Vagrantfile` has been placed in this directory. You are nowready to `vagrant up` your first virtual environment! Please readthe comments in the Vagrantfile as well as documentation on`vagrantup.com` for more information on using Vagrant.[root@localhost vagrant]# vagrant upNo usable default provider could be found for your system.Vagrant relies on interactions with 3rd party systems, known as"providers", to provide Vagrant with resources to run developmentenvironments. Examples are VirtualBox, VMware, Hyper-V.The easiest solution to this message is to install VirtualBox, whichis available for free on all major platforms.If you believe you already have a provider available, make sure itis properly installed and configured. You can see more details aboutwhy a particular provider isn't working by forcing usage with`vagrant up --provider=PROVIDER`, which should give you a more specificerror message for that particular provider. centos/7이라는 box를 vagrant에 등록 해준다. 이때 default Provider를 선택하면 앞서 --provider= 옵션을 사용하지 않아도 된다. [root@localhost vagrant]# vagrant box add centos/7==&gt; box: Loading metadata for box 'centos/7' box: URL: https://vagrantcloud.com/centos/7This box can work with multiple providers! The providers that itcan work with are listed below. Please review the list and choosethe provider you will be working with.1) hyperv2) libvirt3) virtualbox4) vmware_desktopEnter your choice: 3==&gt; box: Adding box 'centos/7' (v1902.01) for provider: virtualbox box: Downloading: https://vagrantcloud.com/centos/boxes/7/versions/1902.01/providers/virtualbox.box==&gt; box: Successfully added box 'centos/7' (v1902.01) for 'virtualbox'! vagrant init 명령어를 사용할 경우 해당 명령어를 실행한 디렉토리에 Vagrantfile이 생성되는데, VM에 대한 설정을 할 수있다. 여기에서는 config.vm.box = &quot;centos/7&quot; 이 부분만 수정 함으로써 기본 OS가 centos 7 버전이라는 것을 알려주었다. # -*- mode: ruby -*-# vi: set ft=ruby :# All Vagrant configuration is done below. The "2" in Vagrant.configure# configures the configuration version (we support older styles for# backwards compatibility). Please don't change it unless you know what# you're doing.Vagrant.configure("2") do |config| # The most common configuration options are documented and commented below. # For a complete reference, please see the online documentation at # https://docs.vagrantup.com. # Every Vagrant development environment requires a box. You can search for # boxes at https://vagrantcloud.com/search. config.vm.box = "centos/7" 앞서서 vagrant를 1.x로 깔았음으로 아래와 같이 오류가 나온다. 4.0, 4.1, 4.2, 4.3, 5.0, 5.1 Virtual Box 5.1까지만 호환 한다는 의미이다. Vagrant를 1.x에서 2.x로 새로 install 하자. vagrant 삭제 [root@localhost vagrant]# rm -rf /opt/vagrant/[root@localhost vagrant]# rm -f /usr/bin/vagrant vagrant install [root@localhost vagrant]# sudo wget https://releases.hashicorp.com/vagrant/2.2.4/vagrant_2.2.4_x86_64.rp [root@localhost vagrant]# sudo yum localinstall vagrant_2.2.4_x86_64.rpm [root@localhost vagrant]# vagrant up --provider=virtualboxThe provider 'virtualbox' that was requested to back the machine'default' is reporting that it isn't usable on this system. Thereason is shown below:Vagrant has detected that you have a version of VirtualBox installedthat is not supported by this version of Vagrant. Please install one ofthe supported versions listed below to use Vagrant:4.0, 4.1, 4.2, 4.3, 5.0, 5.1A Vagrant update may also be available that adds support for the versionyou specified. Please check www.vagrantup.com/downloads.html to downloadthe latest version.[root@localhost vagrant]# yum update vagrantLoaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: centos.mirror.moack.net * extras: centos.mirror.moack.net * updates: centos.mirror.moack.netNo packages marked for update[root@localhost vagrant]# yum uninstall vagrantLoaded plugins: fastestmirror, langpacksNo such command: uninstall. Please use /usr/bin/yum --help[root@localhost vagrant]# rm -rf /opt/vagrant/[root@localhost vagrant]# rm -f /usr/bin/vagrant[root@localhost vagrant]# sudo wget https://releases.hashicorp.com/vagrant/2.2.4/vagrant_2.2.4_x86_64.rpm--2019-06-21 19:40:06-- https://releases.hashicorp.com/vagrant/2.2.4/vagrant_2.2.4_x86_64.rpmResolving releases.hashicorp.com (releases.hashicorp.com)... 151.101.229.183, 2a04:4e42:36::439Connecting to releases.hashicorp.com (releases.hashicorp.com)|151.101.229.183|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 40824607 (39M) [application/x-redhat-package-manager]Saving to: ‘vagrant_2.2.4_x86_64.rpm’100%[========================================================================================================================================================================&gt;] 40,824,607 9.96MB/s in 4.7s2019-06-21 19:40:12 (8.20 MB/s) - ‘vagrant_2.2.4_x86_64.rpm’ saved [40824607/40824607][root@localhost vagrant]# vagrant --versionbash: /usr/bin/vagrant: 그런 파일이나 디렉터리가 없습니다[root@localhost vagrant]# vagrnatbash: vagrnat: 명령을 찾을 수 없습니다...[root@localhost vagrant]# lsVagrantfile vagrant_2.2.4_x86_64.rpm[root@localhost vagrant]# sudo yum localinstall vagrant_2.2.4_x86_64.rpmLoaded plugins: fastestmirror, langpacksExamining vagrant_2.2.4_x86_64.rpm: 1:vagrant-2.2.4-1.x86_64Marking vagrant_2.2.4_x86_64.rpm as an update to 1:vagrant-1.9.6-1.x86_64Resolving Dependencies--&gt; Running transaction check---&gt; Package vagrant.x86_64 1:1.9.6-1 will be updated---&gt; Package vagrant.x86_64 1:2.2.4-1 will be an update--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================================================================================================================================================== Package Arch Version Repository Size==================================================================================================================================================================================================================Updating: vagrant x86_64 1:2.2.4-1 /vagrant_2.2.4_x86_64 110 MTransaction Summary==================================================================================================================================================================================================================Upgrade 1 PackageTotal size: 110 MIs this ok [y/d/N]: yDownloading packages:Running transaction checkRunning transaction testTransaction test succeededRunning transaction Updating : 1:vagrant-2.2.4-1.x86_64 1/2 Cleanup : 1:vagrant-1.9.6-1.x86_64 2/2경고: file /opt/vagrant/embedded/share/info/rluserman.info: remove failed: 그런 파일이나 디렉터리가 없습니다경고: file /opt/vagrant/embedded/share/info/readline.info: remove failed: 그런 파일이나 디렉터리가 없습니다경고: file /opt/vagrant/embedded/share/info/libffi.info: remove failed: 그런 파일이나 디렉터리가 없습니다 앞서 vagrant를 새롭게 install 하였고, 아래와 같이 centos/7을 init 해보자. vagrant init centos/7 vagrant up [root@localhost vagrant-centos-7]# vagrant init centos/7A `Vagrantfile` has been placed in this directory. You are nowready to `vagrant up` your first virtual environment! Please readthe comments in the Vagrantfile as well as documentation on`vagrantup.com` for more information on using Vagrant.[root@localhost vagrant-centos-7]# vagrant upBringing machine 'default' up with 'virtualbox' provider...==&gt; default: Importing base box 'centos/7'...==&gt; default: Matching MAC address for NAT networking...==&gt; default: Checking if box 'centos/7' version '1902.01' is up to date...==&gt; default: Setting the name of the VM: vagrant-centos-7_default_1561113935045_2937==&gt; default: Clearing any previously set network interfaces...==&gt; default: Preparing network interfaces based on configuration... default: Adapter 1: nat==&gt; default: Forwarding ports... default: 22 (guest) =&gt; 2222 (host) (adapter 1)==&gt; default: Booting VM...==&gt; default: Waiting for machine to boot. This may take a few minutes... default: SSH address: 127.0.0.1:2222 default: SSH username: vagrant default: SSH auth method: private key default: default: Vagrant insecure key detected. Vagrant will automatically replace default: this with a newly generated keypair for better security. default: default: Inserting generated public key within guest... default: Removing insecure key from the guest if it's present... default: Key inserted! Disconnecting and reconnecting using new SSH key...==&gt; default: Machine booted and ready!==&gt; default: Checking for guest additions in VM... default: No guest additions were detected on the base box for this VM! Guest default: additions are required for forwarded ports, shared folders, host only default: networking, and more. If SSH fails on this machine, please install default: the guest additions and repackage the box to continue. default: default: This is not an error message; everything may continue to work properly, default: in which case you may ignore this message.==&gt; default: Rsyncing folder: /root/vagrant-centos-7/ =&gt; /vagrant 상위와 같이 로그가 나왔다면, 성공적으로 virtual box, vagrant가 install 된것이다. vagrant ssh로 접속까지 된다면 완료 이다. vagrant ssh [devops@localhost ~]$ vagrant ssh[vagrant@localhost ~]$ ls[vagrant@localhost ~]$ pwd/home/vagrant[vagrant@localhost ~]$]]></content>
      <tags>
        <tag>centos</tag>
        <tag>virtual box</tag>
        <tag>vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Network setup CentOS7 on Virtual Box]]></title>
    <url>%2FNetwork-setup-CentOS7-on-Virtual%20Box%2F</url>
    <content type="text"><![CDATA[ifconfiglinux network 설정을 확인 할 수 있는 명령어이나 centos7에서 삭제 되었다. ip addr 로 변경되었다. ip addrip addr을 실행 하면 다음과 같이 NIC 정보를 확인 할 수 있다. 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 08:00:27:6f:d9:08 brd ff:ff:ff:ff:ff:ff 여기서 enpOs3이 해당 NIC 이름이다. 해당 NIC에 대한 설정을 확인 하기 위해서 다음 path로 이동한다. /etc/sysconfig/network-scripts 해당 디렉토리를 보면 [root@localhost network-scripts]# lsifcfg-enp0s3 ifdown-bnep ifdown-ipv6 ifdown-ppp ifdown-Team ifup ifup-eth ifup-isdn ifup-post ifup-sit ifup-tunnel network-functionsifcfg-lo ifdown-eth ifdown-isdn ifdown-routes ifdown-TeamPort ifup-aliases ifup-ippp ifup-plip ifup-ppp ifup-Team ifup-wireless network-functions-ipv6ifdown ifdown-ippp ifdown-post ifdown-sit ifdown-tunnel ifup-bnep ifup-ipv6 ifup-plusb ifup-routes ifup-TeamPort init.ipv6-global ifcfg-enp0s3과 같이 NIC 명으로 된 config 파일을 확인 할 수 있다. TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=dhcpDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=enp0s3UUID=a0377aa0-2efa-48a1-91eb-5a547c6d3b43DEVICE=enp0s3ONBOOT=yes 해당 파일 마지막 부분을 ONBOOT=yes로 변경 한후 다음 명령어를 실행하면 ip를 얻어 올 수 있다. [root@localhost network-scripts]# dhclient 아래와 같이 ip를 얻어 오면 된다. [root@localhost network-scripts]# ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 08:00:27:6f:d9:08 brd ff:ff:ff:ff:ff:ff inet 192.168.0.14/24 brd 192.168.0.255 scope global dynamic enp0s3 valid_lft 4486sec preferred_lft 4486sec inet6 fe80::6940:5b2a:23b9:cafd/64 scope link noprefixroute valid_lft forever preferred_lft forever dhcp의 경우 본체 컴퓨터 ip와는 독립적인 ip를 새롭게 발행 하게 된다. 192.168.0.12 A4-70-C8-99-8A-12 DESKTOP 무선:자동할당 // 본체 컴퓨터192.168.0.14 A4-70-C8-99-8A-12 무선:자동할당 // virtual box centos Virtual Box Network 어댑터 설정네트워크 어댑터 사용하기 : check 다음에 연결됨 : 어댑터에 브리지 이름 : 사용하고자 하는 실 컴퓨터 NIC (wifi device라던가 이더넷 등) yum update네트워크가 정상적으로 설정되었다면, 상위 명령어를 실행 했을 시 정상적으로 update가 진행 되거나 또는 update할 것이 없다는 내용을 확인 할 수 있다. [root@localhost network-scripts]# yum updateLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * base: data.aonenetworks.kr * extras: data.aonenetworks.kr * updates: data.aonenetworks.krNo packages marked for update]]></content>
      <tags>
        <tag>VirtualBox</tag>
        <tag>CentOS</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis Config Explain]]></title>
    <url>%2Fredis-config-explain%2F</url>
    <content type="text"><![CDATA[Redis Config Sectionredis-cli를 통해서 redis console에 진입 할 경우 info명령어를 통해서 다음 section에 대한 정보를 획득 할 수있다. info &lt;&lt;아래 명령어&gt;&gt; server : 기본 정보 clients : client의 접속 정보 memory : 메모리 사용 관련 정보 persistence : RDB와 AOF(Append Only File) 관련 정보 AOF의 경우는 appendonly.aof 파일에 입력/수정/삭제 실행 명령 실행시 마다 기록 (조회 제외) Redis 서버 작동시 FLUSHALL명령을 사용한 경우 해당 파일을 이용해서 DB를 재 구축 할 수 있음 http://redisgate.kr/redis/configuration/persistence.php RDB의 경우에는 현재 메모리에 있는 redis data를 특정 시점을 기준으로 파일로 write 한 일종의 backup 파일 또는 스냅샷으로 생각 하면 된다. stats : 일반 통계 정보 replication : Master, Slave간에 데이터 복사에 대한 설정 cpu : cpu 사용 통계 commandstats : redis에 command를 처리한 통계 cluster : redis cluster에 대한 설정 (master, slave 등) keyspace : database 관련 통계 serverredis_version : redis 서버 버전redis_git_sha1 : git sha1 (?)redis_git_dirty : git dirty flag (?)redis_build_id소스로 부터 redis를 빌드한 id redis_modestandalone : 독립적으로 동작 sentinel : sentinel에 의해 모니터링 되고 관리됨 cluster : redis간 clustering 처리 osarch_bits32bits or 64bits multiplexing_api (?)evnet loop 메카니즘 process_id서버 PID tcp_portTCP/IP 리슨포트 (6379 기본 포트) uptime_in_secondsredis server 작동 후 시간 uptime_in_daysredis server 작동 후 일자 lru_clockLRU 알고리즘을 위한 시간 (매분 마다 증가함) Least Recently Used 가장 오랫동안 접근 되지 않은 키의 데이터를 삭제한다는 의미 excutable실행 파일 위치 config_file환경 설정 파일 위치 clientsconnected_clients현재 접속 되어 있는 clients 개수 (replicas를 통한 접근 제외) client_longest_output_list현재 접속되어 있는 clients 중에 가장 오래 output(? 가장 오래 접속 하고 있는 의미로 보임)하고 있는 list client_biggest_input_buf현재 접속되어있는 clients 중에 가장 큰 input buffer를 넣고 있는 connection blocked_clientsblocking call(BLPOP, BRPOP, BRPOPLPUSH)에 의해 blocked 되어있는 client 개수 BLPOP(리스트의 처음), BRPOP(리스트의 마지막),BRPOPLPUSH (원본 마지막으로 대상 리스트의 첫번째로 입력) 명령어의 경우 기본적으로 blocking 모드 작동을 한다. 즉, 해당 command가 작동 중에는 다음 command는 blocking 되게 된다. memoryused_memoryredis가 사용중인 총 메모리양 used_memory_human사람이 읽을 수있는 메모리양 표시 (G로 표시한다) used_memory_rssOS상에서 사용중인 메모리양 일반적으로 해당 솔루션에서 사용된 메모리양 + shared 메모리양의 총합으로 used memory 보다 크다 used_memory_rss_human사람이 읽을 수 있는 메모리양 표시 (G로 표시한다) used_memory_peak바이트 단위로 메모리가 peak에 있을 때 사용량 used_memory_peak_percused_memory 대비 used_memory의 퍼센트 (peak이 더 높다) used_memory_overhead모든 overheads에 대한 바이트 합 used_memory_startupredis가 start하는 시점에 사용된 전체 메모리양 used_memory_datasetdataset의 바이트 단위 사이즈 maxmemory설정된 최대 메모리 32bit의 경우는 3G 64bit의 경우는 0 (unlimit로 처리 되는 것으로 보임) maxmemory_policy noeviction : memory의 limit에 접근하면 에러를 낸다 allkeys-lru : 신규 데이터 입력시 key를 기반으로 LRU 알고리즘 적용 volatile-lru : allkeys-lru와 같은 조건이나, expire set이 있는 경우만 대상으로 함 EXPIRE (https://redis.io/commands/expire) 명령어로 지정된 key를 대상으로만 하는 것으로 보임 allkeys-random : random으로 삭제(진짜?) volatile-random : expire set이 있는 경우만 random으로 삭제 volatile-ttl : expire set의 ttl을 확인 후 최우선으로 삭제 https://redis.io/topics/lru-cache persistenceloadingdump 파일이 로딩 중인지 표시 한다 (평소에는 0이다가 로딩하게 되면 1로 변화하는 것으로 보인다) rdb_changes_since_last_save마지막 dump 후 변경된 횟수 rdb_last_save_timeepoch 기준으로 마지막 성공한 저장 시점 aof_enabledaof 설정 여부 (0 false) replicationrolemaster or slave master_replidredis server replication ID master_repl_offset현재 서버의 replication offset Redis Sentinel 사용시 수시 Disconnect가 발생하는 경우sentinel down-after-milliseconds mymaster 3000설정을 확인한다. 상위에서 마지막 부분에 있는 3000은 3초를 의미 한다. 이를 매우 작게 사용한다면 Redis간 Sync시 Disconnect를 감지하고 Master Slave 전환을 처리 하게 된다. 일반적으로 3초에서 5초 사이로 설정해 놓고 쓰면된다. Reids Sync 처리 프로세스를 실행하기 전에 Master에서 BGSAVE처리를 하게 된다. BGSAVE는 메모리 데이터를 파일로 Write하는 행동인데, 이때 Redis 소스 내부적으로 Slave와 Disconnect를 처리 한다. 이 순간의 단절 상황을 Sentinel에서 감지하게 되는 문제이다. client-output-buffer-limitclient-output-buffer-limit normal 0 0 0client-output-buffer-limit slave 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60 Redis와 Slave 간의 데이터 이동 양을 정하는 부분이다 client-output-buffer-limit slave 256mb 64mb 60 hard : 최대 256mb의 데이터를 송수신 할 수 있다. 넘어가면 Disconnect가 발생한다. Soft : 64mb 데이터를 60초 동안 이동 시킨다. 넘어가면 Disconnect가 발생한다.]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>Config</tag>
        <tag>Sentinel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android keyboard show on the web]]></title>
    <url>%2FAndroid-Webview-Keyboard-Process-With-IME%2F</url>
    <content type="text"><![CDATA[Android에서 Keyboard 작동을 위한 요소 Input Method Manager : 클라이언트 Side의 application context에 위치 하면서 Android 전체 시스템 상 프로세스 간의 통로 역할을 한다 Input Method (IME &amp; Keyboard) : 쉽게 keyboard라고 생각하면 된다. 사용자의 text를 생성하고 입력할 수있게 하는 역할을 한다. IME는 오직 한번에 하나만 화면에 표시 될 수있다. Client Application : IME을 사용하는 대상 application이 되며, 한번에 오직 하나의 입력 화면(소스를 보면 View라고 생각된다)과 Active 상태를 유지 할 수있다. InputMethd Framework (IMF) 의 보안적 제한Input Method의 경우 사용자의 모든 입력을 확인 할 수있기 때문에, 보안적인 제한이 걸려있다. IME interface 접근 : 오직 Manifest.permission.BIND_INPUT_METHOD 권한을 통해서만 접근 가능 Clinet는 Input method를 사용할때 InputMethodSession 인터페이스에서 주어진 Access를 통해서만 가능하다. 아래 코드는 InputMethodManager의 코드 일부분이다 이때 windowToken을 통해 hide 시킬 권한을 얻어오는 것을 볼 수있다 public boolean hideSoftInputFromWindow(IBinder windowToken, int flags) &#123; return hideSoftInputFromWindow(windowToken, flags, null); &#125; Input Method는 화면이 off 되어있는 상태에서 절대로 사용될 수 없다. 신규 IME를 인스톨 할경우 IME의 변환은 반듯이 사용자의 손에 의해서 만 변경 될 수있다. IME의 Lifecycle이하 Lifecycle은 InputMethodService : https://developer.android.com/reference/android/inputmethodservice/InputMethodService가 작동하는 순서를 나타내고 있다 onCreateInputView() : 사용자 입력을 받기 위해 View를 init한다. (여기서 init되는 화면은 단순히 softkey 뿐만이 아닌 Draw 입력 등도 포함된다) User interface의 생성이라고 생각하면 될 듯 하다. 아래 코드는 IMS를 Override하여 어떻게 UI를 생성하는지 보여주는 예이다. public View onCreateInputView() &#123; if (mKeyboardView != null) &#123; mKeyboardView.closing(); &#125; updateKeyboardThemeAndContextThemeWrapper( mLatinIME, KeyboardTheme.getKeyboardTheme(mLatinIME /* context */)); mCurrentInputView = (InputView)LayoutInflater.from(mThemeContext).inflate( R.layout.input_view, null); mMainKeyboardFrame = mCurrentInputView.findViewById(R.id.main_keyboard_frame); mKeyboardView = (MainKeyboardView) mCurrentInputView.findViewById(R.id.keyboard_view); mKeyboardView.setKeyboardActionListener(mLatinIME); return mCurrentInputView;&#125; onEvaluateInputViewShown() : hard keyboard 등이 달려 있는 단말의 경우 soft keyboard가 보일 필요가 없다. 이와같이 keyboard를 사용자에게 보여줄지를 확인 하는 메서드이다. (물론 softkeyboard가 열려 있다면 return 은 true가 될 것이다)아래는 IMS의 code이다. false가 return 되면 사용자에게 보여주면 된다. public boolean onEvaluateInputViewShown() &#123; if (mSettingsObserver == null) &#123; Log.w(TAG, "onEvaluateInputViewShown: mSettingsObserver must not be null here."); return false; &#125; if (mSettingsObserver.shouldShowImeWithHardKeyboard()) &#123; return true; &#125; Configuration config = getResources().getConfiguration(); return config.keyboard == Configuration.KEYBOARD_NOKEYS || config.hardKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_YES;&#125; onStartInput() &amp; onStartInputView() : text 입력의 시작을 알리는 부분으로, 해당 메서드의 call 순서는 onStartInput이 일어나고 그다음에 onStartInputView가 Call되게 된다. 해당 Call의 순서처리에 따라서 lifecycle이 다소 달라지는데 해당 내용은 &quot;Webview에서의 Keyboard 처리&quot;에서 상세하게 다룰것이다. IMS에서는 doStartInput이 발생할 경우 onStartInput을 요청하고 이후에 InputView를 call하는 것을 확인 할 수 있다. void doStartInput(InputConnection ic, EditorInfo attribute, boolean restarting) &#123; if (!restarting) &#123; doFinishInput(); &#125; mInputStarted = true; mStartedInputConnection = ic; mInputEditorInfo = attribute; initialize(); if (DEBUG) Log.v(TAG, "CALL: onStartInput"); onStartInput(attribute, restarting); if (mWindowVisible) &#123; if (mShowInputRequested) &#123; if (DEBUG) Log.v(TAG, "CALL: onStartInputView"); mInputViewStarted = true; onStartInputView(mInputEditorInfo, restarting); startExtractingText(true); &#125; else if (mCandidatesVisibility == View.VISIBLE) &#123; if (DEBUG) Log.v(TAG, "CALL: onStartCandidatesView"); mCandidatesViewStarted = true; onStartCandidatesView(mInputEditorInfo, restarting); &#125; &#125;&#125; onStartInput과 onStartInputView의 차이점을 문서 상으로 확인하기는 쉽지 않다. 코드상으로 보면 onStartInput의 경우는 Local과 같은 설정, onStartInputView는 실제로 보여줄 keyboard에 대한 모든 설정을 처리 하는 것으로 보인다. Webview에서의 Keyboard 처리Webview를 이용한 키보드 처리는 크게 3가지로 나눌 수 있다. Webview에서 load된 html의 input 입력시 자동으로 IME Show Webview의 public InputConnection onCreateInputConnection(EditorInfo outAttrs) {을 Override 시켜서 특정 키보드 환경을 지정 showSoftInput을 활용 하는 방법 onCreateInputConnection() Overrideandroid.webkit.Webview 객체를 override 하면 된다. package com.example.app;...public class BaseWebView extends WebView &#123;... @Override public InputConnection onCreateInputConnection(EditorInfo outAttrs) &#123; InputConnection ic = super.onCreateInputConnection(outAttrs); int original = outAttrs.imeOptions; int notMask = ~EditorInfo.IME_MASK_ACTION; int maskResult = original &amp; notMask; if((outAttrs.inputType &amp; EditorInfo.TYPE_MASK_CLASS) == EditorInfo.TYPE_CLASS_NUMBER)&#123; Log.d(TAG,"IME Options is Number"); outAttrs.privateImeOptions="defaultInputmode=numeric;"; &#125; else &#123; Log.d(TAG,"IME Options is English"); outAttrs.privateImeOptions="defaultInputmode=english;"; &#125; return ic; &#125; InputConnection ic = super.onCreateInputConnection(outAttrs);이 부분은 반듯이 첫번째 code로 와야 한다. 해당 코드가 최초로 오지 않게 되면 load된 html이 어떤 input tag를 focus하고 있는지 알 수가 없게 된다. 이 코드를 통과 하고 나야 비로소 EditorInfo에 의미 있는 값들이 저장되게 된다. 이때 개발자가 확인 가능한 값은 2가지가 있는데 imeOptions와 inputType인데 imeOptions는 IME가 어떤 형태로 표현될지 어떤 기능을 제공할지에 대한 표현을 제공한다. 해당 값에 대한 표현 방법은 EditorInfo.IME_MASK_ACTION을 기준으로 Action 처리와 FLAG 처리로 분리 된다. Action : GO, NEXT, NONE, PREVIOUS, SEARCH, SEND 등 엔터 버튼에 대한 기능을 정의하게 된다. Flag : ASCII, NAVIGATE,ACCESSORY,NO_ENTER,EXTRACT, FULLSCREEN 등 키보드의 형태를 나타낸다 상위 값들에 대한 정확한 OPTION은 다음 페이지를 참조 해야하나, 실질적으로 해당 Options을 모두 적용한 IME가 많지는 않다. 일단 해당 값들에 대한 마스킹 방법은 다음과 같이 처리 하면된다. FLAG 값을 읽어 올 수있는 방법 (Webview를 이용해서는 해당 옵션을 얻어 올수 없었다.) 비록 html style에 ime-mode가 있다고는 하지만 이와는 관련점이 없었다 int original = outAttrs.imeOptions;int notMask = ~EditorInfo.IME_MASK_ACTION;int flag = original &amp; notMask; ime-mode는 크롬등에서 호환되지 않고, deprecated 된 기능이다 Action 값을 읽어 올수 있는 방법 (역시 Webview에서는 의미 있는데이터를 얻어 올 수 없었다) int action = original &amp; EditorInfo.IME_MASK_ACTION; 결과적으로 이시점에 개발자가 처리 할 수있는 값은 inputType이다. 해당 값은 다음과 같은 코드로 읽어 올 수있다. int inputType = outAttrs.inputType &amp; EditorInfo.TYPE_MASK_CLASS MASK로 얻어올수 있는 값은 text, number, phone, datetime 정도이고 webview에서 의미 있는 값은 text와 number 정도가 될 것이다. TYPE_CLASS_TEXT, TYPE_CLASS_NUMBER, TYPE_CLASS_PHONE, TYPE_CLASS_DATETIME 아래 코드는 inputType을 바탕으로 어떤 keyboard를 표현 하게 할지 나타내는 코드이다. if((outAttrs.inputType &amp; EditorInfo.TYPE_MASK_CLASS) == EditorInfo.TYPE_CLASS_NUMBER) &#123; Log.d(TAG,&quot;IME Options is Number&quot;); ...&#125; else &#123; Log.d(TAG,&quot;IME Options is English&quot;); ...&#125; 그러나 상위와 같은 코드는 아주 특별한 경우를 제외하고는 사용하지 않는다. 그 이유는 어떤 종류의 keyboard를 보여 줄지를 정의 하는건 IME의 onStartInputView내부에서 처리가 될것이기 때문이다. 일반적으로 onCreateInputConnection을 사용하는 이유는 IME로 넘어 가기전에 EditorInfo를 수정하기 위해서이다. 예를 들자면 outAttrs.inputType에 EditorInfo.TYPE_CLASS_NUMBER를 주입하게 되면 해당 webview를 사용한 html은 number type의 키보드만 보게 되는 것이다. InputMethodManager를 이용한 showSoftInput처리InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);imm.showSoftInput(mWebView, 0); InputMethodManager를 시스템 서비스에서 직점 instance를 얻어와서 특정 view (여기서는 mWebView)와 IME를 연결시키는 코드이다. 해당 코드는 Webview상 어떤 html element와 access를 해야할지 알기가 어렵기 때문에 어떤 keyboard를 강제로 뛰울 수가 없다. 비록 Webview를 상속 받아서 onCreateInputConnection()을 재정의 한다고 하더라도 이경우에는 해당 Method를 타지 않는다. 그렇기 때문에 EditorInfo 역시 추출 할 수가 없는 상태가 된다. 이렇다 보니 무조건 default keyboard만 나타나게 되는데, 이 부분을 해결 하는 방법은 webview에 inputType을 추가 해주는 것이다. public class BaseWebView extends WebView &#123; int inputType = EditorInfo.TYPE_NULL; public void setInputType(int type) &#123; inputType = type; &#125; public int getInputType() &#123; return inputType; &#125; 그리고 해당 내용을 아래와 같이 추가해 준다. InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);mWebView.setInputType(InputType.TYPE_CLASS_NUMBER);imm.showSoftInput(mWebView, 0); onStartInputView에서 inputType을 확인 한 후 number keyboard를 보여 주게 될것이다. imeOptions나 다른 파라메터들은 상위와 같이 강제 Setting을 해도 keyboard에 별다를 영향을 주지 못했다. Keyboard 처리에 대한 IME Call Flow사실 상위 두 가지의 Call Flow가 다를 거라고 크게 생각하지 못했으나 의외로 전혀 다른 process를 타고 있었다. 아래는 https://github.com/rkkr/simple-keyboard의 소스에 Log를 붙여서 어떤 flow를 trace한 표이다. html에서 input tag를 눌러서 keyboard 표시 했을 때//input을 이용한 show05-24 09:53:41.362 13828 13828 D LatinIME: onStartInput = 24578: rkr.simplekeyboard.inputmethod05-24 09:53:41.362 13828 13828 D LatinIME: onStartInput editorInfo.inputyType 24578: rkr.simplekeyboard.inputmethod05-24 09:53:41.363 13828 13828 D LatinIME: executePendingImsCallback editorInfo.inputyType 24578: rkr.simplekeyboard.inputmethod05-24 09:53:41.363 13828 13828 D LatinIME: onStartInputInternal editorInfo inputType24578: rkr.simplekeyboard.inputmethod05-24 09:53:41.364 13828 13828 D LatinIME: onShowInputRequested: rkr.simplekeyboard.inputmethod05-24 09:53:41.364 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod05-24 09:53:41.364 13828 13828 D LatinIME: onEvaluateFullscreenMode: rkr.simplekeyboard.inputmethod05-24 09:53:41.364 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod05-24 09:53:41.371 13828 13828 D LatinIME: updateFullscreenMode: rkr.simplekeyboard.inputmethod05-24 09:53:41.371 13828 13828 D LatinIME: updateSoftInputWindowLayoutParameters: rkr.simplekeyboard.inputmethod05-24 09:53:41.375 13828 13828 D LatinIME: onStartInputView: rkr.simplekeyboard.inputmethod05-24 09:53:41.376 13828 13828 D LatinIME: executePendingImsCallback editorInfo.inputyType 24578: rkr.simplekeyboard.inputmethod05-24 09:53:41.395 13828 13828 I LatinIME: Starting input. Cursor position = 1,1: rkr.simplekeyboard.inputmethod05-24 09:53:41.395 13828 13828 D LatinIME: onEvaluateFullscreenMode: rkr.simplekeyboard.inputmethod05-24 09:53:41.395 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod05-24 09:53:41.395 13828 13828 D LatinIME: updateFullscreenMode: rkr.simplekeyboard.inputmethod05-24 09:53:41.395 13828 13828 D LatinIME: updateSoftInputWindowLayoutParameters: rkr.simplekeyboard.inputmethod05-24 09:53:41.396 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod05-24 09:53:41.411 13828 13828 D LatinIME: loadSettings: rkr.simplekeyboard.inputmethod05-24 09:53:41.422 13828 13828 D LatinIME: getCurrentAutoCapsState: rkr.simplekeyboard.inputmethod05-24 09:53:41.422 13828 13828 D LatinIME: getCurrentRecapitalizeState: rkr.simplekeyboard.inputmethod05-24 09:53:41.426 13828 13828 D LatinIME: shouldShowLanguageSwitchKey: rkr.simplekeyboard.inputmethod05-24 09:53:41.487 13828 13828 D LatinIME: onComputeInsets: rkr.simplekeyboard.inputmethod05-24 09:53:41.487 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod05-24 09:53:41.498 13828 13828 D LatinIME: onComputeInsets: rkr.simplekeyboard.inputmethod05-24 09:53:41.498 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod//input hide05-24 09:54:38.197 13828 13828 D LatinIME: hideWindow: rkr.simplekeyboard.inputmethod05-24 09:54:38.197 13828 13828 D LatinIME: isShowingOptionDialog: rkr.simplekeyboard.inputmethod05-24 09:54:38.197 13828 13828 D LatinIME: onFinishInputView: rkr.simplekeyboard.inputmethod05-24 09:54:38.197 13828 13828 D LatinIME: onFinishInputViewInternal: rkr.simplekeyboard.inputmethod05-24 09:54:38.200 13828 13828 D LatinIME: onWindowHidden: rkr.simplekeyboard.inputmethod05-24 09:54:38.202 13828 13828 D LatinIME: updateFullscreenMode: rkr.simplekeyboard.inputmethod05-24 09:54:38.202 13828 13828 D LatinIME: updateSoftInputWindowLayoutParameters: rkr.simplekeyboard.inputmethod05-24 09:54:38.230 13828 13828 D LatinIME: onComputeInsets: rkr.simplekeyboard.inputmethod05-24 09:54:38.230 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod showSoftInput을 처리 했을 때//keyboard show05-24 09:48:48.369 13828 13828 D LatinIME: onShowInputRequested: rkr.simplekeyboard.inputmethod05-24 09:48:48.369 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod05-24 09:48:48.369 13828 13828 D LatinIME: onEvaluateFullscreenMode: rkr.simplekeyboard.inputmethod05-24 09:48:48.369 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod05-24 09:48:48.370 13828 13828 D LatinIME: updateFullscreenMode: rkr.simplekeyboard.inputmethod05-24 09:48:48.370 13828 13828 D LatinIME: updateSoftInputWindowLayoutParameters: rkr.simplekeyboard.inputmethod05-24 09:48:48.371 13828 13828 D LatinIME: onStartInputView: rkr.simplekeyboard.inputmethod05-24 09:48:48.372 13828 13828 D LatinIME: executePendingImsCallback editorInfo.inputyType 49313: rkr.simplekeyboard.inputmethod05-24 09:48:48.382 13828 13828 I LatinIME: Starting input. Cursor position = 0,0: rkr.simplekeyboard.inputmethod05-24 09:48:48.382 13828 13828 D LatinIME: onEvaluateFullscreenMode: rkr.simplekeyboard.inputmethod05-24 09:48:48.382 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod05-24 09:48:48.383 13828 13828 D LatinIME: updateFullscreenMode: rkr.simplekeyboard.inputmethod05-24 09:48:48.383 13828 13828 D LatinIME: updateSoftInputWindowLayoutParameters: rkr.simplekeyboard.inputmethod05-24 09:48:48.383 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod05-24 09:48:48.395 13828 13828 D LatinIME: loadSettings: rkr.simplekeyboard.inputmethod05-24 09:48:48.402 13828 13828 D LatinIME: getCurrentAutoCapsState: rkr.simplekeyboard.inputmethod05-24 09:48:48.402 13828 13828 D LatinIME: getCurrentRecapitalizeState: rkr.simplekeyboard.inputmethod05-24 09:48:48.404 13828 13828 D LatinIME: shouldShowLanguageSwitchKey: rkr.simplekeyboard.inputmethod05-24 09:48:48.440 13828 13828 D LatinIME: onComputeInsets: rkr.simplekeyboard.inputmethod05-24 09:48:48.440 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod05-24 09:48:48.452 13828 13828 D LatinIME: onComputeInsets: rkr.simplekeyboard.inputmethod05-24 09:48:48.452 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod//keyboard hide05-24 09:52:19.722 13828 13828 D LatinIME: hideWindow: rkr.simplekeyboard.inputmethod05-24 09:52:19.723 13828 13828 D LatinIME: isShowingOptionDialog: rkr.simplekeyboard.inputmethod05-24 09:52:19.723 13828 13828 D LatinIME: onFinishInputView: rkr.simplekeyboard.inputmethod05-24 09:52:19.723 13828 13828 D LatinIME: onFinishInputViewInternal: rkr.simplekeyboard.inputmethod05-24 09:52:19.725 13828 13828 D LatinIME: onWindowHidden: rkr.simplekeyboard.inputmethod05-24 09:52:19.728 13828 13828 D LatinIME: updateFullscreenMode: rkr.simplekeyboard.inputmethod05-24 09:52:19.728 13828 13828 D LatinIME: updateSoftInputWindowLayoutParameters: rkr.simplekeyboard.inputmethod05-24 09:52:19.748 13828 13828 D LatinIME: onComputeInsets: rkr.simplekeyboard.inputmethod05-24 09:52:19.748 13828 13828 D LatinIME: isImeSuppressedByHardwareKeyboard: rkr.simplekeyboard.inputmethod]]></content>
      <tags>
        <tag>Android</tag>
        <tag>keyboard</tag>
        <tag>IME</tag>
        <tag>InputMethod Framework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android Grafika Texture Surface]]></title>
    <url>%2Fgrafika%2F</url>
    <content type="text"><![CDATA[테스트 mp4파일 받기com.android.grafika public static void initialize(Context context) &#123; ContentManager mgr = getInstance(); synchronized (sLock) &#123; if (!mgr.mInitialized) &#123;+ mgr.mFilesDir = context.getExternalFilesDir(Environment.DIRECTORY_MOVIES);- // mgr.mFilesDir = context.getFilesDir(); mgr.mContent = new ArrayList&lt;Content&gt;(); mgr.mInitialized = true; &#125; &#125; &#125; app 인터널 storage를 external로 변경 앱 재실행 후 파일 다운로드 표시 끝나면 android file explore를 이용해서 sdcard&gt; Android &gt; data &gt; com.google.grafica &gt; files &gt; Movies 이하를 조회하면, gen-eight-rects.mp4 gen-sliders.mp4 파일 확인 가능함 MediaFormat비디오 파일(예, mp4)등의 header를 분석한 결과 MediaExtractor를 통해서 정보를 추출할 수 있음 아래 소스는 android app 내의 res&gt;raw 이하에 비디오나 오디오 파일을 위치 시켰을 때 uri 방식으로 수신 할 수 있는 코드이다. 관련 수정사항은 extractor.setDataSource(ctx,uri,null); 이 부분 전후를 보면 된다. 해당 메서드를 요청하는 방법은 Activity에서 아래와 같이 call 하면 된다 player = new MoviePlayer(getApplicationContext(), Uri.parse(&quot;android.resource://&quot;+getPackageName()+&quot;/raw/gen_eight_rects&quot;), surface, callback); MoviePlayer.java public MoviePlayer(Context ctx, Uri uri, Surface outputSurface, FrameCallback frameCallback) throws IOException &#123; mContext = ctx; mUri = uri;// mSourceFile = sourceFile; mOutputSurface = outputSurface; mFrameCallback = frameCallback; // Pop the file open and pull out the video characteristics. // TODO: consider leaving the extractor open. Should be able to just seek back to // the start after each iteration of play. Need to rearrange the API a bit -- // currently play() is taking an all-in-one open+work+release approach. MediaExtractor extractor = null; try &#123; extractor = new MediaExtractor(); extractor.setDataSource(ctx,uri,null); int trackIndex = selectTrack(extractor); if (trackIndex &lt; 0) &#123; throw new RuntimeException("No video track found in " + mSourceFile); &#125; extractor.selectTrack(trackIndex); MediaFormat format = extractor.getTrackFormat(trackIndex); mVideoWidth = format.getInteger(MediaFormat.KEY_WIDTH); mVideoHeight = format.getInteger(MediaFormat.KEY_HEIGHT); if (VERBOSE) &#123; Log.d(TAG, "Video size is " + mVideoWidth + "x" + mVideoHeight); &#125; &#125; finally &#123; if (extractor != null) &#123; extractor.release(); &#125; &#125; &#125; /** * Returns the width, in pixels, of the video. */ public int getVideoWidth() &#123; return mVideoWidth; &#125; /** * Returns the height, in pixels, of the video. */ public int getVideoHeight() &#123; return mVideoHeight; &#125; /** * Sets the loop mode. If true, playback will loop forever. */ public void setLoopMode(boolean loopMode) &#123; mLoop = loopMode; &#125; /** * Asks the player to stop. Returns without waiting for playback to halt. * &lt;p&gt; * Called from arbitrary thread. */ public void requestStop() &#123; mIsStopRequested = true; &#125; /** * Decodes the video stream, sending frames to the surface. * &lt;p&gt; * Does not return until video playback is complete, or we get a "stop" signal from * frameCallback. */ public void play() throws IOException &#123; MediaExtractor extractor = null; MediaCodec decoder = null; boolean fileBased = true; // The MediaExtractor error messages aren't very useful. Check to see if the input // file exists so we can throw a better one if it's not there. if (mSourceFile != null &amp;&amp; !mSourceFile.canRead()) &#123; throw new FileNotFoundException("Unable to read " + mSourceFile); &#125; else &#123; fileBased = false; &#125; try &#123; extractor = new MediaExtractor();// extractor.setDataSource(mSourceFile.toString()); extractor.setDataSource(mContext,mUri,null); int trackIndex = selectTrack(extractor); if (trackIndex &lt; 0) &#123; throw new RuntimeException("No video track found in " + mSourceFile); &#125; extractor.selectTrack(trackIndex); MediaFormat format = extractor.getTrackFormat(trackIndex); // Create a MediaCodec decoder, and configure it with the MediaFormat from the // extractor. It's very important to use the format from the extractor because // it contains a copy of the CSD-0/CSD-1 codec-specific data chunks. String mime = format.getString(MediaFormat.KEY_MIME); decoder = MediaCodec.createDecoderByType(mime); decoder.configure(format, mOutputSurface, null, 0); decoder.start(); doExtract(extractor, trackIndex, decoder, mFrameCallback); &#125; finally &#123; // release everything we grabbed if (decoder != null) &#123; decoder.stop(); decoder.release(); decoder = null; &#125; if (extractor != null) &#123; extractor.release(); extractor = null; &#125; &#125; &#125; MediaFormat format = extractor.getTrackFormat(trackIndex);이 부분이 track 으로 부터 Media의 정보를 얻어오는 부분이다. Audio / Video 공통 포멧 정보 Name Value Type Description KEY_MIME String The type of the format. KEY_MAX_INPUT_SIZE Integer optional, maximum size of a buffer of input data KEY_BIT_RATE Integer encoder-only, desired bitrate in bits/second Video 포멧 정보 Name Value Type Description KEY_WIDTH Integer KEY_HEIGHT Integer KEY_COLOR_FORMAT Integer set by the user for encoders, readable in the output format of decoders KEY_FRAME_RATE Integer or Float required for encoders, optional for decoders KEY_CAPTURE_RATE Integer KEY_I_FRAME_INTERVAL Integer (or Float) encoder-only, time-interval between key frames. Float support added in Build.VERSION_CODES.N_MR1 KEY_INTRA_REFRESH_PERIOD Integer encoder-only, optional KEY_LATENCY Integer encoder-only, optional KEY_MAX_WIDTH Integer decoder-only, optional, max-resolution width KEY_MAX_HEIGHT Integer decoder-only, optional, max-resolution height KEY_REPEAT_PREVIOUS_FRAME_AFTER Long encoder in surface-mode only, optional KEY_PUSH_BLANK_BUFFERS_ON_STOP Integer(1) decoder rendering to a surface only, optional KEY_TEMPORAL_LAYERING String encoder only, optional, temporal-layering schema 오디오 포멧정보 Name Value Type Description KEY_CHANNEL_COUNT Integer KEY_SAMPLE_RATE Integer KEY_PCM_ENCODING Integer optional KEY_IS_ADTS Integer optional, if decoding AAC audio content, setting this key to 1 indicates that each audio frame is prefixed by the ADTS header. KEY_AAC_PROFILE Integer encoder-only, optional, if content is AAC audio, specifies the desired profile. KEY_AAC_SBR_MODE Integer encoder-only, optional, if content is AAC audio, specifies the desired SBR mode. KEY_AAC_DRC_TARGET_REFERENCE_LEVEL Integer decoder-only, optional, if content is AAC audio, specifies the target reference level. KEY_AAC_ENCODED_TARGET_LEVEL Integer decoder-only, optional, if content is AAC audio, specifies the target reference level used at encoder. KEY_AAC_DRC_BOOST_FACTOR Integer decoder-only, optional, if content is AAC audio, specifies the DRC boost factor. KEY_AAC_DRC_ATTENUATION_FACTOR Integer decoder-only, optional, if content is AAC audio, specifies the DRC attenuation factor. KEY_AAC_DRC_HEAVY_COMPRESSION Integer decoder-only, optional, if content is AAC audio, specifies whether to use heavy compression. KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT Integer decoder-only, optional, if content is AAC audio, specifies the maximum number of channels the decoder outputs. KEY_AAC_DRC_EFFECT_TYPE Integer decoder-only, optional, if content is AAC audio, specifies the MPEG-D DRC effect type to use. KEY_CHANNEL_MASK Integer optional, a mask of audio channel assignments KEY_FLAC_COMPRESSION_LEVEL Integer encoder-only, optional, if content is FLAC audio, specifies the desired compression level. 자막정보 Name Value Type Description KEY_MIME String The type of the format. KEY_LANGUAGE String The language of the content. 이미지 정보 Name Value Type Description KEY_MIME String The type of the format. KEY_WIDTH Integer KEY_HEIGHT Integer KEY_COLOR_FORMAT Integer set by the user for encoders, readable in the output format of decoders KEY_TILE_WIDTH Integer required if the image has grid KEY_TILE_HEIGHT Integer required if the image has grid KEY_GRID_ROWS Integer required if the image has grid KEY_GRID_COLUMNS Integer required if the image has grid MediaCodec미디어 코덱은 미디어 데이터의 제공자와 미디어 데이터를 소비하는 소비자의 중간에 위치하는 존재이다. 즉, (미디어 데이터 제공자) --(encoded data stream)--&gt; [MediaCodec] --(decoded data stream) --&gt;(소비자) 형태로 나타나게 된다. MoviePalyer 소스 코드를 보자면 public void play() throws IOException &#123; MediaExtractor extractor = null; MediaCodec decoder = null; boolean fileBased = true; // The MediaExtractor error messages aren't very useful. Check to see if the input // file exists so we can throw a better one if it's not there. if (mSourceFile != null &amp;&amp; !mSourceFile.canRead()) &#123; throw new FileNotFoundException("Unable to read " + mSourceFile); &#125; else &#123; fileBased = false; &#125; try &#123; extractor = new MediaExtractor();// extractor.setDataSource(mSourceFile.toString()); extractor.setDataSource(mContext,mUri,null); int trackIndex = selectTrack(extractor); if (trackIndex &lt; 0) &#123; throw new RuntimeException("No video track found in " + mSourceFile); &#125; extractor.selectTrack(trackIndex); MediaFormat format = extractor.getTrackFormat(trackIndex); // Create a MediaCodec decoder, and configure it with the MediaFormat from the // extractor. It's very important to use the format from the extractor because // it contains a copy of the CSD-0/CSD-1 codec-specific data chunks. String mime = format.getString(MediaFormat.KEY_MIME); decoder = MediaCodec.createDecoderByType(mime); decoder.configure(format, mOutputSurface, null, 0); decoder.start(); String mime = format.getString(MediaFormat.KEY_MIME); decoder = MediaCodec.createDecoderByType(mime); decoder.configure(format, mOutputSurface, null, 0); decoder.start(); 이 부분이 MediaCodec을 생산자와 소비자의 사이에 위치 시키는 역할을 한다. 위치를 시킨후 실행 시키는 코드가 decoder.start()이다 startpublic void start () 환경 설정이 완료 된 이후 start를 실행 하면 비로소, 비동기적으로 생산자로 부터 버퍼를 읽어서 디코딩 처리 하기 시작한다. Buffer얻어 오기SyncronizedAPI21(롤리팝) 이후 deprecated 된 방법 (grafika)grafika의 Movie Player는 이 방법을 사용해서 Data Stream을 접근 하고 있다. 버퍼의 형식은 ByteBuffer[] start() Call 이후 부터 버퍼를 얻어 오는 방식은 getInput과 OutputBuffers를 사용하는 방법이다. 양수의 buffer id를 기준으로 얻어온다. dequeueInputBuffer() , dequeueOutputBuffer()는 비동기 스레드에 상태를 확인하기 위한 api이다. 비록 Syncronized 방식이라고 해도 이점은 변하지 않는다. 파라메터로 timeoutUs 가 사용되는데, 해당 값은 상위 상태 변화를 확인하기 위해 기다리는 시간이다. 해당 시간을 기다려도 state의 변화가 생기지 않는다면, 해당 media data는 invalidate 처리 되게 된다. timeoutUs가 0이하면 무한이 기다리게 된다. 0이면 기다리지 않고 즉각 return 처리 한다. MoviePlayer.java private void doExtract(MediaExtractor extractor, int trackIndex, MediaCodec decoder, FrameCallback frameCallback) &#123; final int TIMEOUT_USEC = 10000; ByteBuffer[] decoderInputBuffers = decoder.getInputBuffers(); int inputChunk = 0; long firstInputTimeNsec = -1; boolean outputDone = false; boolean inputDone = false; while (!outputDone) &#123; if (VERBOSE) Log.d(TAG, "loop"); if (mIsStopRequested) &#123; Log.d(TAG, "Stop requested"); return; &#125; // Feed more data to the decoder. if (!inputDone) &#123; int inputBufIndex = decoder.dequeueInputBuffer(TIMEOUT_USEC); if (inputBufIndex &gt;= 0) &#123; if (firstInputTimeNsec == -1) &#123; firstInputTimeNsec = System.nanoTime(); &#125; ByteBuffer inputBuf = decoderInputBuffers[inputBufIndex]; // Read the sample data into the ByteBuffer. This neither respects nor // updates inputBuf's position, limit, etc. int chunkSize = extractor.readSampleData(inputBuf, 0); if (chunkSize &lt; 0) &#123; // End of stream -- send empty frame with EOS flag set. decoder.queueInputBuffer(inputBufIndex, 0, 0, 0L, MediaCodec.BUFFER_FLAG_END_OF_STREAM); inputDone = true; if (VERBOSE) Log.d(TAG, "sent input EOS"); &#125; else &#123; if (extractor.getSampleTrackIndex() != trackIndex) &#123; Log.w(TAG, "WEIRD: got sample from track " + extractor.getSampleTrackIndex() + ", expected " + trackIndex); &#125; long presentationTimeUs = extractor.getSampleTime(); decoder.queueInputBuffer(inputBufIndex, 0, chunkSize, presentationTimeUs, 0 /*flags*/); if (VERBOSE) &#123; Log.d(TAG, "submitted frame " + inputChunk + " to dec, size=" + chunkSize); &#125; inputChunk++; extractor.advance(); &#125; &#125; else &#123; if (VERBOSE) Log.d(TAG, "input buffer not available"); &#125; &#125; if (!outputDone) &#123; int decoderStatus = decoder.dequeueOutputBuffer(mBufferInfo, TIMEOUT_USEC); if (decoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) &#123; // no output available yet if (VERBOSE) Log.d(TAG, "no output from decoder available"); &#125; else if (decoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) &#123; // not important for us, since we're using Surface if (VERBOSE) Log.d(TAG, "decoder output buffers changed"); &#125; else if (decoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) &#123; MediaFormat newFormat = decoder.getOutputFormat(); if (VERBOSE) Log.d(TAG, "decoder output format changed: " + newFormat); &#125; else if (decoderStatus &lt; 0) &#123; throw new RuntimeException( "unexpected result from decoder.dequeueOutputBuffer: " + decoderStatus); &#125; else &#123; // decoderStatus &gt;= 0 if (firstInputTimeNsec != 0) &#123; // Log the delay from the first buffer of input to the first buffer // of output. long nowNsec = System.nanoTime(); Log.d(TAG, "startup lag " + ((nowNsec-firstInputTimeNsec) / 1000000.0) + " ms"); firstInputTimeNsec = 0; &#125; boolean doLoop = false; if (VERBOSE) Log.d(TAG, "surface decoder given buffer " + decoderStatus + " (size=" + mBufferInfo.size + ")"); if ((mBufferInfo.flags &amp; MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) &#123; if (VERBOSE) Log.d(TAG, "output EOS"); if (mLoop) &#123; doLoop = true; &#125; else &#123; outputDone = true; &#125; &#125; boolean doRender = (mBufferInfo.size != 0); // As soon as we call releaseOutputBuffer, the buffer will be forwarded // to SurfaceTexture to convert to a texture. We can't control when it // appears on-screen, but we can manage the pace at which we release // the buffers. if (doRender &amp;&amp; frameCallback != null) &#123; frameCallback.preRender(mBufferInfo.presentationTimeUs); &#125; decoder.releaseOutputBuffer(decoderStatus, doRender); if (doRender &amp;&amp; frameCallback != null) &#123; frameCallback.postRender(); &#125; if (doLoop) &#123; Log.d(TAG, "Reached EOS, looping"); extractor.seekTo(0, MediaExtractor.SEEK_TO_CLOSEST_SYNC); inputDone = false; decoder.flush(); // reset decoder state frameCallback.loopReset(); &#125; &#125; &#125; &#125;&#125; 이 메서드는 video가 멈추거나 끝날때 까지 루프를 돌게 된다. ByteBuffer[] decoderInputBuffers = decoder.getInputBuffers(); getInputBuffers (input surface를 사용하는 경우 절대로 사용하면 안됨) 해당 메서드는 21이후로 더이상 사용되지 않는다. getInputBuffer(int)를 대신 사용한다. 본 메서드를 이용해서 byte stream을 읽어 오는데 일단 한번 읽어진 buffer는 재사용 되지 않는다. int inputBufIndex = decoder.dequeueInputBuffer(TIMEOUT_USEC); 사용 가능한 데이터의 index(위치)를 알려준다. ByteBuffer inputBuf = decoderInputBuffers[inputBufIndex]; 앞서 읽어온 inputbuffer에서 사용 가능한 데이터의 index의 bytebuffer를 얻어온다. decoder.queueInputBuffer(inputBufIndex, 0, chunkSize, presentationTimeUs, 0 /*flags*/);inputDone = true; 화면에 표시하기(decode) 위한 buffer를 지정한다. 여기서 presentationTimeUs는 이후 화면에 표시할때 나오는 timestamp와 동일 값이 된다. 해당 메서드를 Call 한 이후부터는 output이 가능한 단계 까지 while 문을 돌면서 기다리게 된다. inputDone = true;은 decode를 위한 버퍼를 채웠다는 flag처리이다. 이후 outputDone이 처리 되어야 한다. if (!outputDone) &#123;...&#125; 바이트를 입력 했으니 이후는 입력된 바이트가 정상적으로 decode되어서 읽을 수 있으면 된다. int decoderStatus = decoder.dequeueOutputBuffer(mBufferInfo, TIMEOUT_USEC); 이 부분을 확인하는 코드이다. dequeueOutputBuffer decoded가 완료 되었는지 여부를 확인 하는 코드로써, 다음 3가지 중 하나의 리턴을 갖게 된다. NFO_TRY_AGAIN_LATER, INFO_OUTPUT_FORMAT_CHANGED, INFO_OUTPUT_BUFFERS_CHANGED 해당 value는 모두 음수의 값을 갖고 있다. 이외 양수의 값이 있다면 decode가 완료 되었다고 생각해도 된다. if (decoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) &#123; // no output available yet if (VERBOSE) Log.d(TAG, "no output from decoder available");&#125; else if (decoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) &#123; // not important for us, since we're using Surface if (VERBOSE) Log.d(TAG, "decoder output buffers changed");&#125; else if (decoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) &#123; MediaFormat newFormat = decoder.getOutputFormat(); if (VERBOSE) Log.d(TAG, "decoder output format changed: " + newFormat);&#125; else if (decoderStatus &lt; 0) &#123; throw new RuntimeException( "unexpected result from decoder.dequeueOutputBuffer: " + decoderStatus);&#125; else &#123; // decoderStatus &gt;= 0 decodeStatus가 양수일때 처리 하는 가능 핵심 적인 코드는 다음이다. decoder.releaseOutputBuffer(decoderStatus, doRender); releaseOutputBuffer output surface에 그려질 decode된 byte buffer를 돌려주는 행위를 하는 코드이다. dequeueOutputBuffer 에서 지정해준 index를 기준으로 화면에 rendering을 처리하게 된다. doRender가 true이면 output surface에 최우선 적으로 데이터를 send하게 된다. 일단 해당 버퍼가 사용되고 나면 surface는 codec에게 더이상 재활용 하지 말것을 요청하게 된다. 해당 처리에 대한 결과로는 MediaCodec.Callback에 속해 있는 onOutputBufferAvailable가 trigger 된다. 해당 decode가 완료된 이후 surfacetexture view 쪽으로 화면의 redraw를 다음 리스너를 통해 알려준다. TextureView.SurfaceTextureListener onSurfaceTextureUpdated SurfaceTexture에 있는 updateTexImage가 Call되면 이 method가 call되게 되는데, MediaCodec이 surface에 변화를 줄때마다 해당 시점을 얻어 오고 싶다면, 본 리스너를 등록 하면 된다. PlayMovieActivity.java @Overridepublic void onSurfaceTextureUpdated(SurfaceTexture surface) &#123; Matrix txform = new Matrix(); mTextureView.getTransform(txform); mRotateValue %= 360; txform.postRotate(mRotateValue += 1); mTextureView.setTransform(txform); Log.d(TAG, "onSurfaceTextureUpdated = " + mRotateValue);&#125; grafika 에서는 adjustAspectRatio라는 메서드를 통해서 동영상의 비율을 조정하게 되는데, 해당 코드의 일부분을 상위와 같이 onSurfaceTextureUpdated에 넣게 되면 동영상이 돌아가는 모습을 확인 할 수있게 된다. Surface에 대한 수정을 처리 하고 싶을 때는 onSurfaceTextureAvailable이나 onSurfaceTextureUpdated시점에 처리 해주면 된다. 만약 송출되는 Surface의 화면을 mirror(flip) 처리 하고자 한다면 PlayMovieActivity 내 adjustAspectRatio메서드 마지막에 mTextureView.setScaleX(-1); 처리를 하면 된다. Matrix의 setScale(-1,1)을 통한 flip은 성공하지 못했다.]]></content>
      <tags>
        <tag>android</tag>
        <tag>Grafika</tag>
        <tag>texture surface</tag>
        <tag>video</tag>
        <tag>flip</tag>
        <tag>mirror</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android graphic architecture]]></title>
    <url>%2Fandroid-graphic-architecture%2F</url>
    <content type="text"><![CDATA[BufferQueue그래픽 데이터의 생산자와 소비자를 연결 수켜주는 역할을 한다. (프로세스가 서로 달라도 된다.) 생산자는 버퍼 특징을 기술한다. 높이, 넓이, 픽셀포맷, 플래그 등 Data Flow dequeBuffer 생상자 버퍼 채움 queueBuffer 소비사 버퍼 획득 acquireBuffer 버퍼 활용 releaseBuffer gralloc HALallock함수를 이용해 버퍼를 할당한다. 넓이,높이,픽셀포맷, 용도 플래그가 인자 예) RGBA8888 픽셀 포멧의 경우 R-&gt;G-&gt;B-&gt;A 순서로 4바이트 버퍼를 생성한다. SurfaceFlinger그래픽 데어터 버퍼를 받고 Display로 보내는 목적 앱 포어그라운드 -&gt; 윈도우매니저 -&gt; surfaceflinger -&gt; draw 요청 BufferQueue의 소비자 처럼 동작한다. 생산자 -&gt; 바인더객체 -&gt; 윈도우매니저 -&gt; 앱 -&gt; surfaceflinger 프레임전송showSoftInput해당 기능은 디스플레이가 버퍼 처리가능할 때 작동이 시작된다. 프레임렌더링 구조생산자 -&gt; 버퍼를 채움 -&gt; 버퍼큐 채움 -&gt; surfacelinger 쪽으로 이동 -&gt; HWcomposer로 다음 frame 전송 -&gt; HWComposer는 Systemui(상태바등)와 bufferqueu 정보를 합쳐서 화면에 표시함 (VSYNC 발생 시 frame 그림) app -&gt; MediaCodec -&gt; raw데이터 버퍼 또는 Surface제공 SurfaceBufferQueue의 생산자 역할 SurfaceFlinger는 Bufferqueue의 소비자 역할 dumpsys SurfaceFlinger명령을 통해 레이어와 연관된 버퍼 정보를 확인 가능 Build configuration: [sf] [libui] [libgui]Sync configuration: [using: EGL_ANDROID_native_fence_sync EGL_KHR_wait_sync]DispSync configuration: app phase 0 ns, sf phase 0 ns, present offset 0 ns (refresh 16666666 ns)Visible layers (count = 6)+ LayerDim 0x9203b000 (DimLayer) Region transparentRegion (this=0x9203b178, count=1) [ 0, 0, 0, 0] Region visibleRegion (this=0x9203b008, count=1) [ 0, 0, 0, 0] layerStack= 0, z= 0, pos=(0,0), size=( 16, 16), crop=( 0, 0, -1, -1), isOpaque=0, invalidate=0, alpha=0xff, flags=0x00000001, tr=[1.00, 0.00][0.00, 1.00] client=0x954391c0 format= 0, activeBuffer=[ 0x 0: 0, 0], queued-frames=0, mRefreshPending=0 mTexName=4 mCurrentTexture=-1 mCurrentCrop=[0,0,0,0] mCurrentTransform=0 mAbandoned=0 -BufferQueue mMaxAcquiredBufferCount=1, mDequeueBufferCannotBlock=0, default-size=[1x1], default-format=1, transform-hint=00, FIFO(0)=&#123;&#125;+ LayerDim 0x92023000 (DimLayer) Region transparentRegion (this=0x92023178, count=1) [ 0, 0, 0, 0] Region visibleRegion (this=0x92023008, count=1) [ 0, 0, 0, 0] layerStack= 0, z= 0, pos=(0,0), size=( 16, 16), crop=( 0, 0, -1, -1), isOpaque=0, invalidate=0, alpha=0xff, flags=0x00000001, tr=[1.00, 0.00][0.00, 1.00] client=0x954391c0 format= 0, activeBuffer=[ 0x 0: 0, 0], queued-frames=0, mRefreshPending=0 mTexName=5 mCurrentTexture=-1 mCurrentCrop=[0,0,0,0] mCurrentTransform=0 mAbandoned=0 -BufferQueue mMaxAcquiredBufferCount=1, mDequeueBufferCannotBlock=0, default-size=[1x1], default-format=1, transform-hint=00, FIFO(0)=&#123;&#125;+ LayerDim 0x963ba000 (DimLayer) Region transparentRegion (this=0x963ba178, count=1) [ 0, 0, 0, 0] Region visibleRegion (this=0x963ba008, count=1) [ 0, 0, 0, 0] layerStack= 0, z= 0, pos=(0,0), size=( 16, 16), crop=( 0, 0, -1, -1), isOpaque=0, invalidate=0, alpha=0xff, flags=0x00000001, tr=[1.00, 0.00][0.00, 1.00] client=0x954391c0 format= 0, activeBuffer=[ 0x 0: 0, 0], queued-frames=0, mRefreshPending=0 mTexName=7 mCurrentTexture=-1 mCurrentCrop=[0,0,0,0] mCurrentTransform=0 mAbandoned=0 -BufferQueue mMaxAcquiredBufferCount=1, mDequeueBufferCannotBlock=0, default-size=[1x1], default-format=1, transform-hint=00, FIFO(0)=&#123;&#125;+ LayerDim 0x92021000 (DimLayer) Region transparentRegion (this=0x92021178, count=1) [ 0, 0, 0, 0] Region visibleRegion (this=0x92021008, count=1) [ 0, 0, 0, 0] layerStack= 0, z= 0, pos=(0,0), size=( 16, 16), crop=( 0, 0, -1, -1), isOpaque=0, invalidate=0, alpha=0xff, flags=0x00000001, tr=[1.00, 0.00][0.00, 1.00] client=0x954391c0 format= 0, activeBuffer=[ 0x 0: 0, 0], queued-frames=0, mRefreshPending=0 mTexName=8 mCurrentTexture=-1 mCurrentCrop=[0,0,0,0] mCurrentTransform=0 mAbandoned=0 -BufferQueue mMaxAcquiredBufferCount=1, mDequeueBufferCannotBlock=0, default-size=[1x1], default-format=1, transform-hint=00, FIFO(0)=&#123;&#125;+ Layer 0x92019000 (com.example /com.example.MainActivity) Region transparentRegion (this=0x92019178, count=1) [ 0, 0, 0, 0] Region visibleRegion (this=0x92019008, count=1) [ 0, 0, 1920, 1080] layerStack= 0, z= 21005, pos=(0,0), size=(1920,1080), crop=( 0, 0,1920,1080), isOpaque=1, invalidate=0, alpha=0xff, flags=0x00000002, tr=[1.00, 0.00][0.00, 1.00] client=0x96074440 format= 1, activeBuffer=[1920x1080:1920, 1], queued-frames=0, mRefreshPending=0 mTexName=9 mCurrentTexture=1 mCurrentCrop=[0,0,0,0] mCurrentTransform=0 mAbandoned=0 -BufferQueue mMaxAcquiredBufferCount=1, mDequeueBufferCannotBlock=0, default-size=[1920x1080], default-format=1, transform-hint=00, FIFO(0)=&#123;&#125; [00:0x9606d980] state=FREE , 0x96087380 [1920x1080:1920, 1] &gt;[01:0x9606da20] state=ACQUIRED, 0x96087440 [1920x1080:1920, 1] [02:0x9606dac0] state=FREE , 0x96087500 [1920x1080:1920, 1]+ Layer 0x9203d000 (FocusedStackFrame) Region transparentRegion (this=0x9203d178, count=1) [ 0, 0, 0, 0] Region visibleRegion (this=0x9203d008, count=1) [ 0, 0, 0, 0] layerStack= 0, z= 21006, pos=(0,0), size=( 1, 1), crop=( 0, 0, -1, -1), isOpaque=0, invalidate=0, alpha=0x4d, flags=0x00000001, tr=[1.00, 0.00][0.00, 1.00] client=0x954391c0 format= 1, activeBuffer=[ 0x 0: 0, 0], queued-frames=0, mRefreshPending=0 mTexName=3 mCurrentTexture=-1 mCurrentCrop=[0,0,0,0] mCurrentTransform=0 mAbandoned=0 -BufferQueue mMaxAcquiredBufferCount=1, mDequeueBufferCannotBlock=0, default-size=[1x1], default-format=1, transform-hint=00, FIFO(0)=&#123;&#125;Displays (1 entries)+ DisplayDevice: Built-in Screen type=0, hwcId=0, layerStack=0, (1920x1080), ANativeWindow=0x96225408, orient= 0 (type=00000000), flips=159, isSecure=1, secureVis=0, powerMode=2, activeConfig=0, numLayers=1 v:[0,0,1920,1080], f:[0,0,1920,1080], s:[0,0,1920,1080],transform:[[1.000,0.000,-0.000][0.000,1.000,-0.000][0.000,0.000,1.000]]mAbandoned=0-BufferQueue mMaxAcquiredBufferCount=1, mDequeueBufferCannotBlock=0, default-size=[1920x1080], default-format=1, transform-hint=00, FIFO(0)=&#123;&#125; [00:0x9606d3e0] state=FREE , 0x96086780 [1920x1080:1920, 1] [01:0x9606d480] state=FREE , 0x96086840 [1920x1080:1920, 1]&gt;[02:0x9606d520] state=ACQUIRED, 0x96086900 [1920x1080:1920, 1]SurfaceFlinger global state:EGL implementation : 1.4 Midgard-"r8p0-02rel0" EGL_ANDROID_image_native_buffer EGL_ANDROID_recordable EGL_ANDROID_native_fence_sync EGL_ANDROID_framebuffer_target EGL_ANDROID_blob_cache EGL_KHR_partial_update EGL_KHR_config_attribs EGL_KHR_image EGL_KHR_image_base EGL_KHR_fence_sync EGL_KHR_wait_sync EGL_KHR_gl_colorspace EGL_KHR_get_all_proc_addresses EGL_IMG_context_priority EGL_KHR_gl_texture_2D_image EGL_KHR_gl_renderbuffer_image EGL_KHR_create_context EGL_KHR_surfaceless_context EGL_KHR_gl_texture_cubemap_image EGL_EXT_create_context_robustnessGLES: ARM, Mali-T720, OpenGL ES 3.1 v1.r8p0-02rel0.b25106f7a00abf0fd922cfe23b51206fGL_EXT_debug_marker GL_ARM_rgba8 GL_ARM_mali_shader_binary GL_OES_depth24 GL_OES_depth_texture GL_OES_depth_texture_cube_map GL_OES_packed_depth_stencil GL_OES_rgb8_rgba8 GL_EXT_read_format_bgra GL_OES_compressed_paletted_texture GL_OES_compressed_ETC1_RGB8_texture GL_OES_standard_derivatives GL_OES_EGL_image GL_OES_EGL_image_external GL_OES_EGL_sync GL_OES_texture_npot GL_OES_vertex_half_float GL_OES_required_internalformat GL_OES_vertex_array_object GL_OES_mapbuffer GL_EXT_texture_format_BGRA8888 GL_EXT_texture_rg GL_EXT_texture_type_2_10_10_10_REV GL_OES_fbo_render_mipmap GL_OES_element_index_uint GL_EXT_shadow_samplers GL_OES_texture_compression_astc GL_KHR_texture_compression_astc_ldr GL_KHR_texture_compression_astc_hdr GL_KHR_debug GL_EXT_occlusion_query_boolean GL_EXT_disjoint_timer_query GL_EXT_blend_minmax GL_EXT_discard_framebuffer GL_OES_get_program_binary GL_OES_texture_3D GL_EXT_texture_storage GL_EXT_multisampled_render_to_texture GL_OES_surfaceless_context GL_OES_texture_stencil8 GL_EXT_shader_pixel_local_storage GL_ARM_shader_framebuffer_fetch GL_ARM_shader_framebuffer_fetch_depth_stencil GL_ARM_mali_program_binary GL_EXT_sRGB GL_EXT_sRGB_write_control GL_EXT_texture_sRGB_decode GL_KHR_blend_equation_advanced GL_KHR_blend_equation_advanced_coherent GL_OES_texture_storage_multisample_2d_array GL_OES_shader_image_atomic GL_EXT_robustness GL_EXT_texture_border_clamp GL_OES_texture_border_clamp GL_EXT_texture_cube_map_array GL_OES_texture_cube_map_array GL_OES_sample_variables GL_OES_sample_shading GL_OES_shader_multisample_interpolation GL_EXT_shader_io_blocks GL_OES_shader_io_blocks GL_EXT_gpu_shader5 GL_OES_gpu_shader5 GL_EXT_texture_buffer GL_OES_texture_buffer GL_EXT_copy_image GL_OES_copy_image Region undefinedRegion (this=0x960b352c, count=1) [ 0, 0, 0, 0] orientation=0, isDisplayOn=1 last eglSwapBuffers() time: 7657.042000 us last transaction time : 180.167000 us transaction-flags : 00000000 refresh-rate : 60.000002 fps x-dpi : 159.895004 y-dpi : 160.421005 gpu_to_cpu_unsupported : 0 eglSwapBuffers time: 0.000000 us transaction time: 0.000000 usVSYNC state: disabled soft-vsync: disabled numListeners=9, events-delivered: 297 0x9544c038: count=-1 0x9544c060: count=-1 0x9544c088: count=-1 0x9544c0b0: count=-1 0x96038b78: count=-1 0x96038ba0: count=-1 0x96038bf0: count=-1 0x96038f38: count=-1 0x96038f60: count=-1h/w composer state: h/w composer present and enabledHardware Composer state (version 01010000): mDebugForceFakeVSync=0 Display[0] configurations (* current): * 0: 1920x1080, xdpi=159.895004, ydpi=160.421005, refresh=16666666 numHwLayers=2, flags=00000000 type | handle | hint | flag | tr | blnd | format | source crop (l,t,r,b) | frame | name-----------+----------+------+------+----+------+-------------+--------------------------------+------------------------+------ HWC | 96087440 | 0000 | 0000 | 00 | 0100 | RGBA_8888 | 0, 0, 1920, 1080 | 0, 0, 1920, 1080 | com.example /com.example FB TARGET | 96086900 | 0000 | 0000 | 00 | 0105 | RGBA_8888 | 0, 0, 1920, 1080 | 0, 0, 1920, 1080 | HWC_FRAMEBUFFER_TARGETAllocated buffers:0x96086780: 8100.00 KiB | 1920 (1920) x 1080 | 1 | 0x00001a000x96086840: 8100.00 KiB | 1920 (1920) x 1080 | 1 | 0x00001a000x96086900: 8100.00 KiB | 1920 (1920) x 1080 | 1 | 0x00001a000x96087380: 8100.00 KiB | 1920 (1920) x 1080 | 1 | 0x00000b000x96087440: 8100.00 KiB | 1920 (1920) x 1080 | 1 | 0x00000b000x96087500: 8100.00 KiB | 1920 (1920) x 1080 | 1 | 0x00000b00Total allocated (estimate): 48600.00 KB Canvas Rendering Skia Graphics Library : 렌더링 로우레밸 처리 Skia는 바이트를 버퍼의 형태로 구성기 위해 그리고 멀티 클라이언트에 의한 동시 업데이트를 방지하기 위해, 버퍼 액세스 락을 사용한다. lockCanvas() : 버퍼에 락을 걸고 드로잉을 위한 Canvas를 리턴 unlockCanvasAndPost() :버퍼에 락을 해제 하고 compositor로 전달 하드웨어 가속 Canvas API (OpenGL ES 지원을 위함) View onDraw Canvas : 하드웨어 가속 가능 APP이 직접 lockCanvas()를 통해 캠버스(surface)를 얻어 오는 것과는 다름 : 사용자 lock Canvas 기반 CPU랜더러는 GLES로 Surface드로잉을 할 수 없거나 비디오 디코더에 출력된 프레임을 보낼 수 없다. Canvas를 사용하지 않고 Surface에 직접 드로잉 하는 주요 방법은 OpenGL ES를 사용하면 됨 SurfaceHoldersurface와 관련된 작업은 surfaceHolder와 surfaceView가 필요함 surface : compositor에 관리 되는 버퍼 surfaceholder : 앱에 의해 관리되고 surface의 크기나 포맷같은 고수준 정보를 관리 view와 관련된 작업은 surfaceholder를 포함하고, MediaCodec같은 API들은 surface상에서 동작한다. Surface는 surfacehoder를 통해 얻을 수 있다. surface의 설정 정보들을 얻고자 하면 surfacehoder를 통해 구하면 된다. SurfaceViewSurface + View surfaceview -&gt; 투명 -&gt; view컴포넌트 시각화 시작 -&gt; windowmanager -&gt; sufaceflinger가 surface생성 요청 비동기적 작동으로 surface생성 완료시 callback처리 해야한다 새로운 sruface는 보이지 않는 영역에 생김, z ordering을 통해 상위로 올려야함 view 펀칭을 통한 화면 제공 방식이다. &quot;surfaceview -&gt; window -&gt; surface -&gt; 사용자 눈&quot; 이라고 했을때 window에 fixed된 창을 뚫는 방식이다. 이런 방식으로 인해 SurfaceView는 transformation, animation 등의 처리가 불가능하다. SurfaceTextureSurface + GLES Texture 조합 SurfaceTexture생성 -&gt; BufferQueue 생성 -&gt; 생상자 SurfaceTexture 생성 -&gt; Bufferqueue 인큐 -&gt; onFrameAvailable() 통지 -&gt; updateTexImage 메서드 호출 -&gt; bufferqueue 버퍼 얻음 getTimestamp() : timestamp 정보 getTransformMatrix : 가자 최근 호출된 updateTexImage()메서드 설정된 변환 행렬() 변환행렬 : 잘못된 소스데이터를 보정 가능 timestamp : 카메라 코드에 의해 설정되며 프레임이 캡처될때 기준으로 리턴된다. surfaceview와는 다르게 view 그룹의 하이어러키에 포함된다. (surfaceview의 rendering은 다른 view 그룹의 랜더링과 독립으로 처리 되는것으로 보인다.) 그렇기에 surfacetexture는 transformation, animation 처리 등이 가능하다 그러나 memory 사용량이 상대적으로 높고, 해당 surface의 redraw가 해당 그룹 전체의 redraw에 영향을 줄수 있다. video player를 개발하게 되면 사실상 surfacetexture를 사용할 수 밖에 없는데 fullscreen mode가 전제 된다면 surfaceview를 사용하는 것이 좋다(drm contents는 surfaceview 사용 권장) 해당 컴포넌트는 반듯이 하드웨어 렌더링을 지원해야 한다. TextureViewView + SurfaceTexture TextureView는 SurfaceTexture를 wrap하고 있음 SurfaceTexture Callback 응답처리, 신규 버퍼 획득 처리 역할 View invalidate 요청 : 신규 버퍼 수신 시 장점 : View 계층 구조에 소속되어 동작, 다른 View와 동일, API 임의 변환 수행 및 비트맵을 컨텐츠로 로드가능 단점 : 합성 단계 성능, View 합성이 GLES로 수행되고 다른 View 요소들의 리드로잉을 발생 시킴. Video 처리 등을 위해서는 SurfaceView가 더 좋은 성능을 제공 (DRM Contents는 SurfaceView로만 구현 가능)]]></content>
      <tags>
        <tag>Android</tag>
        <tag>surfaceview</tag>
        <tag>textureview</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android memory leak 처리]]></title>
    <url>%2Fandroid-memory-leak%2F</url>
    <content type="text"><![CDATA[Inner Class 누수Activity 내부에 아래와 같이 Inner Class를 정의 할 경우 잠재적으로 누수의 대상이 된다. ... public class MainActivity extends Activity &#123; private static Innserclass inner; private String mStr; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main2); inner = new Innserclass(); new Thread(inner).start(); mStr = "hello"; &#125; public class Innserclass implements Runnable &#123; public Innserclass() &#123; mStr+="nono!!"; &#125; @Override public void run() &#123; getApplicationContext(); &#125; &#125;&#125; 첫번째 누수 사유는 static이다. private static Innserclass inner; 일단 static에 memory를 assigne하게 되면 해당 instance는 모 class인 activity와는 별도로 메모리 상에 살아 남게 된다. 두번째 사유는 thread 처리이다. inner class를 thread처리 함으로써 (이경우는 postdelay도 마찬가지다) UI Thread가 죽어도 살아 남을 가능 성이 있다. Destroy 시점에 반듯이 thread를 종료 처리 해줘야 한다. handler도 이 경우에 속하게 된다. 세번째 사유는 InnerClass 자체에 있다. 첫번째 사유든 두번째 사유든 해당 Instance는 잠재적으로 모 Class의 Context를 접근 할 수 있게 된다. 코드상으론 mStr+=&quot;nono!!&quot;; 이 부분이다. 해결 방법은 다음고 같다. Innser Class를 절대로 static 처리 하지 말아라- private static Innserclass inner;+ private Innserclass inner; Destroy시점에 Activity와 같이 종료할 수있다면 상관이 없을 수는 있다. 그러나 라이프 사이클이 Activity와 같다면 Static을 쓸 이유가 없다. Inner Class는 static으로 정의 하던가 완전히 별도 파일로 제외를 시켜라- public class Innserclass implements Runnable &#123;+ public static class Innserclass implements Runnable &#123; static 처리를 하게 되면 해당 클래스는 모 class와 독립된 메모리 참조 구조를 갖게 되어 독립하게 된다. weekRefernece를 사용해라+ public static class Innserclass implements Runnable &#123;+ private final WeakReference&lt;MainActivity&gt; mActivity; public Innserclass(MainActivity activity) &#123;+ mActivity = new WeakReference&lt;&gt;(activity); &#125; @Override public void run() &#123;- getApplicationContext();+ mActivity.getApplicationContext(); &#125; &#125; 직접적인 Reference를 주입해서는 안된다. 반듯이 weekRefernece를 이용해서 context를 공유 해야한다. thread와 같이 Main Thread의 범위 밖에서 작동이 된다면 MainActivity가 명시적으로 종료 되어도 해당 Context가 별도의 Thread에 남아있게 되어서 Memory Leak이 나게 된다. Handler 누수내용상으로는 Inner class와 동일하다. weekreference를 이용해서 instance를 생성하게 해야한다. private static class MainHandler extends Handler &#123; private final WeakReference&lt;MainActivity&gt; mActivity; public MainHandler(MainActivity activity) &#123; mActivity = new WeakReference&lt;&gt;(activity); &#125; 기본 적인 handler의 constructor는 인수가 없음으로 강제로 넣어야만 한다. 그리고 종료시에는 반듯이 다음 행위를 처리해줘야 한다. @Overrideprotected void onDestroy() &#123; super.onDestroy(); if (MainHandler != null) &#123; MainHandler.removeCallbacksAndMessages(null); MainHandler = null; &#125; 혹시 남아 있을지 모르는 메시지 큐 내용을 clear해줘야 한다. Webview 누수webview를 사용할때는 해당 view item이 destory가 완전히 되었고, 그에따른 메모리 반납이 이루어 졌는지 확인해야 한다. 그렇지 않다면 Native영역과 Others영역의 메모리가 지속 누적되는 현상이 발생 하게 된다. 이러한 현상은 layout상에 있는 webview를 call하게 되면 굉장히 높은 확률로 Leak이 발생하게 된다. 아래는 activity_main.xml과 MainActivity 수도 코드이다 &lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" android:id="@+id/webviewHell" tools:context=".MainActivity"&gt; &lt;WebView android:id="@+id/activity_main_webview" android:layout_width="match_parent" android:layout_height="match_parent" /&gt; &lt;/RelativeLayout&gt; public class MainActivity extends Activity &#123; private WebView mWebView; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); getApplicationContext(); mWebView = findViewById(R.id.activity_main_webview); Destory시 다음과 같은 code를 넣어 보아도 메모리 leak이 나는 것을 확인 할 수있다. .....@Overrideprotected void onDestroy() &#123; super.onDestroy(); mWebView.clearHistory(); mWebView.destroyDrawingCache(); mWebView.setWebViewClient(null); mWebView.setWebChromeClient(null); mWebView.removeAllViews(); mWebView.clearCache(true); mWebView.freeMemory(); mWebView.removeAllViewsInLayout(); mWebView.setVisibility(View.GONE); mWebView.destroy(); mWebView = null; webview는 instance 생성을 통해서 처리해라... RelativeLayout mWebviewlayout; WebView mWebView; protected void onCreate(Bundle savedInstanceState) &#123; mWebviewlayout = (RelativeLayout) findViewById(R.id.webviewHell); mWebView = new WebView(getApplicationContext()); mWebView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT)); mWebviewlayout.addView(mWebView); ... 완전히 연관 리로스를 clear해라@Override protected void onDestroy() &#123; super.onDestroy(); mWebView.removeJavascriptInterface("bridge"); mWebView.loadUrl("about:blank"); jsInterface = null; mJSCallback = null; mWebviewlayout.destroyDrawingCache(); mWebviewlayout.removeAllViews(); mWebviewlayout.removeAllViewsInLayout(); mWebviewlayout.setVisibility(View.GONE); mWebviewlayout = null; mWebView.clearHistory(); mWebView.destroyDrawingCache(); mWebView.setWebViewClient(null); mWebView.setWebChromeClient(null); mWebView.removeAllViews(); mWebView.clearCache(true); mWebView.freeMemory(); mWebView.removeAllViewsInLayout(); mWebView.setVisibility(View.GONE); mWebView.destroy(); mWebView = null; 상위 destroy 코드는 다소 과하다 싶을 정도로 remove하고 있다. 여기서 주의 깊게 봐야할 것은 mWebView.freeMemory(); 이것이다. freeMemory api는 deprecated되었다. 공식 문서에서는 이 기능을 대체 하는 기능으로 mWebView.loadUrl(&quot;about:blank&quot;); 사용을 권장한다. 최후에는 app data를 전부 삭제해라public static void deleteCache(Context context) &#123; try &#123; File dir = context.getCacheDir(); deleteDir(dir); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125;public static boolean deleteDir(File dir) &#123; if (dir != null &amp;&amp; dir.isDirectory()) &#123; String[] children = dir.list(); for (int i = 0; i &lt; children.length; i++) &#123; boolean success = deleteDir(new File(dir, children[i])); if (!success) &#123; return false; &#125; &#125; return dir.delete(); &#125; else if(dir!= null &amp;&amp; dir.isFile()) &#123; return dir.delete(); &#125; else &#123; return false; &#125;&#125; 안드로이드는 apk별로 데이타를 임시 저장할 수 있는 공간이 있다. 일반적으로 adb shell을 진입했을때 /data/&lt;&lt;app package&gt;&gt; 이하를 가르키게 된다. 해당 폴더 이내에 있는 디렉토리를 모두 다 지우는 행위임으로, 주의 깊게 사용해야 한다. ImageView 사용Bitmap에 대한 이미지 릭은 매우 유명하다. 허니콤(3.2)을 기준으로 이전에는 Bitmap 정보를 Native Heap영역에 담고 이를 포인팅 처리하도록 되어있었다. 이미지포인터(java heap) -&gt; char[] (native heap) 하지만 이는 포인터를 잊는 순간 Native영역에 해소 되지 않는 메모리 릭을 발생 시켰고 이점을 해결하기 위해 메모리 영역을 Heap 영역으로 옮겼다 . Profiler에서도 보면 비트맵 힙 영역을 별도록 볼수있게 하였다. 그렇다고 Bitmap에 대한 메모리 릭이 사라지진 않았다. 무조건 Image View는 recycle 처리를 해줘야 한다. ... ImageView image = (ImageView) findViewById(R.id.loadingImage); Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath()); image.setImageBitmap(myBitmap); ... @Override protected void onDestroy() &#123; super.onDestroy(); image.recycle(); 그러나 이와 같은 코드 작성을 위해서 Bitmap을 모두 class 변수로 끌어 내는건 좋지 않음으로 다음 코드를 사용해서 recycle처리 할 수 있다. private static void recycleBitmap(ImageView imageView) &#123; if (imageView != null) &#123; Drawable d = imageView.getDrawable(); if (d != null &amp;&amp; d instanceof BitmapDrawable) &#123; Bitmap b = ((BitmapDrawable)d).getBitmap(); if (b != null) &#123; b.recycle(); &#125; &#125; imageView.setImageResource(android.R.color.transparent); imageView.setImageBitmap(null); &#125;&#125; 단, 주의해야할 코드가 있다. ImageView image = (ImageView) findViewById(R.id.loadingImage); Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());- image.setImageBitmap(myBitmap);+ image.setBackgroundResource(myBitmap); setBackgroundResource의 경우는 recycle 처리가 어렵다. 해당 메서드는 ImageView가 아닌 View자체의 메서드를 사용함으로써 Drawable 객체를 반환하지 않는다.]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Memory</tag>
        <tag>Leak</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android_ART_GC_Log]]></title>
    <url>%2Fandroid-ART-GC-Log%2F</url>
    <content type="text"><![CDATA[Android Memory ARTART의 목적안드로이드 상 시스템이나 어플리케이션에 의해 관리 되는 Android Runtime을 대표 하는 말로써, 오직 안드로이드 프로젝트를 위해서만 만들어졌다. ART나 달빅의 경우는 Dex bytecode 러닝에 적합하게 만들어 졌다. Ahead-of-tiem (AOT) compilation인스톨 및 작동 시간을 빠르게 하기 위해 있는 것으로 최초 apk를 install하게 되면 dex2oat라는 device 내부에 있는 tool을 이용해서 작동가능한 상태로 만들어 준다. Improved garbage collection GC를 한번에 처리하게 만든다 GC pause동안 병행 프로세스 처리를 한다 작은 객체(만들어진지 얼마 안된 객체, short live 객체)들을 수집한다 GC 처리를 적절하게 병행 처리 함으로써 GC_FOR_ALLOC이 최대한 발생 하지 않게 한다 백그라운드 메모리 사용이나, 메모리 파편화를 줄여 준다 (Compacting GC) Development and debugging improvements아래와 같은 오류 정보들을 ART가 제공하게 된다. java.lang.NullPointerException: Attempt to write to field &apos;intandroid.accessibilityservice.AccessibilityServiceInfo.flags&apos; on a null objectreference ART 로그 설명Art(Android Runtime)는 명시적으로 요청된 Garbage Collection에 대해서만 결과를 출력함 출력 형태는 다음과 같음 I/art: &lt;GC_Reason&gt; &lt;GC_Name&gt; &lt;Objects_freed&gt;(&lt;Size_freed&gt;) AllocSpace Objects, &lt;Large_objects_freed&gt;(&lt;Large_object_size_freed&gt;) &lt;Heap_stats&gt; LOS objects, &lt;Pause_time(s)&gt; 실제 사용은 다음과 같이 출력됨 I art : Explicit concurrent mark sweep GC freed 64(14KB) AllocSpace objects, 2(72KB) LOS objects, 24% free, 4MB/5MB, paused 448us total 20.082ms: 조금더 자세하게 나누어 보면 다음과 같음 Type 대상 설명 GC_Reason Explicit - Concurrent : 앱스레드 중단 않는 GC (백그라운드 실행)- Alloc : 힙이 이미 가득 차서 더 이상 요청받은 메모리 할당을 할 수없어서, GC를 우선 실행 시킴-Explicit : 앱이 명시적인 GC를 요청함. gc() 호출- NativeAlloc : Bitmap또는 Renderscript 할당과 같은 Native 메모리 할당을 위해서 실행 되는 GC (허니비를 기점으로 Bitmap은 힙으로 위치를 변경하였다)- CollectorTransition : RAM 사양이 낮은 기기에서 앱의 프로세스 상태 일시 중지 및 인식 할 수없는 상태로 변경 할때 변환이 발생함(메모리 공간을 범프 포인터 공간으로 복사하는 작업임)(Eden 영역에서 -&gt; Survivor 영역으로의 전환 과정으로 보임)- HomogeneousSpaceCompact : 사용가능한 공간(메모리로 보임)의 압축 기법으로 백그라운드 상태에서 RAM사용량 감소와 힙 조각 모음을 위해 처리 하는 것으로 보임- HeapTrim : 힙트림을 마주칠 때까지 수집이 차단 - DisableMovingGc : 힙압축이 이루어지는 동안 GetPrimitiveArrayCritical이 사용 됨으로써 힙의 수집기 이동을 제한 시킴 GC_Name concurrent mark sweep - Concurrent mark sweep (CMS) : 이미지 공간 이외의 모든 공간을 회수하고 수집하는 완전한 힙 수집기- Concurrent partial mark sweep : 이미지 및 zygote (app_process, 요청을 리스닝하고 요청 받은 클래스를 포크한다.)공간 이외의 공간을 전부 수집하는 수집기- Concurrent sticky mark sweep : 마지막 GC이후로 할당된 객체만 회수 하는 세대별 수집기. 수집이 빠르고 일시 중지도 잘 안일어 남으로 자주 사용됨-Marksweep + semispace : 공간 압축이나 힙전환시 사용되는 복사 GC Objects_freed freed 64 회수한 객체의 수(작은규모) Size_freed (14KB) AllocSpace objects, 2 GC를 통해서 회수한 바이트의 수 Large_objects_freed 2 회수한 객체의 수(큰 규모) Large_object_size_freed (72KB) 회수한 객체의 크기 Heap_stats 24% free, 4MB/5MB, 회수한 비율로 (라이브 객체수)/(총 힙 크기), 예를 들자면 4MB가 살아있는 개체이고 5MB가 전체 힙의 크기이다. 약 24% 1MB 정도가 비어 있는 상황이라고 보면 된다. 이 값으 전체 적으로 증가만 하고 있다면 메모리 릭이라고 생각해 봐야한다 Pause Times paused 448us total 20.082ms 공식 문서상에는 일시 중지 횟수로 나와있으나 단위를 보면 일시 중지 시간이 맞는거 같다. 객체 수집시 나타나는 일시 중지 시간 평균 및 sum이 이 pause times으로 생각된다. Android Memory Kill 순서 시스템 관련 서비스 memory status Cached 현재 작동 되고 있지 않고 Background에 캐쉬 되어 있는 서비스들 lmk(Low memory killer) threshold Previous 현재 작동 중인 서비스 직전에 사용된 서비스 critical Home Home 기능이라고 하는데 내용상 바탕화면의 Wall paper 정도로 보임 critical Service 클라우드 서비스, 싱크 서비스 등 백그라운드 서비스 critical Perceptible 조회기능, 오디오, 키보드 등 듣고 입력하는 기능 들로 보임 critical Foreground 현재 떠있는 서비스 critical Persistent 전화 본연의 기능 및 통신 프로톨(와이파이, 블루투스 등) Crash () System system_server Crash (reboot) Native init, kswapd,netd, logd, adbd 등 native bin(exec) 프로세스 Crash (reboot) 맨 위에서 부터 순차적으로 프로세스가 kill되기 시작함 lmk : low memory killer kswapd : kernel swap daemon Android Memory Debug Tool Android Studio Profiler showmap (사용방법?): https://android.googlesource.com/platform/system/extras/+/android-6.0.1_r28/showmap/showmap.c ahat : https://android.googlesource.com/platform/art/+/master/tools/ahat/README.txt debug malloc : adb logcat -d | grep &quot;malloc debug&quot; https://android.googlesource.com/platform/bionic/+/master/libc/malloc_debug/README.md Profiler 만 사용하면 다른 툴을 쓸 필요가 없는 것으로 보인다. 단, malloc 같은 경우는 native 영역에 대한 내용을 볼 수 있는 유일한 방법으로 현재까지는 보임으로 native leak이 발생하면 쓸수 밖에 없지 않나 한다. Android RAM의 종류RAM 사용량 Commandadb shell dumpsys meminfo &lt;package_name|pid&gt; [-d] 해당 명령어는 adb connect 가 되어있다는 전제이다 -d 옵션 의미 : Dalvick 및 ART 메모리 사용량에 대한 정보가 상세히 출력된다 기본적을 KB단위로 나열된다. 개인(클림 및 더티) RAMRAM은 특정 APP에서만 사용중인 메모리로써, 해당 메모리의 양은 특정 APP의 서비스가 프로세스 킬되었을 때 온전히 Free RAM으로 되돌려 받을 수 있는 양이다. 이중에 개인 더티 RAM은 Android 스왑을 사용하지 않기 때문에 가장 중요한 대상이 된다. 메모리 Leak을 해결 해야 하는 이유도 이부분에 있다. 개발자가 지정하는 모든 Dalvik 및 Native 힙 메모리는 더티 RAM으로 처리된다. Zygote를 사용하는 공유 RAM도 있게 되는데 이부분은 공유 더티 Ram으로 불린다. PSS(Propotional Set Size)PSS는 하나의 프로세스만을 바라보는 사이징 방식이 아니라, 공유되는 모든 페이지에 대한 RAM까지 포함한 계산 방식이다. 예를 들자면 프로세스 2개가 2메가를 공유하는 프로세스를 접근 하고 있다면, 1MB씩 PSS 사이즈를 분배 받게 된다. 그외 개인 더티 RAM 사이즈는 직접적으로 PSS에 추가 된다. 정리하자면 다음과 같다. PSS Size = 프로세스1 개인 더티 RAM + 프로세스 2 개인 더티 RAM + 프로세스 3 공유 RAM 절반 PSS외에 2가지 종류가 더 있다 RSS : Resident Set Size = Private 더티 RAM + Shared RAM 전체 USS : Unique Set Size = RSS - shared RAM 전체 = Private Dirty RAM만 대상으로 함 아래는 com.example.app의 메모리 사용량을 나타낸다. Applications Memory Usage (kB):Uptime: 2452592 Realtime: 2452592** MEMINFO in pid 4739 [com.example.app] ** Pss Private Private Swapped Heap Heap Heap Total Dirty Clean Dirty Size Alloc Free ------ ------ ------ ------ ------ ------ ------ Native Heap 6691 6648 0 0 16384 8945 7438 Dalvik Heap 1664 1512 0 0 7045 5418 1627 Dalvik Other 304 304 0 0 Stack 392 392 0 0 Ashmem 128 128 0 0 Other dev 4 0 4 0 .so mmap 8218 260 1640 0 .apk mmap 305 0 24 0 .ttf mmap 93 0 0 0 .dex mmap 2124 0 1776 0 .oat mmap 2144 0 64 0 .art mmap 2214 1988 4 0 Other mmap 296 4 0 0 Unknown 2072 2072 0 0 TOTAL 26649 13308 3512 0 23429 14363 9065 Dalvik Details .Heap 964 964 0 0 .GC 188 188 0 0 .Zygote 424 272 0 0 .NonMoving 276 276 0 0 .IndirectRef 116 116 0 0 Objects Views: 9 ViewRootImpl: 0 AppContexts: 3 Activities: 1 Assets: 3 AssetManagers: 3 Local Binders: 13 Proxy Binders: 15 Parcel memory: 5 Parcel count: 20 Death Recipients: 0 OpenSSL Sockets: 0 SQL MEMORY_USED: 0 PAGECACHE_OVERFLOW: 0 MALLOC_SIZE: 0 Dalvik Heap자바 머신인 달빅의 heap 모델은 External과 Dalvik heap으로 나뉘게 되는데 이중에 Dalvik Heap은 Java객체 인스턴스 메모리 할당 Zygote 할당 영역 포함 을 하게 된다. 그러나 java의 메모리 범위 밖을 보게 된다면 Native Heap이 나타나게 되는데, 이부분은 OS 영역의 메모리를 사용하는 범위로 주로 NDK로 개발된 경우 C++, C로 개발된 로우레벨 라이브러리를 사용하는 경우가 된다. Bitmap의 경우 가장 대표적인 Native Heap 저장 대상이다. Java는 Bitmap data를 Native Heap 부분으로 Pointing하는 역할만 한다. Dalvik Other문서상으로는 정확히 명시 되어 있지는 않는데 참고 문항으로 추리 해보면 다음과 같이 생각하면 될것 같다 Just in time 컴파일 기록 GC 기록 등 Dalvik Overhead 추측이긴 한데 ART에서 생성되는 각종 정보가 이쪽 메모리 사이즈로 쌓이는 것으로 생각된다. Heap Alloc해당 앱에 할당된 메모리 크기 인다. 이게 PSS Total보다 큰 이유는 공유 자원에 대한 값까지 같이 포함 하고 있기 때문이라고 한다. Private Dirty해당 앱 프로세스 내부에서만 사용되는 메모리로 타 앱 및 프로세스와 공유 되지 않는다. 프로세스가 종료 되면 이 메모리는 100% 반환 되어야 한다. Private Cean개발자 앱의 자체 코드임, 개발자가 만든 code자체에 대한 글이 이곳에 적제 되는 것으로 보임 so,dex mmap과 관련이 있음 .so에는 private 더티 RAM이 크게 할당 되어있는데 이는 네이티브 코드를 최종 주소 로드 할때 수정했기 때문이다. 실행 중인 코드에 대한 정보를 담는 부분으로 보임 .so .dex mmap.so 네이티브 및 .dex 달빅 또는 ART를 위한 코드용으로 사용하는 RAM .oat mmap여러 앱이 공통적으로 사용하는 앱의 메모리 공간으로 특정 앱에 영향을 받지 않음 .Unknow도구가 식별하기 힘든 RAM 페이지로, 주로 네이티브 할당이 주를 이룬다. Dalvik Detail.Heap : 앱의 힙의 메모리 크기 (zygote 공간 과 private 공간 포함) .LOS : ART 대형 객체 공간 메모리 .GC : GC 계정 오버헤드 크기로 수정할 수없음 .JITCache : 실행되는 시점으로 o이 될것임 .Zygote : 공통 메모리 크기 .NonMoving : ART 비이동 공간 사용 RAM, 앱에서 사용하는 필드와 메서드 수를 줄이면 이부분이 줄어듬 .IndirectRef : ART 간접 참조 테이블, 로컬 및 전역 JNI 참조 수를 줄이면 줄일 수 있음 ObjectsViews : 모든 View 객체의 수이다. 만약에 layout에 버튼 3개가 있고 views가 9인 상태라면, 하나의 버튼을 삭제 하면 8이 된다. ViewRootImpl : 현재 작동중인 View의 갯수. 보이지 않는 창이라던가 연관되어있는 view와의 갯수를 확인해서 메모리 누수를 확인 할 수있다. 화면이 안떠있다면 0, 한개 View가 떠있다면 1이런식이다. Activities Activity의 갯수로써 현재 떠있는 Activity의 갯수가 된다. 한개의 큰 화면만 떠있다면 Activity는 1개이다 AppContexts 만약에 Activity A가 죽고 Activity B가 살아나는 시점에, A의 context가 살아있다면(Leak) 이때 AppContexts는 지속적으로 증가하는 것으로 보임 ProxyBinders/Parcel count/Local Binders lyaout 상 객체를 Bind 하면서 카운트가 올라 가는 것으로 보임]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Memory</tag>
        <tag>ART</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis & Jedis]]></title>
    <url>%2FJedis-java-clinet%2F</url>
    <content type="text"><![CDATA[Redis와 Redis 관련 정보를 다음 url에서 발췌해서 적는다https://gist.github.com/JonCole/925630df72be1351b21440625ff2671f#file-redis-bestpractices-java-jedis-md Jedis는 Single 스레드이다 멀티스레드 환경에서 절대로 동일한 Jedis Connection instance를 같은 시간에 사용하지 말아라 만약에 동시 접근을 하게 된다면 &quot;expected &#39;$&#39; but got&#39;&quot; 과같은 오류 메시지를 확인 할 것이다. JedisPool을 사용해라 멀티스레드 환경에서 connections을 재활용 할 수 있게 해준다 JedisPool Object는 thread-safe하게 작성되었다 Pool은 단 한번만 설정하고 재활용 되어야 한다 Jedis instance는 사용후 반듯이 pool로 돌아가야 한다. 컨넥션 에러가 30초 이상 발생할 경우 jedisPool을 새로 생성하는게 좋다. Setting Description connectTimeout soTimeout port JedisPoolConfig settings Setting Description maxTotal maxIdle minIdle blockWenExhausted maxWaitMillis TestOnBorrow minEvictableIdleTimeMillis]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>Jedis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript object merge]]></title>
    <url>%2Fjavascript-object-merge%2F</url>
    <content type="text"><![CDATA[Object.assignJavascript의 Object를 Merge 하는 방법 중에 가장 많이 사용되는 것은 Object.assign을 사용하는 것이다. 기본 사용법은 다음과 같다. Object.assign(target, ...sources) target : Merge 당할 대상 객체 source : Merge의 대상 객체에게 주입을 할 오브젝트 기본 사용법var obj1 = &#123;name : 'hi', val: 1&#125;;var obj2 = &#123;name : 'hello', val: 2&#125;;var newObj = Object.assign(obj1, obj2);console.log(obj1);console.log(newObj);obj1.name = 'modified';console.log(obj1);if (obj1 === newObj)&#123; console.log('same object!!')&#125; 실행 결과 &#123; name: 'hello', val: 2 &#125;&#123; name: 'hello', val: 2 &#125;&#123; name: 'modified', val: 2 &#125;same object!! 여기서 주목해야할 점은 target의 object는 assign 이후 자기 자신의 original 영역을 지속적으로 참조 하고 있다는 것이다. 즉, obj1과 newobj는 완전히 동일한 object라는 것이다. target이었던 obj1의 값은 var newObj = Object.assign(obj1, obj2); 이후 obj2의 값으로 덮어 쒸워 지는 것을 볼 수 있다. target의 object는 source object와 동일한 properties가 있다면 overwrite 되게 된다. 코드를 아래와 같이 살짝 변경해 보겠다. var obj1 = &#123;pre:'King', name : 'hi', val: 1&#125;;var obj2 = &#123;name : 'hello', val: 2, nextVal :3&#125;;var newObj = Object.assign(obj1, obj2);console.log(obj1);console.log(newObj);obj1.name = 'modified';console.log(obj1);if (obj1 === newObj)&#123; console.log('same object!!')&#125; 변경 점은 source에 pre property가 생겼고, obj2에는 nextVal을 생성 했다. 해당 코드를 실행해 보면 아래와 같은 결과 값을 확인 할 수 있다. &#123; pre: 'King', name: 'hello', val: 2, nextVal: 3 &#125;&#123; pre: 'King', name: 'hello', val: 2, nextVal: 3 &#125;&#123; pre: 'King', name: 'modified', val: 2, nextVal: 3 &#125;same object!! 상위 결과에서 볼 수 있듯이 해당 메서드는 서로에게 갖지 않는 값에 대해서는 target으로 값이 주입된다. Cloning이러한 방법을 이용해서 객체에 대한 내부 properties Cloning이 가능하다. var obj1 = &#123;pre:'King', name : 'hi', val: 1&#125;;var clonedObj = Object.assign(&#123;&#125;, obj1);console.log(obj1);console.log(clonedObj);obj1.name = 'modified';console.log(obj1);if (obj1 === clonedObj)&#123; console.log('same object!!');&#125; else &#123; console.log('different object!!');&#125; 결과 값은 다음과 같다. &#123; pre: 'King', name: 'hi', val: 1 &#125;&#123; pre: 'King', name: 'hi', val: 1 &#125;&#123; pre: 'King', name: 'modified', val: 1 &#125;different object!! 객체에 대한 정보를 동일하게 copy 하였으나, 기존 object와는 다른 object를 생성한 것을 확인 가능하다. ES6 Spread OperatorES6 문법에서 사용되는 spread operator를 이용해서 merge가 가능하다. 기본 사용법var obj1 = [1,2,3];var obj2 = [4,5,6];var length = obj1.push(...obj2);console.log(length);console.log(obj1);obj1.push(7);console.log(obj2);if (obj1 === obj2)&#123; console.log('same object!!');&#125; else &#123; console.log('different object!!');&#125; 결과값은 다음과 같다. 6[ 1, 2, 3, 4, 5, 6 ][ 4, 5, 6 ]different object!! 본 사용법은 사실 object간의 결합을 대상으로 하지 않는다. spread operator 자체가 array와 같은 Iterator성 객체를 대상으로한 문법이기 때문이다. 결과적으로 Array의 결합으로 볼수 있으나 object의 merge용도로 사용되지는 않는다. 이런식의 코드도 많이 사용할 수 있다. &gt; var obj1 = [1,2,3];&gt; var obj2 = [...obj1, 4,5,6];&gt; &gt; console.log(obj2); &gt; [ 1, 2, 3, 4, 5, 6 ] ECMAScript 2018 기준으로는 다음 코드도 사용이 가능하다. &gt; var obj1 = &#123;test:1&#125;;&gt; var obj2 = &#123;test:2,after:3&#125;;&gt; &gt; var merged = &#123;...obj1, ...obj2&#125;;&gt; console.log(obj1); 그러나 아직 널리 사용 되지 않음으로 더 다루지 않는다. Undersocre Extend언더스코어 라이브러리를 사용해서 객체 머지가 가능하다. 기본 사용법const _ = require('underscore');var obj1 = &#123;a:1,b:2&#125;;var obj2 = &#123;c:3,d:4&#125;;var obj3 = &#123;c:3,d:5,e:6&#125;;_.extend(obj1, obj2, obj3);console.log(obj1);if (obj1 === obj2) &#123; console.log('same Object');&#125; else &#123; console.log('different Object');&#125; 결과는 다음과 같다. &#123; a: 1, b: 2, c: 3, d: 5, e: 6 &#125;different Object Object.assign과 같이 target만을 수정하고, 이후 들어오는 source 객체들은 변화가 없다. lodash merge로데쉬 라이브러리의 merge기능을 사용하는것도 가능하다. 기본 사용법const _ = require('lodash');var obj1 = &#123;a:1,b:2&#125;;var obj2 = &#123;c:3,d:4&#125;;var obj3 = &#123;c:3,d:5,e:6&#125;;var newObj = _.merge(obj1,obj2,obj3);obj1.a = 3;console.log(obj1);console.log(newObj);if (obj1 === newObj) &#123; console.log('same Object');&#125; else &#123; console.log('different Object');&#125; 결과값은 다음과 같다. &#123; a: 3, b: 2, c: 3, d: 5, e: 6 &#125;&#123; a: 3, b: 2, c: 3, d: 5, e: 6 &#125;same Object]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack basic with webstorm]]></title>
    <url>%2Fwebpack-start%2F</url>
    <content type="text"><![CDATA[webstorm 프로젝트 생성File &gt; New &gt; Project &gt; Empty 프로젝트 생성이후 아래 위치로 들어가서 settings&gt;Language&amp;Frameworks&gt;Node.js and NPM 아래와 같은 node 설정을 해준다 사용 node version 정보 nodejs version : 6.16.0 npm version : 3.10.10 npm module install webpack webpack-cli lodash 상위 세팅이 완료된 이후 npm init 실행을 통해서 package.json을 생성해 준다 이후 기본 webpack 구조를 다음과 같이 만들어 준다 webpack project 기본 구조 webpack-demo |- package.json+ |- /src+ |- index.js+ |- /dist+ |- index.html 해당 파일별 내용은 다음과 같다 dist/index.html &lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Getting Started&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src="main.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; src/index.js import _ from 'lodash'function component() &#123; let element = document.createElement('div'); // Lodash, currently included via a script, is required for this line to work element.innerHTML = _.join(['Hello', 'webpack'], ' '); return element;&#125;document.body.appendChild(component()); webpack 설정webpack.config.js 설정webpack을 실행하기 위해서는 기본적으로 config file이 필요하다. 아래와 같이 javascript파일을 생성해 준다 webpack-demo |- package.json |- /src |- index.js |- /dist |- index.html+ |- webpack.config.js 해당 config에 다음과 같이 코드를 넣어 준다. webpack.config.js const path = require('path');module.exports = &#123; entry: './src/index.js', output: &#123; filename: 'main.js', path: path.resolve(__dirname, 'dist') &#125;&#125;; entry는 webpack 처리할 최초 javascript의 위치를 지정하고, 해당 지정된 js를 바탕으로 webpack 처리(통합처리)될 파일을 산출할 위치를 output으로 표현해 준다. webpack 실행config파일까지 작성이 완료 되었다면, 다음 커멘드를 comand 창에서 실행한다. webpack --config webpack.config.js build가 완료 되면 dist/main.js가 생성되고 생성된 해당 파일에는 lodash와 index.js가 하나의 파일로 합쳐져 있는것을 확인 할 수 있다. NPM ScriptNPM을 이용한 buildwebpack 명령어를 이용한 빌드의 경우 매번 해당 커멘드를 작성해야하는 번거로움이 있다. 이를 해결하기 위해 아래와 같이 npm을 이용한 빌드를 설정한다 package.json &#123; "name": "untitled1", "version": "1.0.0", "description": "", "private": true, "dependencies": &#123; "webpack": "^4.29.3", "webpack-cli": "^3.2.3", "lodash": "^4.17.11" &#125;, "devDependencies": &#123;&#125;, "scripts": &#123; "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",+ "build" : "webpack --config webpack.config.js" &#125;, "author": "", "license": "ISC"&#125; 상위 코드를 입력한 후 다음 명령어를 실행한다. npm run build webstorm에서는 &quot;build&quot; 왼쪽으로 나타나는 ▶ 표시를 클릭해서 실행 해도 문제가 없다. Asset file 통합CSS 파일css 파일을 통합하기 위하여 css의 위치와 해당 css 로드시 사용할 node 모듈을 install 해야 한다 npm module install sytle-loader css-loader 모듈 인스톨 이후 style.css를 다음과 같이 만들어 준다 webpack-demo |- package.json |- /src |- index.js |- /dist |- index.html+ |- style.css style.css .hello &#123; color: red;&#125; 해당 파일을 webpack에서 읽어 올 수 있도록 config를 설정 한다. const path = require('path');module.exports = &#123; entry: './src/index.js', output: &#123; filename: 'main.js', path: path.resolve(__dirname, 'dist') &#125;,+ module: &#123;+ rules:[+ &#123;+ test: /\.css$/,+ use: [+ 'style-loader',+ 'css-loader'+ ]+ &#125;+ ]+ &#125;&#125;; module의 Rule은 2가지로 이루어 진다 리소스 : test,include,exclude, resource tag로 설정 가능하고, 정규화 식을 사용한다. 단, test와 resource tag는 혼용 할 수 없다 발행자(issuer) : 발행자의 경우는 entry인 index.js에 import 처리 하면 output 파일에 bundle 된다 use의 경우 로드된 리소스를 처리하는 모듈을 지정할 수 있다. 지정된 모듈은 chained되게 연속적으로 실행 되지만, 주의할 점은 실행의 순서가 맨 마지막에서 처음으로 로드된다는 것이다. 여기서는 &#39;css-loader&#39; 이후에 &#39;style-loader&#39;가 실행 된다. issuer 처리를 위해서 다음 코드를 추가한다 src/index.js import _ from 'lodash'+ import './style.css'function component() &#123; let element = document.createElement('div'); // Lodash, currently included via a script, is required for this line to work element.innerHTML = _.join(['Hello', 'webpack'], ' ');+ element.classList.add('hello'); return element;&#125;document.body.appendChild(component()); issuer인 import &#39;./style.css&#39;를 entry에 표현 하지 않으면 해당 css 파일은 build시 bundle 제외 된다. Image 파일npm module install file-loader 모듈 인스톨 완료 후에 적당한 이미지를 다음과 같이 프로젝트에 추가해 준다. webpack-demo |- package.json |- /src |- index.js |- /dist |- index.html |- style.css+ |- icon.png 해당 파일을 로드하기 위해 아래와 같이 webpack config를 수정해 준다. webpack.config.js const path = require('path');module.exports = &#123; entry: './src/index.js', output: &#123; filename: 'main.js', path: path.resolve(__dirname, 'dist') &#125;, module: &#123; rules: [ &#123; test: /\.css$/, use: [ 'style-loader', 'css-loader' ] &#125;,+ &#123;+ test:/\.(png|svg|jpg|gif)$/,+ use :[+ 'file-loader'+ ]+ &#125; ] &#125;&#125;; 해당 이미지 issuer를 등록한다. src/index.js import _ from 'lodash'import './style.css'+ import Icon from './icon.png';function component() &#123; let element = document.createElement('div'); // Lodash, currently included via a script, is required for this line to work element.innerHTML = _.join(['Hello', 'webpack'], ' '); element.classList.add('hello');+ var myIcon = new Image();+ myIcon.src = Icon;+ element.appendChild(myIcon); return element;&#125;document.body.appendChild(component()); 이 정도로 해당 icon.png는 bundle되게 된다. 그러나 만약에 해당 png를 entry에서 로드 하지 않고 css에서만 사용한다고 해도 entry가 style을 부르고 style에서 icon.png를 부르기 때문에 bundle처리 된다. src/style.css .hello &#123; color: red;+ background: url('./icon.png');&#125; 기타 파일상위의 경우와 마찬가지로 각종 Asset을 로드 할 수 있는데, 로드가 가능한 모듈과 리소스는 다음과 같다 기타 npm module install file-loader : font 및 각종 리소스 자료 csv-loader : csv, tsv 등 xml-loader : xml Output Management다중 Entry만약에 entry에 대상이 되는 js가 한개 이상일 경우 어떻게 셋팅해야 하는지 알아본다 webpack-demo |- package.json |- /src |- index.js+ |- print.js |- /dist |- index.html |- style.css |- icon.png 새로운 javascript를 하나 추가 하였다. 해당 javascript에는 다음 내용이 들어간다 src/print.js export default function printMe() &#123; console.log('I get called from print.js!');&#125; 해당 entry를 webpack config에 등록해 준다. webpack.config.js const path = require('path');module.exports = &#123; entry: &#123;+ app: './src/index.js'+ , print : './src/print.js' &#125;, output: &#123; // filename: 'main.js',+ filename: '[name].bundle.js', path: path.resolve(__dirname, 'dist') &#125;, module: &#123; rules: [ &#123; test: /\.css$/, use: [ 'style-loader', 'css-loader' ] &#125;, &#123; test:/\.(png|svg|jpg|gif)$/, use :[ 'file-loader' ] &#125;]]></content>
      <tags>
        <tag>javascript</tag>
        <tag>webpack</tag>
        <tag>webstorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[404]]></title>
    <url>%2F%2F404.html</url>
    <content type="text"><![CDATA[404 not found 4444 4444 0000000000 4444 4444 4444 4444 00000000000000 4444 4444 4444 4444 0000 0000 4444 4444 44444444444444 0000 0000 44444444444444 4444444444444 0000 0000 4444444444444 4444 0000 0000 4444 4444 0000 0000 4444 4444 00000000000000 4444 4444 0000000000 4444 not found404]]></content>
  </entry>
</search>
